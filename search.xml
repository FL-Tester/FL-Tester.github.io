<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>课设</title>
      <link href="/2022/10/20/cd/"/>
      <url>/2022/10/20/cd/</url>
      
        <content type="html"><![CDATA[<h2 id="无线单片机课程设计"><a href="#无线单片机课程设计" class="headerlink" title="无线单片机课程设计"></a>无线单片机课程设计</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>(1)至少采用以下传感器其中1种: a.超声波、b.加速度、c.压力。<br>(2)点对点传输，采用LCD或数码管显示传感数据，或者通过串口传输到PC端，由串口调试助手完成。定时采样并刷新显示。<br>(3)设计报告中要清楚描述所用传感器的工作原理以及软硬件设计的具体方案。必须设计清晰、合理的程序流程图。解释关键代码段。<br>(4)全部程序代码作为附录，并要有必要的注释。<br>(5)优良等级的要求：实现多点的无线网络传输，要有自定义数据帧格式(含加密和纠错)。</p><h3 id="选题"><a href="#选题" class="headerlink" title="选题"></a>选题</h3><p>多点动作捕捉 （加速度传感器）</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>此处参考了大佬的代码</p><h4 id="mpu6050适配cc2530-c51"><a href="#mpu6050适配cc2530-c51" class="headerlink" title="mpu6050适配cc2530(c51)"></a>mpu6050适配cc2530(c51)</h4><p>mpu6050 头文件</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _MPU6050_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> _MPU6050_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> SCL P0_6      </span><span class="token comment" spellcheck="true">//IIC时钟引脚定义</span><span class="token macro property">#<span class="token directive keyword">define</span> SDA P0_7      </span><span class="token comment" spellcheck="true">//IIC数据引脚定义</span><span class="token macro property">#<span class="token directive keyword">define</span> SDA_OUT()   P0DIR |= 0x80</span><span class="token macro property">#<span class="token directive keyword">define</span> SDA_IN()    P0DIR &amp;= ~0x80</span><span class="token macro property">#<span class="token directive keyword">define</span> SCL_OUT()   P0DIR |= 0x40</span><span class="token comment" spellcheck="true">//****************************************</span><span class="token comment" spellcheck="true">// 定义MPU6050内部地址</span><span class="token comment" spellcheck="true">//****************************************</span><span class="token macro property">#<span class="token directive keyword">define</span>    SMPLRT_DIV        0x19    </span><span class="token comment" spellcheck="true">//陀螺仪采样率，典型值：0x07(125Hz)</span><span class="token macro property">#<span class="token directive keyword">define</span>    CONFIG            0x1A    </span><span class="token comment" spellcheck="true">//低通滤波频率，典型值：0x06(5Hz)</span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_CONFIG        0x1B    </span><span class="token comment" spellcheck="true">//陀螺仪自检及测量范围，典型值：0x18(不自检，2000deg/s)</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_CONFIG    0x1C    </span><span class="token comment" spellcheck="true">//加速计自检、测量范围及高通滤波频率，典型值：0x01(不自检，2G，5Hz)</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_XOUT_H    0x3B</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_XOUT_L    0x3C</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_YOUT_H    0x3D</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_YOUT_L    0x3E</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_ZOUT_H    0x3F</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_ZOUT_L    0x40</span><span class="token macro property">#<span class="token directive keyword">define</span>    TEMP_OUT_H        0x41</span><span class="token macro property">#<span class="token directive keyword">define</span>    TEMP_OUT_L        0x42</span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_XOUT_H        0x43</span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_XOUT_L        0x44    </span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_YOUT_H        0x45</span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_YOUT_L        0x46</span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_ZOUT_H        0x47</span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_ZOUT_L        0x48</span><span class="token macro property">#<span class="token directive keyword">define</span>    PWR_MGMT_1        0x6B    </span><span class="token comment" spellcheck="true">//电源管理，典型值：0x00(正常启用)</span><span class="token macro property">#<span class="token directive keyword">define</span>    WHO_AM_I            0x75    </span><span class="token comment" spellcheck="true">//IIC地址寄存器(默认数值0x68，只读)</span><span class="token macro property">#<span class="token directive keyword">define</span>    SlaveAddress    0xD0    </span><span class="token comment" spellcheck="true">//IIC写入时的地址字节数据，+1为读取</span><span class="token keyword">extern</span> <span class="token keyword">int</span> accX<span class="token punctuation">,</span>accY<span class="token punctuation">,</span>accZ<span class="token punctuation">,</span>graX<span class="token punctuation">,</span>graY<span class="token punctuation">,</span>graZ<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Init_MPU6050</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Multiple_read_MPU6050</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> REG_Address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源文件</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"ioCC2530.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"MPU6050.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"OnBoard.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"hal_types.h"</span></span><span class="token macro property">#<span class="token directive keyword">define</span> uint  unsigned int</span><span class="token macro property">#<span class="token directive keyword">define</span> uchar unsigned char</span><span class="token keyword">int</span> accX<span class="token punctuation">,</span>accY<span class="token punctuation">,</span>accZ<span class="token punctuation">,</span>graX<span class="token punctuation">,</span>graY<span class="token punctuation">,</span>graZ<span class="token punctuation">;</span><span class="token operator">/</span><span class="token comment" spellcheck="true">/****************************************//函数声明//****************************************void WriteSDA_0(void);void WriteSDA_1(void);void WriteSCL_0(void);void WriteSCL_1(void);void ReadSDA(void);void Init_IO(void);void MPU6050_Start(void);void MPU6050_Stop(void);void MPU6050_SendACK(uchar ack);uchar MPU6050_RecvACK(void);void MPU6050_SendByte(uchar data);uchar MPU6050_RecvByte(void);void Single_Write_MPU6050(uchar REG_Address,uchar REG_data);uchar Single_Read_MPU6050(uchar REG_Address);void InitMPU6050(void);void ALLInit(void);void Multiple_read_MPU6050(void);void delay_us(unsigned int u);void ALLInit(void){   Init_IO();   InitMPU6050();}/****************us延时函数 32M晶振 单周期MCU********************/</span><span class="token keyword">void</span> <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>   u<span class="token operator">=</span><span class="token number">4</span><span class="token operator">*</span>u<span class="token punctuation">;</span>   <span class="token function">MicroWait</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*****************************MPU6050*******************************/</span><span class="token keyword">void</span> <span class="token function">WriteSDA_0</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    P0DIR<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x40</span><span class="token punctuation">;</span>    SDA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">WriteSDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    P0DIR<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x40</span><span class="token punctuation">;</span>    SDA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">WriteSCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    P0DIR<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x80</span><span class="token punctuation">;</span>    SCL<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">WriteSCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    P0DIR<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x80</span><span class="token punctuation">;</span>    SCL<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ReadSDA</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//sda输入,=0</span><span class="token punctuation">{</span>    P0DIR<span class="token operator">&amp;</span><span class="token operator">=</span><span class="token number">0xBF</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Init_IO</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  P0DIR<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0xc0</span><span class="token punctuation">;</span>  P0SEL<span class="token operator">&amp;</span><span class="token operator">=</span><span class="token number">0x3f</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************起始信号**************************************/</span><span class="token keyword">void</span> <span class="token function">MPU6050_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">WriteSDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WriteSCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WriteSDA_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WriteSCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************停止信号**************************************/</span><span class="token keyword">void</span> <span class="token function">MPU6050_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>       <span class="token function">WriteSDA_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">WriteSCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">WriteSDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//I2C发送应答信号</span><span class="token comment" spellcheck="true">//入口参数:ack (0:ACK 1:NAK)</span><span class="token keyword">void</span> <span class="token function">MPU6050_SendACK</span><span class="token punctuation">(</span>uchar ack<span class="token punctuation">)</span><span class="token punctuation">{</span>        SDA<span class="token operator">=</span>ack<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//写应答信号</span>    <span class="token function">WriteSCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//拉高时钟线</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Delay5us();    //延时</span>    <span class="token function">WriteSCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//拉低时钟线</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Delay5us();    //延时</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************发送应答信号**************************************/</span>uchar <span class="token function">MPU6050_RecvACK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ReadSDA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WriteSCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//拉高时钟线</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Delay5us();    //延时</span>    CY<span class="token operator">=</span>SDA<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//读应答信号</span>    <span class="token function">WriteSCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//拉低时钟线</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Delay5us();    //延时</span>    P0DIR<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> CY<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************向IIC总线发送一个字节数据**************************************/</span><span class="token keyword">void</span> <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>uchar data<span class="token punctuation">)</span><span class="token punctuation">{</span>    uchar i<span class="token punctuation">;</span>    <span class="token function">SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//8位计数器</span>    <span class="token punctuation">{</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token function">WriteSDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">else</span>         <span class="token punctuation">{</span><span class="token function">WriteSDA_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                data<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">WriteSCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//拉高时钟线</span>        <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//延时</span>        <span class="token function">WriteSCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//拉低时钟线</span>        <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//延时</span>    <span class="token punctuation">}</span>    <span class="token function">MPU6050_RecvACK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************从IIC总线接收一个字节数据**************************************/</span>uchar <span class="token function">MPU6050_RecvByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      uchar i<span class="token punctuation">;</span>    uchar dat <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">WriteSDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//使能内部上拉,准备读取数据,</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//8位计数器</span>    <span class="token punctuation">{</span>        dat <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        SCL <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//拉高时钟线</span>        <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//延时</span>        dat <span class="token operator">|</span><span class="token operator">=</span> SDA<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//读数据               </span>        SCL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//拉低时钟线</span>         <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//延时</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dat<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//******单字节写入*******************************************</span><span class="token keyword">void</span> <span class="token function">Single_Write_MPU6050</span><span class="token punctuation">(</span>uchar REG_Address<span class="token punctuation">,</span>uchar REG_data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">MPU6050_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//起始信号</span>    <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>SlaveAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//发送设备地址+写信号</span>    <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>REG_Address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//内部寄存器地址，</span>    <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>REG_data<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//内部寄存器数据，</span>    <span class="token function">MPU6050_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//发送停止信号</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//********单字节读取*****************************************</span>uchar <span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>uchar REG_Address<span class="token punctuation">)</span><span class="token punctuation">{</span>    uchar REG_data<span class="token punctuation">;</span>    <span class="token function">MPU6050_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//起始信号</span>    <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>SlaveAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发送设备地址+写信号</span>    <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>REG_Address<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//发送存储单元地址，从0开始    </span>    <span class="token function">MPU6050_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//起始信号</span>    <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>SlaveAddress<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//发送设备地址+读信号</span>    REG_data<span class="token operator">=</span><span class="token function">MPU6050_RecvByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//读出寄存器数据</span>    <span class="token function">MPU6050_SendACK</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//接收应答信号</span>    <span class="token function">MPU6050_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//停止信号</span>    <span class="token keyword">return</span> REG_data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//*****************************************************************</span><span class="token comment" spellcheck="true">//初始化MPU6050，根据需要请参考pdf进行修改************************</span><span class="token keyword">void</span> <span class="token function">InitMPU6050</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Single_Write_MPU6050</span><span class="token punctuation">(</span>PWR_MGMT_1<span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//解除休眠状态</span>    <span class="token function">Single_Write_MPU6050</span><span class="token punctuation">(</span>SMPLRT_DIV<span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Single_Write_MPU6050</span><span class="token punctuation">(</span>CONFIG<span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Single_Write_MPU6050</span><span class="token punctuation">(</span>GYRO_CONFIG<span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Single_Write_MPU6050</span><span class="token punctuation">(</span>ACCEL_CONFIG<span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//*********************************************************</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//连续读出MPU6050内部数据</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//*********************************************************</span><span class="token keyword">void</span> <span class="token function">Multiple_read_MPU6050</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">char</span> BUF<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//接收数据缓存区  </span>  BUF<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>ACCEL_XOUT_H<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>ACCEL_XOUT_L<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>ACCEL_YOUT_H<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>ACCEL_YOUT_L<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>ACCEL_ZOUT_H<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>ACCEL_ZOUT_L<span class="token punctuation">)</span><span class="token punctuation">;</span>    BUF<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>GYRO_XOUT_H<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>GYRO_XOUT_L<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>GYRO_YOUT_H<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>GYRO_YOUT_L<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>GYRO_ZOUT_H<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>GYRO_ZOUT_L<span class="token punctuation">)</span><span class="token punctuation">;</span>    accX<span class="token operator">=</span><span class="token punctuation">(</span>BUF<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>BUF<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   accY<span class="token operator">=</span><span class="token punctuation">(</span>BUF<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>BUF<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   accZ<span class="token operator">=</span><span class="token punctuation">(</span>BUF<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>BUF<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   graX<span class="token operator">=</span><span class="token punctuation">(</span>BUF<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>BUF<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  graY<span class="token operator">=</span><span class="token punctuation">(</span>BUF<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>BUF<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  graZ<span class="token operator">=</span><span class="token punctuation">(</span>BUF<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>BUF<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现多点的无线网络传输"><a href="#实现多点的无线网络传输" class="headerlink" title="实现多点的无线网络传输"></a>实现多点的无线网络传输</h4><p>采用点播 但是默认是一个终端节点<br>需要增了一个终端节点或者多个</p><h5 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h5><p>在头文件SampleApp.h中 添加一个点播id</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> SAMPLEAPP_FLASH_CLUSTERID     2</span><span class="token macro property">#<span class="token directive keyword">define</span> SAMPLEAPP_POINT_TO_POINT_CLUSTERID 3</span><span class="token macro property">#<span class="token directive keyword">define</span> SAMPLEAPP_POINT_TO_POINT_CLUSTERID_2 4   </span><span class="token comment" spellcheck="true">//需要添加的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h5><p>在就是接收处理函数 SampleApp_MessageMSGCB()中添加点播id相关的处理函数<br>如果协调器和终端节点烧的不同一份代码 这个函数在协调器文件中</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SampleApp_MessageMSGCB</span><span class="token punctuation">(</span> afIncomingMSGPacket_t <span class="token operator">*</span>pkt <span class="token punctuation">)</span><span class="token punctuation">{</span>  uint16 flashTime<span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span> pkt<span class="token operator">-></span>clusterId <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">case</span> SAMPLEAPP_PERIODIC_CLUSTERID<span class="token punctuation">:</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>                                               <span class="token keyword">case</span> SAMPLEAPP_POINT_TO_POINT_CLUSTERID<span class="token punctuation">:</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'X'</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"ED1:"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalLedBlink</span><span class="token punctuation">(</span> HAL_LED_1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">200</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> SAMPLEAPP_POINT_TO_POINT_CLUSTERID_2<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">//添加的id</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'X'</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"ED2:"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalLedBlink</span><span class="token punctuation">(</span> HAL_LED_1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">200</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> SAMPLEAPP_FLASH_CLUSTERID<span class="token punctuation">:</span>      flashTime <span class="token operator">=</span> <span class="token function">BUILD_UINT16</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">HalLedBlink</span><span class="token punctuation">(</span> HAL_LED_4<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>flashTime <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h5><p>烧录终端节点时 在点播发送函数 SampleApp_SendPointToPointMessage()<br>设置相对于的id</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">AF_DataRequest</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>Point_To_Point_DstAddr<span class="token punctuation">,</span>                       <span class="token operator">&amp;</span>SampleApp_epDesc<span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">//SAMPLEAPP_POINT_TO_POINT_CLUSTERID,  //节点1</span>                       SAMPLEAPP_POINT_TO_POINT_CLUSTERID_2<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//节点2</span>                       <span class="token number">37</span><span class="token punctuation">,</span>                       buf<span class="token punctuation">,</span>                       <span class="token operator">&amp;</span>SampleApp_TransID<span class="token punctuation">,</span>                       AF_DISCV_ROUTE<span class="token punctuation">,</span>                       AF_DEFAULT_RADIUS <span class="token punctuation">)</span> <span class="token operator">==</span> afStatus_SUCCESS <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//其余省略 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成以上步骤 协调器的串口数据如下<br><img src="/medias/cd/zigbeeresult.jpg"></p><h5 id="原理、数据处理、动作捕捉"><a href="#原理、数据处理、动作捕捉" class="headerlink" title="原理、数据处理、动作捕捉"></a>原理、数据处理、动作捕捉</h5><p>参考如下：<br><a href="https://zhuanlan.zhihu.com/p/20082486">https://zhuanlan.zhihu.com/p/20082486</a><br>(<a href="https://oshwhub.com/Scarling/shen-tai-dian-sai-jian-yi-dong-zuo-bu-zhuo-shou-tao">https://oshwhub.com/Scarling/shen-tai-dian-sai-jian-yi-dong-zuo-bu-zhuo-shou-tao</a>)<br>源码链接：<br><a href="https://github.com/FL-Tester/Course-Design/tree/main/%E6%97%A0%E7%BA%BF%E5%8D%95%E7%89%87%E6%9C%BA/ZStack-CC2530-2.5.1a-MPU6050">https://github.com/FL-Tester/Course-Design/tree/main/%E6%97%A0%E7%BA%BF%E5%8D%95%E7%89%87%E6%9C%BA/ZStack-CC2530-2.5.1a-MPU6050</a></p><h2 id="基于linux的语音识别项目-科大讯飞离线端"><a href="#基于linux的语音识别项目-科大讯飞离线端" class="headerlink" title="基于linux的语音识别项目(科大讯飞离线端)"></a>基于linux的语音识别项目(科大讯飞离线端)</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>该项目是在linux下科大讯飞离线包和虚拟LCD的基础上完成</p><h4 id="涉及的知识"><a href="#涉及的知识" class="headerlink" title="涉及的知识:"></a>涉及的知识:</h4><ul><li>linux基本操作/常用命令</li><li>C语言基础</li><li>TCP/IP(socket网络编程)</li><li>多线程编程</li><li>makefile</li><li>linux简单驱动调用</li></ul><h4 id="工程文件结构"><a href="#工程文件结构" class="headerlink" title="工程文件结构"></a>工程文件结构</h4><p><img src="/project/gcwj.jpg"></p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>本次开发是在windows下的vscode通过ssh插件远程开发<br>linux版本为ubuntu16.04 在VMware下运行<br>需要在虚拟机配置好网卡 alsa声音库等 保证tcp通信 和 声音播放以及录入<br>工程文件如上图 需要编写好makefile(工程较小 没用cmake) 以及配置好文件夹</p><h3 id="配置模拟LCD驱动"><a href="#配置模拟LCD驱动" class="headerlink" title="配置模拟LCD驱动"></a>配置模拟LCD驱动</h3><p>模拟只是为了实现两个功能：<br>图像化界面的显示 —- lcd<br>触摸屏按钮的功能 —- 触摸屏</p><h4 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h4><p><img src="/project/lcd1.jpg"></p><ol><li>进入lcd驱动文件夹 cd  mmap_drv  </li><li>sudo make clean 和 sudo make 清除以及重新编译</li><li>安装驱动 sudo insmod mmp_drv.ko</li><li>进入模拟器目录 重复以上步骤</li></ol><h3 id="客户端与科大讯飞端建立稳定的TCP通信"><a href="#客户端与科大讯飞端建立稳定的TCP通信" class="headerlink" title="客户端与科大讯飞端建立稳定的TCP通信"></a>客户端与科大讯飞端建立稳定的TCP通信</h3><ol><li>打开科大讯飞本地离线包端</li><li>配置语言ID<br><img src="/project/kdxf1.jpg" alt="科大讯飞离线端开启成功"></li><li>测试<br><img src="/project/kdxf2.jpg" alt="与科大讯飞通信成功"></li></ol><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>三个进程</p><ul><li>终端1: 科大讯飞语音识别端</li><li>终端2: 虚拟lcd驱动端</li><li>终端3: 主程序</li></ul><p><img src="/project/result1.jpg"></p><p>通过语音控制客户端 功能有画图 视频播放 音乐等等<br><img src="/project/result2.jpg"></p><h2 id="基于zigbee和mqtt的宿舍防火防盗-物联网"><a href="#基于zigbee和mqtt的宿舍防火防盗-物联网" class="headerlink" title="基于zigbee和mqtt的宿舍防火防盗(物联网)"></a>基于zigbee和mqtt的宿舍防火防盗(物联网)</h2><h2 id="校园打卡"><a href="#校园打卡" class="headerlink" title="校园打卡"></a>校园打卡</h2><h3 id="要求-1"><a href="#要求-1" class="headerlink" title="要求"></a>要求</h3><h4 id="分组与选题"><a href="#分组与选题" class="headerlink" title="分组与选题"></a>分组与选题</h4><p>自由组合，8-10人一组，每组推选组长1人；可以在下面的参考选题中自由选题或自拟题目。</p><h4 id="选题-1"><a href="#选题-1" class="headerlink" title="选题"></a>选题</h4><p>基于校园卡的学生考勤系统<br>（1）任务设计制作<br>    基于校园卡的学生考勤系统。<br>（2）要求<br>    1. 以校园卡（RFID卡）作为身份识别卡，刷卡进行签到。<br>    2. 刷卡信息可以传输至WEB服务器（传输方式自拟，可以是有线的，也可以是无线的）进行验证；验证结果可以返回至客服端进行显示（验证成功或失败）。<br>    3. 编写B/S结构的应用程序，可以通过网页浏览器实时查看考勤信息。<br>    4. 电路制作时，必须注明本组成员学号与姓名。</p><h3 id="选题修改"><a href="#选题修改" class="headerlink" title="选题修改"></a>选题修改</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>基于校园卡的学生考勤系统（不变）</p><h5 id="要求-2"><a href="#要求-2" class="headerlink" title="要求"></a>要求</h5><ol><li>以校园卡（RFID卡）作为身份识别卡，刷卡进行签到。</li><li>刷卡信息可以传输至私有服务器数据库和客户端（gec6818）。<br> 板子通过sql插入传到数据库或者tcp到qt小型数据库中</li><li>在开发板屏幕或者上位机（可以是开发板qt程序中）中实时查看考勤信息。<br> qt开发/纯c画图ui</li><li>电路制作时，必须注明本组成员学号与姓名。</li></ol><h3 id="主控"><a href="#主控" class="headerlink" title="主控"></a>主控</h3><p>ESP32 (Xtensa® 双核32 位LX6 微处理器)<br>gec6818开发板 (Cortex-A8 S5PV210)</p><h3 id="外设"><a href="#外设" class="headerlink" title="外设"></a>外设</h3><p>nfc模块:RC522<br>屏幕: 0.96寸OLED屏幕(SSD1306) 2.4寸ST7789屏幕</p><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ol><li>esp32裸机开发(IDE: ESP-IDF &amp; VSCODE)</li><li>FreeRTOS</li><li>LVGL (ui)</li><li>通信协议: SPI I2C UART</li></ol><h3 id="电路设计和打板"><a href="#电路设计和打板" class="headerlink" title="电路设计和打板"></a>电路设计和打板</h3><h2 id="毕设"><a href="#毕设" class="headerlink" title="毕设"></a>毕设</h2>]]></content>
      
      
      <categories>
          
          <category> Other-Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具语言</title>
      <link href="/2022/10/15/tool/"/>
      <url>/2022/10/15/tool/</url>
      
        <content type="html"><![CDATA[<h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><h2 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h2><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2>]]></content>
      
      
      <categories>
          
          <category> EC-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝FreeRTOS</title>
      <link href="/2022/10/15/freertos/"/>
      <url>/2022/10/15/freertos/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文主要记录通过esp32学习裸机以及FreeRTOS<br>ESP32 主频高达240MHZ 还自带wifi…..<br>可以使用arduino和microPython开发 当然这两个在c工程面前都是玩具 但是可以快速验证想法<br>本次浅尝主要用c开发<br>环境：VSCode + ESP-IDF(插件)</p>]]></content>
      
      
      <categories>
          
          <category> EC-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FreeRTOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/2022/10/11/LS/"/>
      <url>/2022/10/11/LS/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> EC-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通信协议</title>
      <link href="/2022/10/11/tx/"/>
      <url>/2022/10/11/tx/</url>
      
        <content type="html"><![CDATA[<h2 id="MCU常用通信协议"><a href="#MCU常用通信协议" class="headerlink" title="MCU常用通信协议"></a>MCU常用通信协议</h2><h3 id="URAT-amp-amp-RS232-amp-amp-RS485"><a href="#URAT-amp-amp-RS232-amp-amp-RS485" class="headerlink" title="URAT &amp;&amp; RS232 &amp;&amp; RS485"></a>URAT &amp;&amp; RS232 &amp;&amp; RS485</h3><p>URAT： 通用异步收发器<br>空闲位：高电平<br>起始位：低电平 为了区分 高电平和空闲<br>数据位：先发低位 再发高位<br>校验位：校验数据的正确性 奇校验(odd)，偶校验(even)，0校验(space)，1校验(mark)以及无校验(noparity) 不能修正错误 可有可无 会影响通信速度<br>停止位：高电平 (1/1.5/2位) 不能没有<br>发十个字节 循环十次发送 不能连续发送<br>不能连续发送 一次最多发八位 不影响后面的<br>累计误差的出现 后面的会一直错<br>异步 收发双方 时钟不同步<br>uart控制器 需要设置一下相关寄存器就可以了<br>输入输出重定向 在linux下收到的串口 打印到<br>利用写好的发送和接收的基本函数 传入字符串等封装成函数<br>UART，全称为universal asynchronous receiver and transmitter，即通用异步收/发器；<br>USART，全称为universal synchronous asynchronous receiver and transmitter，即通用同步/异步收/发器。<br>顾名思义，UART只能用于异步串行通讯，而USART既能用于同步串行通讯，又能用于异步串行通讯。<br>这里的同步异步分别是指：<br>异步通信，指数据传送以字符为单位，字符与字符间的传送完全异步，位与位之间的传送基本上是同步的。<br>同步通信，是指数据传送以数据块（一组字符）为单位，字符与字符之间、字符内部的位与位之间都同步。<br>相对而言，异步通信效率较低，同步通信效率较高。</p><h4 id="RS232-RS485"><a href="#RS232-RS485" class="headerlink" title="RS232 RS485"></a>RS232 RS485</h4><p>物理层 电气层的协议 依赖于uart 传输速度 距离等提高<br>uart 缺点 : 电气接口不统一 没有定义接口的电气特性。<br>ttl电平 cpu电平<br>抗干扰能力差<br>数据传输容易出错<br>通信距离很短<br>rs232协议<br>规定采用标准的连接器<br>电气层做了优化 增加了传输距离<br>rs232用的最多的是三根线 rxd txd gud<br>信号 -5–15V 认为是1  +5-+15V 是低电平<br>提高了抗干扰能力 增大了通信距离 一般可达15M<br>ttl和232互相转换电平的芯片<br>电平转换芯片<br>rs232存在的问题<br>    需要转换电平芯片<br>    传输距离较短<br>rs485协议<br>特点：传输距离1500m、连接多个收发器 具有多站能力 可以建立一个设备网络</p><p>用差分信号进行传输 提高了抗干扰能力<br>兼容TTL电平<br>半双工 编程时需要加以处理</p><p>I2C规定了主机和从机的管理机制<br>rs485自己设定</p><h3 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h3><p>SPI (Serial Peripheral Interface) 串行外围设备接口。<br>高速 全双工 同步的通信总线<br>MISO     主设备输入从设备输出<br>MOSI     主设备输出从设备输入<br>SCLK     时钟  同步效果<br>CS       片选  chip select 用于寻址   cs可以用多条 cs1 cs2 cs3…………..<br>master   主设备<br>slave    从设备</p><h4 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h4><p>每个从设备跟主设备之间都用一个专属的cs线<br>主设备需要先向对应从设备的片选线使能信号(高低电平都可以)<br>高低电平使能判断<br>一般      cs(高电平有效)    /cs(低电平有效)<br>芯片手册</p><h4 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h4><p>先发高位 后发低位<br>高电平 1 低电平 0<br>一个字节传送完成后无需应答开始下一个字节传送<br>SPI总线采用同步方式工作 时钟线在上升沿或下降沿时发送，读取同理<br>八个时钟周期完成一个字节传输<br>没有起始信号和停止信号</p><h4 id="极性和相位"><a href="#极性和相位" class="headerlink" title="极性和相位"></a>极性和相位</h4><p>一共用四种工作模式<br>时钟极性设置时钟空闲时的电平<br>时钟相位设置读取数据和发送数据的时钟沿</p><h3 id="I2C"><a href="#I2C" class="headerlink" title="I2C"></a>I2C</h3><p>总线协议 半双工<br>SDA：串行数据线<br>SCL：串行时钟线<br>用于近距离、低俗的芯片之间的通信；有两跟双向的信号线，一根数据线sda用于收发数据，一根scl用于通信双方时钟同步；I2C总线硬件结构简单，成本较低，因此在各个领域得到了广泛的应用。<br>多主机总线，连接IIC总线上的器件分为主机和从机 主机有权发起和结束一次通信 而从机只能被主机呼唤 每个链接到IIC总线上的期间都有唯一的地址(7bit) ，每个都可以成为主机和从机(同一时刻只能有一个主机)，总线上的器件增加和删除不影响其他器件正常工作；<br>发送器：在通信总线上发送数据的器件<br>接收器：在通信总线上接收数据的器件</p><p>I2C总线存在三种状态：<br>1.空闲                SCL SDA 都为高电平<br>2.工作开始         此时SCL为高，而SDA出现下降沿<br>3.工作停止         此时SCL为高，SDA出现上升沿</p><p>同步信号<br>SCL管理发送和接收数据<br>SCL 低电平 发送器工作 在此期间 SDA数据线的信号 允许变化<br>SLC 高电平 接收器工作<br>每次都是一位 循环八次就是一个字节<br>IIC 总线读写过程：<br>1.主机发送从机地址(7bit)+0(0是写)，所有从机都会接收到这个信息，但是只有地址匹配的从机反馈一个ACK(0)，并准备后面的接收工作，其它地址不对的从机，’早点洗洗睡吧，没咱啥事儿了’。<br>2.主机收到这个ACK，开始发送内存地址(8bit),所有地址匹配的从机(前面说过，一个主机可以匹配多个从机，只要那从机地址相同就行)接收这个8bit的内存地址，在吩咐下去之后，给主机一个反馈ACK(0)，’我OK啦’。<br>3.主机收到这个ACK，开始发送数据给从机，一个字节8bit，从机接收完成，给主机反馈ACK(0)。<br>4.主机收到这个ACK，是继续发送数据，还是发送终止信号，取决于数据是否发送完毕。<br>IIC 总线读写过程：<br>1.主机发送从机地址(7bit)+0(0是写)，这里为啥又是写呢？首先，主机得找到这些从机呀，当然要将从机地址写给各个从机了。所有从机都会接收到这个信息，但是只有地址匹配的从机反馈一个ACK(0)，并准备后面的接收工作，其它地址不对的从机，’诶……早点洗洗睡吧，又没咱啥事儿了’。<br>2.主机接收到这个ACK，开始发送8bit的内存地址给从机，’把这个地址找到，把货给我取出来备着，我一会儿要从你这里提货啊!’。从机找好这些地址后，反馈一个ACK(0)给主机。<br>3.主机收到这个ACK，再发一次从机地址(7bit)，只不过这次最后一个换成1(读)了。从机收到并返回ACK(0)。<br>4.主机收到这个ACK，做好了接收从机信息的准备，这个时候从机信息到了，主机接收完信息后不对从机发送反馈(毕竟人家是老大啊，老大拿好了还要给小喽喽打个报告？)直接发起终止信号，心疼从机3秒钟。<br>1<br>先确认通信的从机<br>2<br>如果是发送数据 直接发送 发送完毕后 从机返回一个ack-0<br>如果是接收数据 再发一次地址和最后一位改为1(接收/读取状态) 从机返回一个ack-0<br>主机收完信息后不用ack给从机<br>补充：I2C通信协议允许暂停功能，就是在主机传输数据时，从机需要进行一个优先级高的事件时，从机通过拉低SCL，迫使主机等待，等到处理完紧急事件后，从机释放SCL，主机继续传输。<br>中断？</p><h2 id="物联网常用通信协议"><a href="#物联网常用通信协议" class="headerlink" title="物联网常用通信协议"></a>物联网常用通信协议</h2><h3 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h3><h3 id="ZigBee"><a href="#ZigBee" class="headerlink" title="ZigBee"></a>ZigBee</h3><h3 id="LoRa"><a href="#LoRa" class="headerlink" title="LoRa"></a>LoRa</h3><h3 id="NB-IoT"><a href="#NB-IoT" class="headerlink" title="NB-IoT"></a>NB-IoT</h3>]]></content>
      
      
      <categories>
          
          <category> EC-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux driver</title>
      <link href="/2022/09/16/LD/"/>
      <url>/2022/09/16/LD/</url>
      
        <content type="html"><![CDATA[<p>以及一些 本文记录驱动开发学习上的一些问题 </p>]]></content>
      
      
      <categories>
          
          <category> EC-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C</title>
      <link href="/2022/09/16/c/"/>
      <url>/2022/09/16/c/</url>
      
        <content type="html"><![CDATA[<p>记录c的一些基础知识</p><h2 id="内存5区"><a href="#内存5区" class="headerlink" title="内存5区"></a>内存5区</h2><h3 id="代码区"><a href="#代码区" class="headerlink" title="代码区"></a>代码区</h3><p>存放可执行代码</p><h3 id="全局存储区"><a href="#全局存储区" class="headerlink" title="全局存储区"></a>全局存储区</h3><p>存放所有全局变量和静态变量</p><h3 id="文字常量区"><a href="#文字常量区" class="headerlink" title="文字常量区"></a>文字常量区</h3><p>常量字符串,不可以修改,程序结束后由系统释放。</p><h3 id="堆区"><a href="#堆区" class="headerlink" title="堆区"></a>堆区</h3><p>一般由程序员分配释放，若不手动释放，程序结束时可能由操作系统回收。</p><h3 id="栈区"><a href="#栈区" class="headerlink" title="栈区"></a>栈区</h3><p>局部变量、函数形参，栈区变量的地址不可通过函数返回     </p><h2 id="段错误"><a href="#段错误" class="headerlink" title="段错误"></a>段错误</h2><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p>段错误是指访问的内存超出了系统给这个程序所设定的内存空间，例如访问了不存在的内存地址、访问了系统保护的内存地址、访问了只读的内存地址等等情况。</p><ol><li>访问不存在的内存地址</li><li>访问系统保护的内存地址</li><li>访问了只读的内存地址</li><li>栈溢出</li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串定义的三种方式"><a href="#字符串定义的三种方式" class="headerlink" title="字符串定义的三种方式"></a>字符串定义的三种方式</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> names1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//1 </span><span class="token keyword">char</span> names2<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//2         </span><span class="token keyword">char</span> <span class="token operator">*</span> names3 <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第一第二种 names1 names2将文字常量区的字符串拷贝到栈区<br>修改的方法 names1[i] = ‘x’;<br>         *(names1 + i) = ‘x’;<br>使用man函数 查看strncpy源码</p><pre class="line-numbers language-C"><code class="language-C">char *strncpy(char *dest, const char *src, size_t n){    size_t i;    for (i = 0; i < n && src[i] != '\0'; i++)        dest[i] = src[i];    for ( ; i < n; i++)        dest[i] = '\0';    return dest;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用的方法是 上面 names1[i] = ‘x’;</p><p>第三种 names3 一个栈区的指针 指向常量区的常量 可以再次赋值字符串常量</p><p>第三种赋值的方法 是否可以使用str函数呢 答案是不可以的<br><img src="/medias/C/charptr.jpg"></p><p>因为指向的内存是不能修改的文字常量区<br>修改的方法<br>names3 = “yyyyy”; （指向新的常量区）</p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>void：声明函数无返回值或无参数，声明无类型指针，显式丢弃运算结果<br>char：字符型类型数据，属于整型数据的一种<br>int：整型数据，通常为编译器指定的机器字长<br>float：单精度浮点型数据，属于浮点数据的一种<br>double：双精度浮点型数据，属于浮点数据的一种</p><h3 id="类型修饰符"><a href="#类型修饰符" class="headerlink" title="类型修饰符"></a>类型修饰符</h3><p>short：修饰int，短整型数据，可省略被修饰的int。<br>long：修饰int，长整形数据，可省略被修饰的int。<br>signed：修饰整型数据，有符号数据类型<br>unsigned：修饰整型数据，无符号数据类型</p><h3 id="复杂类型关键字"><a href="#复杂类型关键字" class="headerlink" title="复杂类型关键字"></a>复杂类型关键字</h3><p>struct：结构体声明<br>union：共用体声明<br>enum：枚举声明<br>typedef：声明类型别名<br>sizeof：得到特定类型或特定类型变量的大小</p><h3 id="存储级别关键字"><a href="#存储级别关键字" class="headerlink" title="存储级别关键字"></a>存储级别关键字</h3><p>auto：指定为自动变量，由编译器自动分配及释放。通常在栈上分配  默认不屑就是<br>static：指定为静态变量，分配在静态变量区，修饰函数时，指定函数作用域为文件内部<br>register：指定为寄存器变量，建议编译器将变量存储到寄存器中使用，也可以修饰函数形参，建议编译器通过寄存器而不是堆栈传递参数<br>extern：指定对应变量为外部变量，即在另外的目标文件中定义，可以认为是约定由另外文件声明的对象的一个“引用“<br>const：与volatile合称“cv特性”，指定变量不可被当前线程/进程改变（但有可能被系统或其他线程/进程改变）<br>volatile：与const合称“cv特性”，指定变量的值有可能会被系统或其他进程/线程改变，强制编译器每次从内存中取得该变量的值</p><h3 id="流程控制关键字"><a href="#流程控制关键字" class="headerlink" title="流程控制关键字"></a>流程控制关键字</h3><p>return：用在函数体中，返回特定值（或者是void值，即不返回值）<br>continue：结束当前循环，开始下一轮循环<br>break：跳出当前循环或switch结构<br>goto：无条件跳转语句</p><p>if：条件语句<br>else：条件语句否定分支（与if连用）<br>switch：开关语句（多重分支语句）<br>case：开关语句中的分支标记<br>default：开关语句中的“其他”分治，可选。</p><p>for：for循环结构，for(1;2;3)4;的执行顺序为1-&gt;2-&gt;4-&gt;3-&gt;2…循环，其中2为循环条件<br>do：do循环结构，do 1 while(2);的执行顺序是1-&gt;2-&gt;1…循环，2为循环条件<br>while：while循环结构，while(1) 2;的执行顺序是1-&gt;2-&gt;1…循环，1为循环条件</p><h3 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h3><p>存储类型 特征修饰 数据类型 变量名<br>列如： static volatile int value；</p><h2 id="二级指针-链表"><a href="#二级指针-链表" class="headerlink" title="二级指针 链表"></a>二级指针 链表</h2><h3 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h3><p>舍友在看翁恺的c语言教程 最后几p链表出现了二级指针<br>大概就是原理就是 通过一个函数修改变量的值<br>需要获取其地址 也就是指针<br>那修改通过函数修改指针的值 就需要获得指针的地址<br>也就是二级指针</p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><pre class="line-numbers language-C"><code class="language-C">#include <stdio.h>#include <stdlib.h>#if 1typedef struct List{    int data;    struct List *next;}list, *list_p;//头插void List_add(list** head, int data){    list_p new = (list_p)malloc(sizeof(list)); //堆区    new->data = data;    new->next = *head;    *head = new;}int main(){    list_p head = NULL;  //栈区    int temp = 3;    List_add(&head, temp);    List_add(&head, temp);    printf("%d\n", head->data);    printf("%d\n", head->next->data);    printf("%d\n", sizeof(*head));     return 0;}#endif #if 0//传进来的是地址的值 没有改变void change(int *p, int *q){    p = q;}//传进来的是指针的地址 可以改改指针指向的值void change_2(int **p, int *q){    *p = q;}int main(int argc, char *argv[]){       int a = 1;    int b = 2;    int *p = &a;    int *q = &b;    //a b 地址打印    printf("a = %p b = %p\n", &a, &b);    //p q 地址打印    printf("p = %p q = %p\n", p, q);        change(p, q);    printf("p = %p q = %p\n", p, q);    change_2(&p, q);    printf("p = %p q = %p\n", p, q);    p = q;    printf("p = %p q = %p\n", p, q);        return 0;}#endif <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CS-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法</title>
      <link href="/2022/06/29/DSA/"/>
      <url>/2022/06/29/DSA/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h2><p>用python实现 原因:快速入门<br>在CPP中 甚至已经封装好了 晚点在C/CPP实现</p><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><h4 id="计算机思维三大关-递归、分治、平衡"><a href="#计算机思维三大关-递归、分治、平衡" class="headerlink" title="计算机思维三大关 递归、分治、平衡"></a>计算机思维三大关 递归、分治、平衡</h4><p>eee 《浪潮之巅》作者吴军博士说<br>一个人过不了递归这关 计算机这碗饭基本吃不了 这是计算机思维的第一个<br>我的高度来看 他还是有点东西的 虽然貌似他的风评不是很好</p><h5 id="汉罗塔问题"><a href="#汉罗塔问题" class="headerlink" title="汉罗塔问题"></a>汉罗塔问题</h5><pre class="line-numbers language-python3"><code class="language-python3">def hanoi(n, a, b, c):    if n > 0:        hanoi(n-1, a, c, b)        print("moving from %s to %s" % (a, c))        hanoi(n-1, b, a, c)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>算法的五大特性<br>输入: 算法具有0个或多个输入<br>输出: 算法至少有1个或多个输出<br>有穷性: 算法在有限的步骤之后会自动结束而不会无限循环，并且每一个步骤可以在可接受的时间内完成<br>确定性：算法中的每一步都有确定的含义，不会出现二义性<br>可行性：算法的每一步都是可行的，也就是说每一步都能够执行有限的次数完成</p><p>时间比空间重要 可以使用空间换时间</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>时间维度：是指执行当前算法所消耗的时间，我们通常用「时间复杂度」来描述。<br>时间复杂度指的是执行一个算法所需要的时间。 这不一定是一个确切的时间，通常，我们需要知道的是一个算法在最坏情况下执行（比如输入规模无限大）所需要的时间，也就是寻找算法执行时间的一个渐进上界来作为算法的时间复杂度，通过比较多个算法的这个上界，可以知道哪个算法执行比较快，哪个比较慢。</p><table><thead><tr><th>阶</th><th>时间复杂度</th></tr></thead><tbody><tr><td>常数阶</td><td>O(1)</td></tr><tr><td>对数阶</td><td>O(logN))</td></tr><tr><td>线性阶</td><td>O(n)</td></tr><tr><td>线性对数阶</td><td>O(nlogN)</td></tr><tr><td>平方阶</td><td>O(n²)</td></tr><tr><td>立方阶</td><td>O(n³)</td></tr><tr><td>立方阶</td><td>O(n^k)</td></tr><tr><td>指数</td><td>(2^n)</td></tr></tbody></table><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>空间维度：是指执行当前算法需要占用多少内存空间，我们通常用「空间复杂度」来描述。</p><p>空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度，记做S(n)=O. (f(n))。 比如直接插入排序的时间复杂度是O(n^2),空间复杂度是O(1) 。 而一般的递归算法就要有O(n)的空间复杂度了，因为每次递归都要存储返回信息。</p><h3 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h3><p>查找 (python 列表为例)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="利用循环-初始化列表"><a href="#利用循环-初始化列表" class="headerlink" title="利用循环 初始化列表"></a>利用循环 初始化列表</h1><h4 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">## 顾名思义  遍历</span><span class="token keyword">def</span> <span class="token function">liner_serch</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">:</span>            <span class="token keyword">return</span> i    <span class="token keyword">return</span> None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">## 二分查找的速度是暴力查找的指数倍</span><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    low <span class="token operator">=</span> <span class="token number">0</span>     hight <span class="token operator">=</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>     <span class="token keyword">while</span> low <span class="token operator">&lt;=</span> hight<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> hight<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> list<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">:</span>            <span class="token keyword">return</span> mid         <span class="token keyword">elif</span> list<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">:</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>         <span class="token keyword">else</span><span class="token punctuation">:</span>            hight <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">return</span> None <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>排序</p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">##  冒泡排序 每一轮遍历 把最大的放到最后得后</span><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span>  list<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 遍历 把最小的放到最前</span><span class="token keyword">def</span> <span class="token function">selection_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        min_index <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">:</span>                min_index <span class="token operator">=</span> j        list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 第一次遍历顺序  第二次遍历最小值弄到前面 二次遍历的索引需要跟前情况而定range(i, 0, -1)</span><span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        min_index <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">:</span>                min_index <span class="token operator">=</span> j        list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 递归思想 分治思想</span><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> list    pivot <span class="token operator">=</span> list<span class="token punctuation">[</span>len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 存比基准值小的数字   就是赋值一个列表</span>    left <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> list <span class="token keyword">if</span> x <span class="token operator">&lt;</span> pivot<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 存放基准值的列表</span>    middle <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> list <span class="token keyword">if</span> x <span class="token operator">==</span> pivot<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 存比基准值大的数字</span>    right <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> list <span class="token keyword">if</span> x <span class="token operator">></span> pivot<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 对除了存基准值的列表进行递归（为什么要用一个单独的列表去存基准值? 因为列表之间可以用+去拼接）</span>    <span class="token keyword">return</span> quick_sort<span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> middle <span class="token operator">+</span> quick_sort<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="堆排"><a href="#堆排" class="headerlink" title="堆排"></a>堆排</h4><ol><li>将待排序的数组初始化为大顶堆，该过程为建堆。</li><li>将堆顶元素与最后一个元素交换，除去最后一个元素外可以建立一个新的大顶堆。</li><li>由于第二部堆顶元素跟最后一个元素交换后，新建立的堆不是大顶堆，需要重新建立大顶堆。</li><li>重复上面流程，直到仅剩一个元素。</li></ol><p>比较难的一个排序 目前没能力空手敲 </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># 数组长度</span>    first <span class="token operator">=</span> int<span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 最后一个非叶子节点</span>    <span class="token keyword">for</span> start <span class="token keyword">in</span> range<span class="token punctuation">(</span>first<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 从最后一个非叶子节点开始调整</span>        max_heapify<span class="token punctuation">(</span>list<span class="token punctuation">,</span> start<span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 调整为大顶堆</span>    <span class="token keyword">for</span> end <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 从最后一个元素开始对序列进行调整</span>        list<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 交换</span>        max_heapify<span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> end<span class="token number">-1</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 调整为大顶堆</span>    <span class="token keyword">return</span> list <span class="token keyword">def</span> <span class="token function">max_heapify</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 堆调整</span>    root <span class="token operator">=</span> start   <span class="token comment" spellcheck="true"># 当前（子）树的根</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 循环调整</span>        child <span class="token operator">=</span> root <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 左子节点</span>        <span class="token keyword">if</span> child <span class="token operator">></span> end<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果左子节点超出范围，直接跳出</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> child <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> end <span class="token operator">and</span> list<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&lt;</span> list<span class="token punctuation">[</span>child<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果右子节点存在且大于左子节点</span>            child <span class="token operator">+=</span> <span class="token number">1</span>     <span class="token comment" spellcheck="true"># </span>        <span class="token keyword">if</span> list<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">&lt;</span> list<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果子节点大于根节点</span>            list<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>root<span class="token punctuation">]</span>            root <span class="token operator">=</span> child        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><h3 id="常用数据结构"><a href="#常用数据结构" class="headerlink" title="常用数据结构"></a>常用数据结构</h3><h4 id="栈、队列、双端队列"><a href="#栈、队列、双端队列" class="headerlink" title="栈、队列、双端队列"></a>栈、队列、双端队列</h4><h5 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h5><h5 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h5><h5 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h5><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>链表是一种在存储单元上非连续、非顺序的存储结构。数据元素的逻辑顺序是通过链表中的指针链接次序实现。链表是由一系列的结点组成，结点可以在运行时动态生成。每个结点包含两部分：数据域与指针域。数据域存储数据元素，指针域存储下一结点的指针。</p><h5 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h5><p>单向链表也叫单链表，是链表中最简单的形式，它的每个节点包含两个域，一个信息域（元素域）和一个链接域。这个链接指向链表中的下一个节点，而最后一个节点的链接域则指向一个空值。</p><p>单向链表的操作方法：<br>is_empty() 链表是否为空<br>length() 链表长度<br>items() 获取链表数据迭代器<br>add(item) 链表头部添加元素<br>append(item) 链表尾部添加元素<br>insert(pos, item) 指定位置添加元素<br>remove(item) 删除节点<br>find(item) 查找节点是否存在</p><p>节点定义：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data        <span class="token comment" spellcheck="true">#数据域</span>        self<span class="token punctuation">.</span>next <span class="token operator">=</span> None        <span class="token comment" spellcheck="true">#指针域</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>代码如下:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SingleLinkList</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_head <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_head <span class="token keyword">is</span> None    <span class="token keyword">def</span> <span class="token function">length</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            count <span class="token operator">+=</span> <span class="token number">1</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next        <span class="token keyword">return</span> count    <span class="token keyword">def</span> <span class="token function">items</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取head指针</span>        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head        <span class="token comment" spellcheck="true"># 循环遍历</span>        <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 返回生成器</span>            <span class="token keyword">yield</span> cur<span class="token punctuation">.</span>item            <span class="token comment" spellcheck="true"># 指针下移</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""向链表头部添加元素"""</span>        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 新结点指针指向原头部结点</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>_head        <span class="token comment" spellcheck="true"># 头部结点指针修改为新结点</span>        self<span class="token punctuation">.</span>_head <span class="token operator">=</span> node    <span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""尾部添加元素"""</span>        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 先判断是否为空链表</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 空链表，_head 指向新结点</span>            self<span class="token punctuation">.</span>_head <span class="token operator">=</span> node        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 不是空链表，则找到尾部，将尾部next结点指向新结点</span>            cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head            <span class="token keyword">while</span> cur<span class="token punctuation">.</span>next <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> node    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""指定位置插入元素"""</span>        <span class="token comment" spellcheck="true"># 指定位置在第一个元素之前，在头部插入</span>        <span class="token keyword">if</span> index <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 指定位置超过尾部，在尾部插入</span>        <span class="token keyword">elif</span> index <span class="token operator">></span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>length<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 创建元素结点</span>            node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>            cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head            <span class="token comment" spellcheck="true"># 循环到需要插入的位置</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            node<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> node    <span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""删除节点"""</span>        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head        pre <span class="token operator">=</span> None        <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 找到指定元素</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>item <span class="token operator">==</span> item<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 如果第一个就是删除的节点</span>                <span class="token keyword">if</span> <span class="token operator">not</span> pre<span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 将头指针指向头节点的后一个节点</span>                    self<span class="token punctuation">.</span>_head <span class="token operator">=</span> cur<span class="token punctuation">.</span>next                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 将删除位置前一个节点的next指向删除位置的后一个节点</span>                    pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 继续按链表后移节点</span>                pre <span class="token operator">=</span> cur                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""查找元素是否存在"""</span>        <span class="token keyword">return</span> item <span class="token keyword">in</span> self<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>循环链表、双向链表不表</p><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><h4 id="树"><a href="#树" class="headerlink" title="树"></a>树</h4><h5 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h5><p>节点定义：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BiTreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> lchild <span class="token operator">=</span> None<span class="token punctuation">,</span> rchild <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data        self<span class="token punctuation">.</span>lchild <span class="token operator">=</span> None        self<span class="token punctuation">.</span>rchild <span class="token operator">=</span> None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二叉树的遍历：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">## 前序遍历</span><span class="token keyword">def</span> <span class="token function">pre_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> root<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出根节点</span>        pre_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 输出根节点的左子树 先根节点 再左子树 再右子树 递归实现</span>        pre_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 同理</span><span class="token comment" spellcheck="true">## 中序遍历</span><span class="token keyword">def</span> <span class="token function">in_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> root<span class="token punctuation">:</span>        in_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>        in_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span><span class="token comment" spellcheck="true">## 后序遍历</span><span class="token keyword">def</span> <span class="token function">post_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> root<span class="token punctuation">:</span>        post_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>        post_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">## 层次遍历(用到了队列)</span><span class="token keyword">def</span> <span class="token function">level_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>    queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    <span class="token keyword">while</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        node <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> node<span class="token punctuation">.</span>lchild<span class="token punctuation">:</span>            queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>        <span class="token keyword">if</span> node<span class="token punctuation">.</span>rchild<span class="token punctuation">:</span>            queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h5><p>定义：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BSTNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data        self<span class="token punctuation">.</span>lchild <span class="token operator">=</span> None        self<span class="token punctuation">.</span>rchild <span class="token operator">=</span> None        self<span class="token punctuation">.</span>parent <span class="token operator">=</span> None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BST</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> li<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>root <span class="token operator">=</span> None        <span class="token keyword">if</span> li<span class="token punctuation">:</span>            <span class="token keyword">for</span> element <span class="token keyword">in</span> li<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>insert_no_rec<span class="token punctuation">(</span>element<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">## 插入 递归</span>    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> node <span class="token operator">==</span> None<span class="token punctuation">:</span>            node <span class="token operator">=</span> BSTNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">elif</span> val <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>data<span class="token punctuation">:</span>            node<span class="token punctuation">.</span>lchild <span class="token operator">=</span> self<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>node<span class="token punctuation">.</span>lchild<span class="token punctuation">,</span> val<span class="token punctuation">)</span>            node<span class="token punctuation">.</span>lchild<span class="token punctuation">.</span>parent <span class="token operator">=</span> node         <span class="token keyword">elif</span> val <span class="token operator">></span> node<span class="token punctuation">.</span>data<span class="token punctuation">:</span>            node<span class="token punctuation">.</span>rchild <span class="token operator">=</span> self<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>node<span class="token punctuation">.</span>rchild<span class="token punctuation">,</span> val<span class="token punctuation">)</span>            node<span class="token punctuation">.</span>lchild<span class="token punctuation">.</span>parent <span class="token operator">=</span> node         <span class="token keyword">return</span> node    <span class="token comment" spellcheck="true">## 插入</span>    <span class="token keyword">def</span> <span class="token function">insert_no_rec</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> self<span class="token punctuation">.</span>root         <span class="token keyword">if</span> <span class="token operator">not</span> p<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>root <span class="token operator">=</span> BSTNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>            <span class="token keyword">return</span>         <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> val <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>data<span class="token punctuation">:</span>                <span class="token keyword">if</span> p<span class="token punctuation">.</span>lchild<span class="token punctuation">:</span>                    p <span class="token operator">=</span> p<span class="token punctuation">.</span>lchild                <span class="token keyword">else</span><span class="token punctuation">:</span>                    p<span class="token punctuation">.</span>lchild <span class="token operator">=</span> BSTNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>                    p<span class="token punctuation">.</span>lchild<span class="token punctuation">.</span>parent <span class="token operator">=</span> p                    <span class="token keyword">return</span>            <span class="token keyword">elif</span> val <span class="token operator">></span> p<span class="token punctuation">.</span>data<span class="token punctuation">:</span>                <span class="token keyword">if</span> p<span class="token punctuation">.</span>rchild<span class="token punctuation">:</span>                    p <span class="token operator">=</span> p<span class="token punctuation">.</span>rchild                <span class="token keyword">else</span><span class="token punctuation">:</span>                    p<span class="token punctuation">.</span>rchild <span class="token operator">=</span> BSTNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>                    p<span class="token punctuation">.</span>rchild<span class="token punctuation">.</span>parent <span class="token operator">=</span> p                    <span class="token keyword">return</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>     <span class="token comment" spellcheck="true">## 中序遍历在二叉搜索树中 结果是按顺序的</span>    <span class="token keyword">def</span> <span class="token function">in_order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> root<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>in_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>in_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">## 查询 递归写法</span>    <span class="token keyword">def</span> <span class="token function">search_rec</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> node<span class="token punctuation">.</span>data <span class="token operator">&lt;</span> val<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>search_rec<span class="token punctuation">(</span>node<span class="token punctuation">.</span>rchild<span class="token punctuation">,</span> val<span class="token punctuation">)</span>        <span class="token keyword">elif</span> node<span class="token punctuation">.</span>data <span class="token operator">></span> val<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>search_rec<span class="token punctuation">(</span>node<span class="token punctuation">.</span>lchild<span class="token punctuation">,</span> val<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="图"><a href="#图" class="headerlink" title="图"></a>图</h4>]]></content>
      
      
      <categories>
          
          <category> CS-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data-structure algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/2022/06/29/SQL/"/>
      <url>/2022/06/29/SQL/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> CS-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人项目</title>
      <link href="/2022/05/06/project/"/>
      <url>/2022/05/06/project/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> Other-Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT</title>
      <link href="/2022/04/27/QT/"/>
      <url>/2022/04/27/QT/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> EC-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>other</title>
      <link href="/2022/04/26/math/"/>
      <url>/2022/04/26/math/</url>
      
        <content type="html"><![CDATA[<h2 id="Linear-Algebra"><a href="#Linear-Algebra" class="headerlink" title="Linear Algebra"></a>Linear Algebra</h2><h2 id="Probability-and-Statistics"><a href="#Probability-and-Statistics" class="headerlink" title="Probability and Statistics"></a>Probability and Statistics</h2><h2 id="discrete-mathematics"><a href="#discrete-mathematics" class="headerlink" title="discrete mathematics"></a>discrete mathematics</h2><h2 id="Circuit-basis"><a href="#Circuit-basis" class="headerlink" title="Circuit basis"></a>Circuit basis</h2><h2 id="analogical-electronics"><a href="#analogical-electronics" class="headerlink" title="analogical electronics"></a>analogical electronics</h2><h2 id="digital-electronic"><a href="#digital-electronic" class="headerlink" title="digital electronic"></a>digital electronic</h2><h2 id="computer-composition"><a href="#computer-composition" class="headerlink" title="computer composition"></a>computer composition</h2><h2 id="computer-network"><a href="#computer-network" class="headerlink" title="computer network"></a>computer network</h2><h2 id="operating-system"><a href="#operating-system" class="headerlink" title="operating system"></a>operating system</h2>]]></content>
      
      
      <categories>
          
          <category> Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++</title>
      <link href="/2022/03/27/cpp/"/>
      <url>/2022/03/27/cpp/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>记录cpp一些知识点</p><h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h3 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> CS-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/2022/03/11/recordlife/"/>
      <url>/2022/03/11/recordlife/</url>
      
        <content type="html"><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><h3 id="随手照片-第一篇-测试-开学记录"><a href="#随手照片-第一篇-测试-开学记录" class="headerlink" title="随手照片(第一篇 测试(开学记录))"></a>随手照片(第一篇 测试(开学记录))</h3><p><img src="/medias/schoollife/view2.jpg" alt="开学"></p><h3 id="04-01-22"><a href="#04-01-22" class="headerlink" title="04/01/22"></a>04/01/22</h3><p>eeeee</p><h3 id="05-01-22"><a href="#05-01-22" class="headerlink" title="05/01/22"></a>05/01/22</h3><p><img src="/medias/schoollife/51.jpg" alt="下雨的五一(邑)"></p><h3 id="05-19-22"><a href="#05-19-22" class="headerlink" title="05/19/22"></a>05/19/22</h3><iframe src="//player.bilibili.com/player.html?aid=384197393&amp;bvid=BV1rZ4y187ZE&amp;cid=723680479&amp;page=1" width="100%" height="400px" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><br><h3 id="06-03-22"><a href="#06-03-22" class="headerlink" title="06/03/22"></a>06/03/22</h3><p><img src="/medias/schoollife/603.jpg" alt="为什么端午奶茶下面是热的"></p><h3 id="22-6-22"><a href="#22-6-22" class="headerlink" title="22/6/22"></a>22/6/22</h3><p><img src="/medias/schoollife/gg.png" alt="寄 把人养成残废 然后收费"></p><h3 id="06-27-22"><a href="#06-27-22" class="headerlink" title="06/27/22"></a>06/27/22</h3><p>快废了 时间管理失败的第23年😄</p><h3 id="07-14-22"><a href="#07-14-22" class="headerlink" title="07/14/22"></a>07/14/22</h3><p>逃避深度 追求广度归根到底还是不对的<br>还是需要一定的深度作为基础</p><h3 id="07-16-22"><a href="#07-16-22" class="headerlink" title="07/16/22"></a>07/16/22</h3><p><img src="/medias/schoollife/%E6%9C%80%E4%BC%9F%E5%A4%A7%E7%9A%84%E4%BD%9C%E5%93%81.png"><br>都很好听~~~~~</p><h3 id="07-17-22"><a href="#07-17-22" class="headerlink" title="07/17/22"></a>07/17/22</h3><p><img src="/medias/schoollife/shima1.jpg"><br><img src="/medias/schoollife/shima2.jpg"></p><h3 id="08-23-22"><a href="#08-23-22" class="headerlink" title="08/23/22"></a>08/23/22</h3><p><img src="/project/lddd.jpg"><br>晚了点上手 可惜了 </p><h3 id="09-04-22-00-01"><a href="#09-04-22-00-01" class="headerlink" title="09/04/22 00:01"></a>09/04/22 00:01</h3><p>春招吧 重开吧 毁灭吧<br>正点原子十天 治好了我的精神内耗</p><h3 id="09-08-22"><a href="#09-08-22" class="headerlink" title="09/08/22"></a>09/08/22</h3><p>新生舍友的第一个hw<br><img src="/medias/schoollife/%E8%88%8D%E5%8F%8B%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Record-Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> record-life </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
