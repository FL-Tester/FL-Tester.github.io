<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CPP Basics</title>
      <link href="/2022/03/27/cpp_basics/"/>
      <url>/2022/03/27/cpp_basics/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文记录 从C入门C++<br>所以类似变量 函数 语句 等不会多赘述</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="函数和结构、string对象、array对象"><a href="#函数和结构、string对象、array对象" class="headerlink" title="函数和结构、string对象、array对象"></a>函数和结构、string对象、array对象</h4><h4 id="递归、指针"><a href="#递归、指针" class="headerlink" title="递归、指针"></a>递归、指针</h4><h4 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h4><h4 id="引用变量"><a href="#引用变量" class="headerlink" title="引用变量"></a>引用变量</h4><p>可以作为参数 返回值 局部变量 无法返回 因为随着函数声明周期的结束 函数内局部变量会被销毁<br>const int&amp; value2 防止形参改变实参<br>函数中利用常量引用防止误操作修改实参<br>引用的好处之一就是在函数调用时在内存中不会生成副本。<br>用引用传递函数的参数，能保证参数传递中不产生副本，提高传递的效率，且通过const的使用，保证了引用传递的安全性。<br>流操作符&lt;&lt;和&gt;&gt;、赋值操作符=的返回值、拷贝构造函数的参数、赋值操作符=的参数</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">firstref</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> value1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> value2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> value5 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">&amp;</span> ref1 <span class="token operator">=</span> value5<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>ref1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注意：不要返回局部变量引用  可以返回静态变量</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="默认参数、函数重载、函数模板"><a href="#默认参数、函数重载、函数模板" class="headerlink" title="默认参数、函数重载、函数模板"></a>默认参数、函数重载、函数模板</h4><h5 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h5><p>提高可复用性<br>同一个作用域下<br>函数名称相同<br>函数参数类型不同 或者 个数不同 或者 顺序不同</p><h3 id="内存模型和名称空间"><a href="#内存模型和名称空间" class="headerlink" title="内存模型和名称空间"></a>内存模型和名称空间</h3><h4 id="单独编译"><a href="#单独编译" class="headerlink" title="单独编译"></a>单独编译</h4><h4 id="存储持续性、作用域、链接性"><a href="#存储持续性、作用域、链接性" class="headerlink" title="存储持续性、作用域、链接性"></a>存储持续性、作用域、链接性</h4><h4 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h4><h3 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h3><p>////class 默认private  struct默认public<br>    //简单类</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"structure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//初始化列表</span>    <span class="token comment" spellcheck="true">//person(string n, int a) :name(name), age(age) {};</span>    <span class="token comment" spellcheck="true">//除了性能问题之外，有些时候合初始化列表是不可或缺的，以下几种情况时必须使用初始化列表</span>    <span class="token comment" spellcheck="true">//1.常量成员，因为常量只能初始化不能赋值，所以必须放在初始化列表里面 const</span>    <span class="token comment" spellcheck="true">//2.引用类型，引用必须在定义的时候初始化，并且不能重新赋值，所以也要写在初始化列表里面</span>    <span class="token comment" spellcheck="true">//3. 没有默认构造函数的类类型，因为使用初始化列表可以不必调用默认构造函数来初始化，而是直接调用拷贝构造函数初始化</span>    <span class="token function">person</span><span class="token punctuation">(</span><span class="token keyword">const</span> person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name <span class="token operator">=</span> p<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age <span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">.</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对于含有指针成员的类，直接拷贝可能会出现两个对象的指针成员指向同一个数据区。这时候一般先new个内存，然后复制内容</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"destruct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setname</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string  <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setage</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span>  <span class="token function">getage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继承&amp;&amp;多态 多态的优点：代码组织结构清晰 可读性强 利于前期和后期的扩展以及维护</span><span class="token keyword">class</span> <span class="token class-name">AbstractCalculator</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> m_Num1<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加法计算器  根据需求自己定义</span><span class="token keyword">class</span> <span class="token class-name">AddCalculator</span> <span class="token operator">:</span><span class="token keyword">public</span> AbstractCalculator<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> m_Num1 <span class="token operator">+</span> m_Num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">////调用</span><span class="token keyword">void</span> <span class="token function">addCalculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建加法计算器</span>    AbstractCalculator<span class="token operator">*</span> abc <span class="token operator">=</span> <span class="token keyword">new</span> AddCalculator<span class="token punctuation">;</span>    abc<span class="token operator">-</span><span class="token operator">></span>m_Num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    abc<span class="token operator">-</span><span class="token operator">></span>m_Num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-</span><span class="token operator">></span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" + "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-</span><span class="token operator">></span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-</span><span class="token operator">></span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">delete</span> abc<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//用完了记得销毁</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">////可以从 AbstractCalculator 知道 类中虚函数毫无作用 可以直接改写为纯虚函数</span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//纯虚函数</span>    <span class="token comment" spellcheck="true">//类中只要有一个纯虚函数就称为抽象类</span>    <span class="token comment" spellcheck="true">//抽象类无法实例化对象</span>    <span class="token comment" spellcheck="true">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token keyword">public</span> Base<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//案列</span><span class="token keyword">class</span> <span class="token class-name">AbstractDrinking</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">MakeDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token operator">:</span> <span class="token keyword">public</span> AbstractDrinking <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"煮农夫山泉!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"冲泡咖啡!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"将咖啡倒入杯中!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"加入牛奶!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//业务函数 传入子类 new zilei</span><span class="token keyword">void</span> <span class="token function">DoWork</span><span class="token punctuation">(</span>AbstractDrinking<span class="token operator">*</span> drink<span class="token punctuation">)</span> <span class="token punctuation">{</span>    drink<span class="token operator">-</span><span class="token operator">></span><span class="token function">MakeDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> drink<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="虚析构和纯虚析构"><a href="#虚析构和纯虚析构" class="headerlink" title="虚析构和纯虚析构"></a>虚析构和纯虚析构</h3><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">//解决父类指针释放后 无法调用到子类的析构代码 堆区资源无法释放(new）</span>    <span class="token comment" spellcheck="true">//父类析构函数声明为 virtual 会先调用子类的析构函数 多态性质</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Animal 构造函数调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//virtual void Speak() = 0;</span>    <span class="token comment" spellcheck="true">//析构函数加上virtual关键字，变成虚析构函数</span>    <span class="token comment" spellcheck="true">//virtual ~Animal()</span>    <span class="token comment" spellcheck="true">//{</span>    <span class="token comment" spellcheck="true">//    cout &lt;&lt; "Animal虚析构函数调用！" &lt;&lt; endl;</span>    <span class="token comment" spellcheck="true">//}</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Animal<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Animal 纯虚析构函数调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token operator">:</span> <span class="token keyword">public</span> Animal <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Cat</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Cat构造函数调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        m_Name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Cat析构函数调用!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_Name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Cat析构函数调用succ!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">delete</span> m_Name<span class="token punctuation">;</span>            m_Name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    string<span class="token operator">*</span> m_Name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Animal<span class="token operator">*</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//animal->Speak();</span>    <span class="token comment" spellcheck="true">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span>    <span class="token comment" spellcheck="true">//怎么解决？给基类增加一个虚析构函数</span>    <span class="token comment" spellcheck="true">//虚析构函数就是用来解决通过父类指针释放子类对象</span>    <span class="token keyword">delete</span> animal<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h4><h4 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h4><h4 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h4><h4 id="类的作用域"><a href="#类的作用域" class="headerlink" title="类的作用域"></a>类的作用域</h4><h4 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h4><h4 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h4><p>类成员函数<br>类外友元函数<br>函数运算符重载 </p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">function</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> input<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> input <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Demo demo;</span><span class="token comment" spellcheck="true">//demo("hello world");</span><span class="token comment" spellcheck="true">//operator() 让对象变得像函数，这个运算符也被称为 operator() 函数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h4><p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术<br>友元的目的就是让一个函数或者类 访问另一个类中私有成员<br>全局函数做友元<br>friend void goodGay(calss * calssone);<br>函数访问类中私有成员<br>类做友元</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">friend2</span> <span class="token punctuation">{</span>    <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">friend1</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">friend2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">friend1</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">friend1</span><span class="token punctuation">(</span>friend2 friendorder<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>friendorder <span class="token operator">=</span> friendorder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span>friendorder<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">log</span><span class="token punctuation">(</span>friendorder<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    friend2 friendorder<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">classforfriend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    friend2 one<span class="token punctuation">;</span>    friend1 <span class="token function">two</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>    two<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//成员函数做友元</span>    <span class="token comment" spellcheck="true">//friend void friend1::visit();</span>    <span class="token comment" spellcheck="true">//类中的某一个成员函数，可以访问私有内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类的自动转换和强制类类型转换"><a href="#类的自动转换和强制类类型转换" class="headerlink" title="类的自动转换和强制类类型转换"></a>类的自动转换和强制类类型转换</h4><h4 id="类和动态内存分配"><a href="#类和动态内存分配" class="headerlink" title="类和动态内存分配"></a>类和动态内存分配</h4><h4 id="构造函数new注意事项"><a href="#构造函数new注意事项" class="headerlink" title="构造函数new注意事项"></a>构造函数new注意事项</h4><h4 id="放回对象的说明"><a href="#放回对象的说明" class="headerlink" title="放回对象的说明"></a>放回对象的说明</h4><h4 id="使用指向对象的指针"><a href="#使用指向对象的指针" class="headerlink" title="使用指向对象的指针"></a>使用指向对象的指针</h4><h4 id="基类"><a href="#基类" class="headerlink" title="基类"></a>基类</h4><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h4 id="多态共有继承"><a href="#多态共有继承" class="headerlink" title="多态共有继承"></a>多态共有继承</h4><h4 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h4><h4 id="继承和动态内存分配"><a href="#继承和动态内存分配" class="headerlink" title="继承和动态内存分配"></a>继承和动态内存分配</h4><h3 id="代码重用"><a href="#代码重用" class="headerlink" title="代码重用"></a>代码重用</h3><h4 id="包含对象成员的类"><a href="#包含对象成员的类" class="headerlink" title="包含对象成员的类"></a>包含对象成员的类</h4><h4 id="私有继承"><a href="#私有继承" class="headerlink" title="私有继承"></a>私有继承</h4><h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><h4 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h4><h3 id="异常、友元、其它"><a href="#异常、友元、其它" class="headerlink" title="异常、友元、其它"></a>异常、友元、其它</h3><h3 id="输入、输出、文件"><a href="#输入、输出、文件" class="headerlink" title="输入、输出、文件"></a>输入、输出、文件</h3><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h3 id="new-在堆区开辟数据"><a href="#new-在堆区开辟数据" class="headerlink" title="new 在堆区开辟数据"></a>new 在堆区开辟数据</h3><pre class="line-numbers language-cpp"><code class="language-cpp">定位<span class="token keyword">new</span><span class="token operator">--</span>类<span class="token operator">/</span>结构体<span class="token keyword">class</span> <span class="token class-name">classnew</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">classnew</span><span class="token punctuation">(</span>string charbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>charbuf <span class="token operator">=</span> charbuf<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">classnew</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"destructor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string <span class="token function">getcharbuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>charbuf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">getnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    string charbuf<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//delete 释放 new分配的内存 </span><span class="token comment" spellcheck="true">//由于创建在堆区 可以有程序员使用delete释放</span><span class="token keyword">int</span> <span class="token function">newfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//temp 赋值为10 int类型</span>    <span class="token keyword">int</span><span class="token operator">*</span> temp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> temp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//c++ 11</span>    <span class="token function">log</span><span class="token punctuation">(</span>temp1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>temp2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> temp1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//delete(temp1);</span>    <span class="token keyword">delete</span> temp2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//数组类型</span>    <span class="token keyword">int</span><span class="token operator">*</span> arrtemp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//int* arrtemp2 = new(10 * sizeof(int));</span>    <span class="token keyword">int</span><span class="token operator">*</span> arrtemp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        arrtemp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span>arrtemp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//数组为 delete[]</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrtemp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span>arrtemp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrtemp1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建类对象</span>    person<span class="token operator">*</span> pTest <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token function">person</span><span class="token punctuation">(</span><span class="token string">"fengle"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>pTest<span class="token operator">-</span><span class="token operator">></span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>pTest<span class="token operator">-</span><span class="token operator">></span><span class="token function">getage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> pTest<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处执行类的析构函数 </span>    <span class="token comment" spellcheck="true">//直接创建类 会在栈区 析构函数不能有程序员执行</span>        <span class="token comment" spellcheck="true">//placement new 定位放置new</span>        <span class="token comment" spellcheck="true">//在指定内存上分配</span>    <span class="token keyword">char</span> buffer1<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    classnew<span class="token operator">*</span> class1 <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>buffer1<span class="token punctuation">)</span> <span class="token function">classnew</span><span class="token punctuation">(</span><span class="token string">"one"</span> <span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>class1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getcharbuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>class1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//但是由于对象的空间不会自动释放 因为是在已经分配好的空间上进行分配</span>    <span class="token comment" spellcheck="true">//此时析构函数 必须显示调用 不用自动调用</span>    class1<span class="token operator">-</span><span class="token operator">></span><span class="token operator">~</span><span class="token function">classnew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//placement new 使用场景举例</span>    <span class="token comment" spellcheck="true">//如果有这样一个场景，我们需要大量的申请一块类似的内存空间，然后又释放掉，</span>    <span class="token comment" spellcheck="true">//比如在在一个server中对于客户端的请求，每个客户端的每一次上行数据我们都需要</span>    <span class="token comment" spellcheck="true">//为此申请一块内存，当我们处理完请求给客户端下行回复时释放掉该内存，</span>    <span class="token comment" spellcheck="true">//表面上看者符合c++的内存管理要求，没有什么错误，但是仔细想想很不合理，</span>    <span class="token comment" spellcheck="true">//为什么我们每个请求都要重新申请一块内存呢，要知道每一次内从的申请，</span>    <span class="token comment" spellcheck="true">//系统都要在内存中找到一块合适大小的连续的内存空间，这个过程是很慢的（相对而言)，</span>    <span class="token comment" spellcheck="true">//极端情况下，如果当前系统中有大量的内存碎片，并且我们申请的空间很大，甚至有可能失败。</span>    <span class="token comment" spellcheck="true">//为什么我们不能共用一块我们事先准备好的内存呢？</span>    <span class="token comment" spellcheck="true">//可以的，我们可以使用placement new来构造对象，那么就会在我们指定的内存空间中构造对象。</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h2 id="杂项及其用法：c-11-20-新标准"><a href="#杂项及其用法：c-11-20-新标准" class="headerlink" title="杂项及其用法：c++11-20 新标准"></a>杂项及其用法：c++11-20 新标准</h2><h3 id="语言可用性的强化"><a href="#语言可用性的强化" class="headerlink" title="语言可用性的强化"></a>语言可用性的强化</h3><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><h4 id="变量及其初始化"><a href="#变量及其初始化" class="headerlink" title="变量及其初始化"></a>变量及其初始化</h4><h4 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h4><h4 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h4><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><h3 id="语言运行期的强化"><a href="#语言运行期的强化" class="headerlink" title="语言运行期的强化"></a>语言运行期的强化</h3><h4 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h4><h4 id="函数对象包装器"><a href="#函数对象包装器" class="headerlink" title="函数对象包装器"></a>函数对象包装器</h4><h4 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h4><h3 id="右值引用-1"><a href="#右值引用-1" class="headerlink" title="右值引用"></a>右值引用</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//提高资源资源利用效率</span><span class="token comment" spellcheck="true">//移动构造 &amp;&amp; srd:move</span><span class="token keyword">class</span> <span class="token class-name">Buffer</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buf <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">;</span>            buf <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span><span class="token operator">*</span> buf <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Buffer <span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Buffer buf<span class="token punctuation">;</span>    <span class="token keyword">return</span> buf<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setBuffer</span><span class="token punctuation">(</span><span class="token keyword">const</span> Buffer<span class="token operator">&amp;</span> buf<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"const Buffer&amp; buf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">void</span> <span class="token function">setBuffer</span><span class="token punctuation">(</span>Buffer<span class="token operator">&amp;&amp;</span> buf<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Buffer&amp;&amp; buf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">buftest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这样调用会有两次内存开销 两次对象 一次为buf  一次为 getbuffer中  此处get为右值 </span>    <span class="token comment" spellcheck="true">//如果没有const &amp; 编译器报错 因为getBuffer已经销毁</span>    <span class="token comment" spellcheck="true">//让一个常引用指向一个将亡值 将亡值声明周期将和常引用一样</span>    Buffer buf <span class="token operator">=</span> <span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setBuffer</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用普通常引用</span>    <span class="token function">setBuffer</span><span class="token punctuation">(</span><span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用右值引用</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="智能指针与内存管理"><a href="#智能指针与内存管理" class="headerlink" title="智能指针与内存管理"></a>智能指针与内存管理</h3><p>(头文件 <memory>)</p><h4 id="Rall-amp-amp-引用计数"><a href="#Rall-amp-amp-引用计数" class="headerlink" title="Rall &amp;&amp; 引用计数"></a>Rall &amp;&amp; 引用计数</h4><p>引用计数是为了防止内存泄露 每当增加一次对同一个对象的引用 引用计数就会增加一次 每删除一次 引用计数就会减1 当引用计数为零时就会自动三处指向堆的内存。</p><h4 id="std-shared-ptr"><a href="#std-shared-ptr" class="headerlink" title="std::shared_ptr"></a>std::shared_ptr</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//简单的使用方法</span><span class="token keyword">void</span> <span class="token function">shared_ptr_foo</span><span class="token punctuation">(</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">shared_ptr_realize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> pointer <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">shared_ptr_foo</span><span class="token punctuation">(</span>pointer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">*</span>pointer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">shared_ptr_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> pointer1 <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> pointer2 <span class="token operator">=</span> pointer1<span class="token punctuation">;</span>    <span class="token keyword">auto</span> pointer3 <span class="token operator">=</span> pointer1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获得原始指针</span>    <span class="token keyword">auto</span><span class="token operator">*</span> p <span class="token operator">=</span> pointer1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//显示引用次数</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer1<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer2<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer3<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//reset() 减少一个引用计数</span>    pointer2<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer1<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer2<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer3<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>    pointer3<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer1<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer2<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer3<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="std-unique-ptr"><a href="#std-unique-ptr" class="headerlink" title="std::unique_ptr"></a>std::unique_ptr</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 貌似是老的方法 不深入研究</span><span class="token comment" spellcheck="true">//是一种独占的智能指针，它禁止其他智能指针与其共享同一个对象，从而保证代码的安全</span><span class="token keyword">int</span> <span class="token function">unique_ptr_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> pointers <span class="token operator">=</span> make_unique<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//auto pointers1 = pointers; 无法复制 因为unique独占 </span>    <span class="token comment" spellcheck="true">//可以用 std::move 转移</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="std-weak-ptr"><a href="#std-weak-ptr" class="headerlink" title="std::weak_ptr"></a>std::weak_ptr</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">weak_ptr_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> A<span class="token punctuation">;</span>    <span class="token keyword">struct</span> B<span class="token punctuation">;</span>    <span class="token keyword">struct</span> A <span class="token punctuation">{</span>        shared_ptr<span class="token operator">&lt;</span>B<span class="token operator">></span> pointer<span class="token punctuation">;</span>        <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A 被销毁"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> B <span class="token punctuation">{</span>        shared_ptr<span class="token operator">&lt;</span>A<span class="token operator">></span> pointer<span class="token punctuation">;</span>        <span class="token operator">~</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B 被销毁"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> a <span class="token operator">=</span> std<span class="token operator">::</span>make_shared<span class="token operator">&lt;</span>A<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//引用计数一次</span>    <span class="token keyword">auto</span> b <span class="token operator">=</span> std<span class="token operator">::</span>make_shared<span class="token operator">&lt;</span>B<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//引用计数一次</span>    a<span class="token operator">-</span><span class="token operator">></span>pointer <span class="token operator">=</span> b<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//引用计数两次</span>    b<span class="token operator">-</span><span class="token operator">></span>pointer <span class="token operator">=</span> a<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//引用计数两次</span>    <span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>    <span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>    <span class="token comment" spellcheck="true">//退出作用域时 引用减少一次 则为1 无法释放内存</span>    <span class="token comment" spellcheck="true">//此时使用弱引用指针 weak_ptr 因为弱引用不会增加引用次数 问题得以解决</span>    <span class="token comment" spellcheck="true">//解决方法  二次使用弱引用 weak_ptr </span>    <span class="token keyword">struct</span> C<span class="token punctuation">;</span>    <span class="token keyword">struct</span> D<span class="token punctuation">;</span>    <span class="token keyword">struct</span> C <span class="token punctuation">{</span>        weak_ptr<span class="token operator">&lt;</span>D<span class="token operator">></span> pointer<span class="token punctuation">;</span>        <span class="token operator">~</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A 被销毁"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> D <span class="token punctuation">{</span>        weak_ptr<span class="token operator">&lt;</span>C<span class="token operator">></span> pointer<span class="token punctuation">;</span>        <span class="token operator">~</span><span class="token function">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B 被销毁"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> c <span class="token operator">=</span> std<span class="token operator">::</span>make_shared<span class="token operator">&lt;</span>C<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">auto</span> d <span class="token operator">=</span> std<span class="token operator">::</span>make_shared<span class="token operator">&lt;</span>D<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      c<span class="token operator">-</span><span class="token operator">></span>pointer <span class="token operator">=</span> d<span class="token punctuation">;</span>                      d<span class="token operator">-</span><span class="token operator">></span>pointer <span class="token operator">=</span> c<span class="token punctuation">;</span>                         <span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>    <span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>    <span class="token comment" spellcheck="true">//当作用域结束后 引用则为0 析构函数执行</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="正则表达式简介"><a href="#正则表达式简介" class="headerlink" title="正则表达式简介"></a>正则表达式简介</h4><h4 id="std-regex-及其相关"><a href="#std-regex-及其相关" class="headerlink" title="std::regex 及其相关"></a>std::regex 及其相关</h4><h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>并发 两个以上的任何 同时发生<br>并发的假象 需要时间开销 任务切换<br>多个核心cpu  硬件并发<br>任务数少于核心数 可以做到真正的任务并发<br>使用并发的原因 同时执行多个任务 提高性能</p><h3 id="可执行程序"><a href="#可执行程序" class="headerlink" title="可执行程序"></a>可执行程序</h3><p>磁盘上的一个文件 windows下 一个扩展名为exe<br>windows下 双击 lunux./</p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>就是一个可执行程序 运行起来 就创建了一个进程</p><p>进程就是运行起来的可执行程序</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>进程存在了 主线程就出现了<br>main thread<br>main函数中的代码 有主线程执行<br>主线程和线程 唇齿相依</p><p>除了主线程之外 我们可以通过自己创建其它线程 其它现场走的是别的通道 甚至去不同搞的地方</p><p>没创建一个新的线程 我们就可以在同一时刻 多干一个不同的事情 </p><p>多线程 并发<br>线程并不是越多越好 每个线程 都需要一个独立的堆栈空间(1M) 现场之间的切换 要保存很多中间状态；<br>切换会耗费本该属于程序的运行的时间</p><p>可以同时处理不同的事情</p><p>总结<br>用来执行代码<br>一个新线程 代表一条新的通路<br>一个进程包含一个主线程 主线程随着进程的启动 并运行 我们可以创建多个其它现场(非主线程)<br>但是创建的数量一般不超过200-300个(个数根据实际情况)<br>因为主线程是自动启动的 所以一个进程中最少也是有一个线程(主线程)<br>多线程程序可以同时干多个事 运行效率高<br>提高效率 需要调整和优化 资源 线程等问题</p><h3 id="学习心得"><a href="#学习心得" class="headerlink" title="学习心得"></a>学习心得</h3><p>开发多线程程序 实力的体现 一个商用的必须要求<br>线程开发有一定难度 实现代码更复杂 理解上更难一些 需要一定的学习时间<br>c++线程会涉及很多新概念 对于c++道路上的成长特别关键 不要急于求成<br>方向 网络通信 网络服务器 qt等方向 都需要多线程 绝对绕不开</p><h3 id="实现并发的手段"><a href="#实现并发的手段" class="headerlink" title="实现并发的手段"></a>实现并发的手段</h3><p>通过多个进程 实现并发<br>单个进程中 创建多个线程 实现并发</p><h4 id="多进程并发"><a href="#多进程并发" class="headerlink" title="多进程并发"></a>多进程并发</h4><p>系统举例 启动多个软件<br>服务器进程之间的通信 账号服务器 游戏服务器 之间的通信<br>进程之间的通信<br>管道<br>文件<br>消息队列<br>共享内存<br>等等等等<br>如果不同电脑之间 可以使用socker通信 等等<br>等等</p><h4 id="多线程并发"><a href="#多线程并发" class="headerlink" title="多线程并发"></a>多线程并发</h4><p>线程 (像是轻量级的进程)<br>共享内存 因为在同一个进程内<br>全局变量<br>指针<br>引用<br>等<br>多线程开销远远小于多进程<br>共享内存的新问题<br>数据一致性的问题<br>多个现场对一个变量同时操作 需要先后顺序等<br>互斥问题<br>多线程和多进程可以混合使用 但是有限考虑多线程技术开发 而不是多进程</p><h3 id="c-11-新标准-线程库"><a href="#c-11-新标准-线程库" class="headerlink" title="c++11 新标准 线程库"></a>c++11 新标准 线程库</h3><p>需要主要查看官方文档 API<br>以前官方多线程代码不可以跨平台<br>可以导入库 保持代码一致性 可以跨平台 但还是需要配置 比较麻烦</p><p>从c++11新标准开始<br>本身增加对多线程的支持 意味着可移植性 跨平台 windows linux</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>多线程的优点(对比进程)<br>启动速度更快 更轻量级<br>系统资源开销更少 执行速度更快 比如共享内存这种通信方式 比其他通信方式更快<br>缺点<br>使用有一定难度<br>需要处理数据的一致性问题</p><h3 id="thread-code-realize"><a href="#thread-code-realize" class="headerlink" title="thread code realize"></a>thread code realize</h3><h1 id="等等等-持续更新"><a href="#等等等-持续更新" class="headerlink" title="等等等 持续更新"></a>等等等 持续更新</h1>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开学记录</title>
      <link href="/2022/03/11/record20210311/"/>
      <url>/2022/03/11/record20210311/</url>
      
        <content type="html"><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><h3 id="随手照片"><a href="#随手照片" class="headerlink" title="随手照片"></a>随手照片</h3><p><img src="/medias/schoollife/che.jpg" alt="开冲!"><br><img src="/medias/schoollife/view3.jpg" alt="哇！鱼鳞云"><br><img src="/medias/schoollife/view1.jpg" alt="这是秋天!AHH"><br><img src="/medias/schoollife/view2.jpg"><br><img src="/medias/schoollife/run.jpg" alt="就两圈，死翘翘！"><br><img src="/medias/schoollife/eat.jpg" alt="开吃开吃"><br><img src="/medias/schoollife/work.jpg" alt="开始玩游戏了！"></p>]]></content>
      
      
      <categories>
          
          <category> recordlife </category>
          
      </categories>
      
      
        <tags>
            
            <tag> record-life </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
