<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Other Project</title>
      <link href="/2022/05/06/project/"/>
      <url>/2022/05/06/project/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Other-Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EC</title>
      <link href="/2022/04/27/ec/"/>
      <url>/2022/04/27/ec/</url>
      
        <content type="html"><![CDATA[<h2 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h2><h3 id="安装注意事项"><a href="#安装注意事项" class="headerlink" title="安装注意事项"></a>安装注意事项</h3><h4 id="QT-VS2019安装-MSVC2017-X64"><a href="#QT-VS2019安装-MSVC2017-X64" class="headerlink" title="QT+VS2019安装 (MSVC2017 X64)"></a>QT+VS2019安装 (MSVC2017 X64)</h4><p>安装好qt后 5.9为例 必须点击MSVC2017组件<br>打开vs2019 安装扩展 QT Visual Studio Tools<br>安装完成后配置 add qt versions 到 qt文件下下的MSVC2017<br>配置完成<br><img src="/medias/qt/qtpath.png" alt="配置图"></p><h4 id="release-amp-debug"><a href="#release-amp-debug" class="headerlink" title="release &amp; debug"></a>release &amp; debug</h4><p>调试版本通常更慢、更大，并且占用更多内存。它们具有调试符号，使调试成为可能且更简单。发布版本被剥离了所有非生产信息。</p><h4 id="需要注意"><a href="#需要注意" class="headerlink" title="需要注意"></a>需要注意</h4><p>调试构建需要更多时间，因此有时您可能会选择在发布模式下进行开发，如果您偶然发现问题，您可以并且应该始终进行调试构建，这将允许您将代码作为您的程序执行。在调试模式下，您可以在程序的任何位置添加断点，此时执行将停止，您可以继续逐行执行、步入和退出函数、不同的源代码等，同时观察内存中的变量和许多其他工具可帮助您查明代码中的错误。<br>通常，如果一个应用程序在调试中工作但在发布中没有工作，那是因为某些变量或内存没有正确设置为初始值。<br>在调试版本中，变量和内存通常设置为零，但在发布时跳过此步骤以节省时间。额外的数据也被添加到对象周围并分配内存作为检测内存覆盖的屏障。<br>所以千万要记住初始化变量<br>有时（很少）发布构建中的优化会引入错误<br>最大的问题就是 debug运行正常的程序 切换为release时 编译错误 或者 运行时发生错误 那就gg了</p><h4 id="添加需要的模块"><a href="#添加需要的模块" class="headerlink" title="添加需要的模块"></a>添加需要的模块</h4><p>在qtcreator开发时 添加模块需要到pro文件中+=(模块名字) vs中则不需要 直接添加即可<br><img src="/medias/qt/qtmodel.png" alt="添加需要项目"></p><h4 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//头文件处添加</span><span class="token macro property">#<span class="token directive keyword">pragma</span> execution_character_set("utf-8")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="打开控制台-方便调试"><a href="#打开控制台-方便调试" class="headerlink" title="打开控制台 方便调试"></a>打开控制台 方便调试</h4><p><img src="/medias/qt/qtconsole.png"></p><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>将VS2019 工程文件relese下的exe 拷贝到任意文件夹<br>QT控制台(msvc 2017 64-bit) cd 到文件夹下<br>执行 windeployqt xxxxx.exe<br>在文件夹下可以找到exe 打包完成</p><h3 id="基础快速飞过"><a href="#基础快速飞过" class="headerlink" title="基础快速飞过"></a>基础快速飞过</h3><h4 id="快速介绍"><a href="#快速介绍" class="headerlink" title="快速介绍"></a>快速介绍</h4><p>Qt 是一个跨平台的 C++ 应用程序开发框架。它提供给开发者建立图形用户界面所需的功能，广泛用于开发 GUI 程序，也可用于开发非 GUI 程序。使用 Qt，在一定程度上你获得的是一个 “一站式” 的解决方案：不再需要研究 STL，不再需要 C++ 的 <string>，不再需要到处去找解析 XML、连接数据库、访问网络的各种第三方库，因为 Qt 自己内置了这些技术。<br>优点：<br>    跨平台 容易扩展<br>    面向对象 好的封装机制 模块化强<br>    丰富的API<br>    提供很多模板 stl<br>    支持2/3D渲染 支持opengl<br>    xml支持 大量开发文档</string></p><h5 id="创建一个按钮的新窗口-amp-amp-对象树概念-amp-amp-信号和槽—连接函数-QT最重要的函数"><a href="#创建一个按钮的新窗口-amp-amp-对象树概念-amp-amp-信号和槽—连接函数-QT最重要的函数" class="headerlink" title="创建一个按钮的新窗口 &amp;&amp; 对象树概念 &amp;&amp; 信号和槽—连接函数(QT最重要的函数)"></a>创建一个按钮的新窗口 &amp;&amp; 对象树概念 &amp;&amp; 信号和槽—连接函数(QT最重要的函数)</h5><h5 id="混合列子"><a href="#混合列子" class="headerlink" title="混合列子"></a>混合列子</h5><p>我们试着创建一个主窗口 并且创建一个按钮  然后点击按钮 就会弹出一个新窗口<br>第一步 我们创建一个新按钮<br>第二步 我们创建一个新窗口<br>第三部 用信号和槽 连接按钮和窗口<br>首先新一个窗口 包括了CPP H UI三个文件<br><img src="/medias/qt/newui.png"><br>代码如下</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//主窗口代码</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"review_1.h"</span></span>review_1<span class="token operator">::</span><span class="token function">review_1</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    ui<span class="token punctuation">.</span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新建一个按钮</span>    QPushButton<span class="token operator">*</span> btn_new_windows <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"打开新窗口"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn_new_windows<span class="token operator">-</span><span class="token operator">></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn_new_windows<span class="token operator">-</span><span class="token operator">></span><span class="token function">setFixedSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//窗口实例化</span>    windows_one<span class="token operator">*</span> new_windows <span class="token operator">=</span> <span class="token keyword">new</span> windows_one<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//信号和槽函数 点击按钮 窗口实现打开关闭循环</span>    <span class="token function">connect</span><span class="token punctuation">(</span>btn_new_windows<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>btn_new_windows<span class="token operator">-</span><span class="token operator">></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"打开新窗口"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            new_windows<span class="token operator">-</span><span class="token operator">></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            btn_new_windows<span class="token operator">-</span><span class="token operator">></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"关闭新窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            new_windows<span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            btn_new_windows<span class="token operator">-</span><span class="token operator">></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"打开新窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对象树概念"><a href="#对象树概念" class="headerlink" title="对象树概念"></a>对象树概念</h4><p>我们在创建按钮的时候 创建在了堆区 那我们为什么没有delete呢？<br>原因就是因为对象树的概念，由于我们绑定了this 会自动析构<br>Qt 运用对象树模式，当父对象被析构时，子对象自动就 delete 掉了，不用再写一大堆的代码了。</p><pre class="line-numbers language-cpp"><code class="language-cpp">QPushButton<span class="token operator">*</span> btn_new_windows <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"打开新窗口"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="信号和槽—连接函数-QT最重要的函数"><a href="#信号和槽—连接函数-QT最重要的函数" class="headerlink" title="信号和槽—连接函数(QT最重要的函数)"></a>信号和槽—连接函数(QT最重要的函数)</h4><p>信号和槽是用于对象之间的通信，它是Qt的核心机制，在Qt编程中有着广泛的应用。<br>如果想学好Qt，一定要充分掌握信号的槽的概念与使用。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">connect</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span>QString<span class="token punctuation">,</span>QString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>receiver<span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">updateValue</span><span class="token punctuation">(</span>QString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sender：发送对象<br>SIGNAL：信号<br>receiver：接收对象<br>SLOT: 槽函数</p><p>推荐写法 lambda表达式</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">connect</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span>QString<span class="token punctuation">,</span>QString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实现代码；</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>信号和槽之间只要通过connect 函数连接就建立了耦合关系<br>如果想解除连接可以使用disconnect函数<br>信号可以连接信号<br>一个信号可以连接多个槽函数<br>多个信号 可以连接同一个槽函数<br>信号和槽函数的参数 必须一一对应<br>信号和槽的参数个数 不需要一致  信号要大于槽的参数个数</p><h4 id="熟悉参看qt设计师助手的API并且使用"><a href="#熟悉参看qt设计师助手的API并且使用" class="headerlink" title="熟悉参看qt设计师助手的API并且使用"></a>熟悉参看qt设计师助手的API并且使用</h4><p>用宇宙第一IDE VS 开发 虽然很拉风<br>但是如果用QTcreator开发 也是有很多好处的<br>比如代码提示和与QT Assistant联动<br>Qt库文档是由开发者自己在线在.cpp中所写。<br>文档团队修正的文档以确保它是准确和可用的，并提供产品质量的控制。<br>该文档团队还写了大量的文本，如类描述-介绍类与类使用的概念，以及类提供的功能和属性。<br>该文档的重点是API，而不是内部结构，因为需要努力保持API相一致，并与每一个新版本兼容。<br>但可以改变内部结构大大提高性能和增强功能。<br>对于帮助文档查阅运用，首先是要知道自己想达到什么目的、实现什么功能，<br>然后先可以用谷歌百度搜索关键词，得到可能的模块名、类名、函数名，<br>再用 Qt 助手的索引或搜索功能找到具体的文档和示例代码。</p><p>API过于庞大复杂 暂不细说(能力有限)</p><h4 id="熟悉QT的UI操作-资源文件-对话框-界面布局-常用控件"><a href="#熟悉QT的UI操作-资源文件-对话框-界面布局-常用控件" class="headerlink" title="熟悉QT的UI操作 资源文件 对话框 界面布局 常用控件"></a>熟悉QT的UI操作 资源文件 对话框 界面布局 常用控件</h4><h5 id="添加资源文件"><a href="#添加资源文件" class="headerlink" title="添加资源文件"></a>添加资源文件</h5><p>右键项目-&gt;新建-&gt;QT-&gt;QT Resource File<br><img src="/medias/qt/qtres.png"></p><h5 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h5><p>QT中的对话框有很多种，比如：</p><ul><li>消息框</li><li>文件对话框</li><li>颜色对话框</li><li>输入对话框</li><li>等<br>自行参看qt助手的API</li></ul><p>窗口代码</p><pre class="line-numbers language-cpp"><code class="language-cpp">UI_danlog_src_ctr<span class="token operator">::</span><span class="token function">UI_danlog_src_ctr</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    ui<span class="token punctuation">.</span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用添加的资源文件 设置背景图片</span>    QPalette palette<span class="token punctuation">;</span>    palette<span class="token punctuation">.</span><span class="token function">setBrush</span><span class="token punctuation">(</span>QPalette<span class="token operator">::</span>Background<span class="token punctuation">,</span> <span class="token function">QBrush</span><span class="token punctuation">(</span><span class="token function">QPixmap</span><span class="token punctuation">(</span><span class="token string">":/src/16.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scaled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>IgnoreAspectRatio<span class="token punctuation">,</span> Qt<span class="token operator">::</span>SmoothTransformation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setPalette</span><span class="token punctuation">(</span>palette<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setAutoFillBackground</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新建一个文件对话框 连接消息框按键 </span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token punctuation">.</span>pushButton_8<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        QMessageBox<span class="token operator">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"消息框"</span><span class="token punctuation">,</span> <span class="token string">"对对对"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"消息框出现了!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//颜色</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token punctuation">.</span>pushButton_3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//QColorDialog dlg(this);</span>        QColor res_color <span class="token operator">=</span> QColorDialog<span class="token operator">::</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//dlg.exec();</span>        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> res_color<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//文件</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token punctuation">.</span>pushButton_2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//QColorDialog dlg(this);</span>        QString res_File <span class="token operator">=</span> QFileDialog<span class="token operator">::</span><span class="token function">getOpenFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"打开文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//dlg.exec();</span>        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> res_File<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//其它不举 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下<br><img src="/medias/qt/qtdialogres.png"></p><p>ui设计 直接点击ui文件 会自动跳转qtdesigner </p><h4 id="封装自定义控件"><a href="#封装自定义控件" class="headerlink" title="封装自定义控件"></a>封装自定义控件</h4><p>新建一个qtwidgetcalss 自定义名称 这里命名为UserDefineControl<br>步骤 右键项目-&gt;添加-&gt;Add Qt Class-&gt; Qt Widget Class<br>会生成<br>UserDefineControl.cpp<br>UserDefineControl.h<br>UserDefineControl.ui<br>在 UserDefineControl.ui 设置自己需要的控件</p><p>在 UserDefineControl.h/cpp<br>设置需要提供的接口(.h函数的声明/.cpp函数的定义)</p><p>在主窗口中添加一个widget 提升为上面命名的类（这里是UserDefineControl）<br>此时.h(项目)中会自动#include&lt;UserDefineControl.h&gt;<br>.cpp(项目)中 此时用UserDefineContro提供的接口</p><p>在使用自定义封装控件提供的接口时<br>不能直接<br>ui.function();<br>而是用<br>ui.widget-&gt;function();<br>因为上面模块话的自动化空间 都被封装到项目UI的widget中<br>此时已经完成了模块化的自定义控件操作</p><p>需要注意的是 添加的类 头文件目录在vs中可能需要自己添加路径(VC++中的包含路径)</p><p>结果如下<br><img src="/medias/qt/userdefine.png" alt="自定义控件"><br><img src="/medias/qt/userdefine_2.png" alt="主窗口widget控件提升"><br><img src="/medias/qt/userdefine_3.png" alt="res"><br>到这 控件的模块化设计已经完成</p><h4 id="事件处理-amp-事件分发-amp-事件过滤器-amp-定时器-amp-qt简单的绘图-amp-文件读写操作"><a href="#事件处理-amp-事件分发-amp-事件过滤器-amp-定时器-amp-qt简单的绘图-amp-文件读写操作" class="headerlink" title="事件处理 &amp; 事件分发 &amp; 事件过滤器 &amp; 定时器 &amp; qt简单的绘图 &amp; 文件读写操作"></a>事件处理 &amp; 事件分发 &amp; 事件过滤器 &amp; 定时器 &amp; qt简单的绘图 &amp; 文件读写操作</h4><h5 id="定时器-时间分发-过滤-杂项"><a href="#定时器-时间分发-过滤-杂项" class="headerlink" title="定时器 时间分发 过滤 杂项"></a>定时器 时间分发 过滤 杂项</h5><p>窗口cpp代码</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"QTTimerStudy.h"</span></span>QTTimerStudy<span class="token operator">::</span><span class="token function">QTTimerStudy</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    ui<span class="token punctuation">.</span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//启动定时器</span>    timer1 <span class="token operator">=</span> <span class="token function">startTimer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    timer2 <span class="token operator">=</span> <span class="token function">startTimer</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//推荐的写法</span>    <span class="token comment" spellcheck="true">//定时器类的写法</span>    QTimer<span class="token operator">*</span> timer3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTimer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//启动定时器</span>    timer3<span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//信号连接写法  lambda yyds</span>    <span class="token function">connect</span><span class="token punctuation">(</span>timer3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QTimer<span class="token operator">::</span>timeout<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        ui<span class="token punctuation">.</span>label_3<span class="token operator">-</span><span class="token operator">></span><span class="token function">setText</span><span class="token punctuation">(</span>QString<span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//点击按钮 停止定时器</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token punctuation">.</span>pushButton<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        timer3<span class="token operator">-</span><span class="token operator">></span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> 0 </span>    QTimer<span class="token operator">*</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTimer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QTimer<span class="token operator">::</span>timeout    timer<span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span>xms<span class="token punctuation">)</span><span class="token punctuation">;</span>    timer<span class="token operator">-</span><span class="token operator">></span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    ui<span class="token punctuation">.</span>label_2  <span class="token comment" spellcheck="true">//ev->timerId() 判断返回的定时器ID</span><span class="token keyword">void</span> QTTimerStudy<span class="token operator">::</span><span class="token function">timerEvent</span><span class="token punctuation">(</span>QTimerEvent<span class="token operator">*</span> ev<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token operator">-</span><span class="token operator">></span><span class="token function">timerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> timer1<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        ui<span class="token punctuation">.</span>label<span class="token operator">-</span><span class="token operator">></span><span class="token function">setText</span><span class="token punctuation">(</span>QString<span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>num1<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token operator">-</span><span class="token operator">></span><span class="token function">timerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> timer2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        ui<span class="token punctuation">.</span>label_2<span class="token operator">-</span><span class="token operator">></span><span class="token function">setText</span><span class="token punctuation">(</span>QString<span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>num2<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//过滤</span><span class="token keyword">bool</span> QTTimerStudy<span class="token operator">::</span><span class="token function">eventFilter</span><span class="token punctuation">(</span>QObject<span class="token operator">*</span> obj<span class="token punctuation">,</span> QEvent<span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> ui<span class="token punctuation">.</span>label_2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QEvent<span class="token operator">::</span>Timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"事件过滤器已经过滤"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token keyword">return</span> QTTimerStudy<span class="token operator">::</span><span class="token function">eventFilter</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>窗口头文件 </p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">pragma</span> execution_character_set("utf-8")</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QtWidgets/QWidget></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"ui_QTTimerStudy.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTimer></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QPushButton></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QEvent></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span><span class="token keyword">class</span> <span class="token class-name">QTTimerStudy</span> <span class="token operator">:</span> <span class="token keyword">public</span> QWidget<span class="token punctuation">{</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">QTTimerStudy</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">timerEvent</span><span class="token punctuation">(</span>QTimerEvent<span class="token operator">*</span> ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> timer1<span class="token punctuation">;</span>    <span class="token keyword">int</span> timer2<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">eventFilter</span><span class="token punctuation">(</span>QObject<span class="token operator">*</span><span class="token punctuation">,</span> QEvent<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>QTTimerStudyClass <span class="token class-name">ui</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h4 id="引入第三方库"><a href="#引入第三方库" class="headerlink" title="引入第三方库"></a>引入第三方库</h4><h4 id="太多了-简单入门了而已"><a href="#太多了-简单入门了而已" class="headerlink" title="太多了 简单入门了而已"></a>太多了 简单入门了而已</h4><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><h2 id="Linux-Dirver"><a href="#Linux-Dirver" class="headerlink" title="Linux Dirver"></a>Linux Dirver</h2><h2 id="Sch-amp-amp-PCB-amp-amp-各种协议-amp-amp-MCU"><a href="#Sch-amp-amp-PCB-amp-amp-各种协议-amp-amp-MCU" class="headerlink" title="Sch &amp;&amp; PCB &amp;&amp; 各种协议 &amp;&amp; MCU"></a>Sch &amp;&amp; PCB &amp;&amp; 各种协议 &amp;&amp; MCU</h2>]]></content>
      
      
      <categories>
          
          <category> EC-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Math</title>
      <link href="/2022/04/26/math/"/>
      <url>/2022/04/26/math/</url>
      
        <content type="html"><![CDATA[<h2 id="Linear-Algebra"><a href="#Linear-Algebra" class="headerlink" title="Linear Algebra"></a>Linear Algebra</h2><h2 id="Probability-and-Statistics"><a href="#Probability-and-Statistics" class="headerlink" title="Probability and Statistics"></a>Probability and Statistics</h2><h2 id="discrete-mathematics"><a href="#discrete-mathematics" class="headerlink" title="discrete mathematics"></a>discrete mathematics</h2>]]></content>
      
      
      <categories>
          
          <category> Math-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS</title>
      <link href="/2022/03/27/cs/"/>
      <url>/2022/03/27/cs/</url>
      
        <content type="html"><![CDATA[<h2 id="C-to-cpp"><a href="#C-to-cpp" class="headerlink" title="C to cpp"></a>C to cpp</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="函数和结构、string对象、array对象"><a href="#函数和结构、string对象、array对象" class="headerlink" title="函数和结构、string对象、array对象"></a>函数和结构、string对象、array对象</h5><h5 id="递归、指针"><a href="#递归、指针" class="headerlink" title="递归、指针"></a>递归、指针</h5><h5 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h5><h5 id="引用变量"><a href="#引用变量" class="headerlink" title="引用变量"></a>引用变量</h5><p>可以作为参数 返回值 局部变量 无法返回 因为随着函数声明周期的结束 函数内局部变量会被销毁<br>const int&amp; value2 防止形参改变实参<br>函数中利用常量引用防止误操作修改实参<br>引用的好处之一就是在函数调用时在内存中不会生成副本。<br>用引用传递函数的参数，能保证参数传递中不产生副本，提高传递的效率，且通过const的使用，保证了引用传递的安全性。<br>流操作符&lt;&lt;和&gt;&gt;、赋值操作符=的返回值、拷贝构造函数的参数、赋值操作符=的参数</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">firstref</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> value1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> value2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> value5 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">&amp;</span> ref1 <span class="token operator">=</span> value5<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>ref1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注意：不要返回局部变量引用  可以返回静态变量</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="默认参数、函数重载、函数模板"><a href="#默认参数、函数重载、函数模板" class="headerlink" title="默认参数、函数重载、函数模板"></a>默认参数、函数重载、函数模板</h5><h6 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h6><p>提高可复用性<br>同一个作用域下<br>函数名称相同<br>函数参数类型不同 或者 个数不同 或者 顺序不同</p><h4 id="内存模型和名称空间"><a href="#内存模型和名称空间" class="headerlink" title="内存模型和名称空间"></a>内存模型和名称空间</h4><h5 id="单独编译"><a href="#单独编译" class="headerlink" title="单独编译"></a>单独编译</h5><h5 id="存储持续性、作用域、链接性"><a href="#存储持续性、作用域、链接性" class="headerlink" title="存储持续性、作用域、链接性"></a>存储持续性、作用域、链接性</h5><h5 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h5><h4 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h4><p>////class 默认private  struct默认public<br>    //简单类</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"structure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//初始化列表</span>    <span class="token comment" spellcheck="true">//person(string n, int a) :name(name), age(age) {};</span>    <span class="token comment" spellcheck="true">//除了性能问题之外，有些时候合初始化列表是不可或缺的，以下几种情况时必须使用初始化列表</span>    <span class="token comment" spellcheck="true">//1.常量成员，因为常量只能初始化不能赋值，所以必须放在初始化列表里面 const</span>    <span class="token comment" spellcheck="true">//2.引用类型，引用必须在定义的时候初始化，并且不能重新赋值，所以也要写在初始化列表里面</span>    <span class="token comment" spellcheck="true">//3. 没有默认构造函数的类类型，因为使用初始化列表可以不必调用默认构造函数来初始化，而是直接调用拷贝构造函数初始化</span>    <span class="token function">person</span><span class="token punctuation">(</span><span class="token keyword">const</span> person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name <span class="token operator">=</span> p<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age <span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">.</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对于含有指针成员的类，直接拷贝可能会出现两个对象的指针成员指向同一个数据区。这时候一般先new个内存，然后复制内容</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"destruct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setname</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string  <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setage</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span>  <span class="token function">getage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继承&amp;&amp;多态 多态的优点：代码组织结构清晰 可读性强 利于前期和后期的扩展以及维护</span><span class="token keyword">class</span> <span class="token class-name">AbstractCalculator</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> m_Num1<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加法计算器  根据需求自己定义</span><span class="token keyword">class</span> <span class="token class-name">AddCalculator</span> <span class="token operator">:</span><span class="token keyword">public</span> AbstractCalculator<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> m_Num1 <span class="token operator">+</span> m_Num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">////调用</span><span class="token keyword">void</span> <span class="token function">addCalculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建加法计算器</span>    AbstractCalculator<span class="token operator">*</span> abc <span class="token operator">=</span> <span class="token keyword">new</span> AddCalculator<span class="token punctuation">;</span>    abc<span class="token operator">-</span><span class="token operator">></span>m_Num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    abc<span class="token operator">-</span><span class="token operator">></span>m_Num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-</span><span class="token operator">></span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" + "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-</span><span class="token operator">></span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-</span><span class="token operator">></span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">delete</span> abc<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//用完了记得销毁</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">////可以从 AbstractCalculator 知道 类中虚函数毫无作用 可以直接改写为纯虚函数</span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//纯虚函数</span>    <span class="token comment" spellcheck="true">//类中只要有一个纯虚函数就称为抽象类</span>    <span class="token comment" spellcheck="true">//抽象类无法实例化对象</span>    <span class="token comment" spellcheck="true">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token keyword">public</span> Base<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//案列</span><span class="token keyword">class</span> <span class="token class-name">AbstractDrinking</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">MakeDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token operator">:</span> <span class="token keyword">public</span> AbstractDrinking <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"煮农夫山泉!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"冲泡咖啡!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"将咖啡倒入杯中!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"加入牛奶!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//业务函数 传入子类 new zilei</span><span class="token keyword">void</span> <span class="token function">DoWork</span><span class="token punctuation">(</span>AbstractDrinking<span class="token operator">*</span> drink<span class="token punctuation">)</span> <span class="token punctuation">{</span>    drink<span class="token operator">-</span><span class="token operator">></span><span class="token function">MakeDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> drink<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="虚析构和纯虚析构"><a href="#虚析构和纯虚析构" class="headerlink" title="虚析构和纯虚析构"></a>虚析构和纯虚析构</h4><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">//解决父类指针释放后 无法调用到子类的析构代码 堆区资源无法释放(new）</span>    <span class="token comment" spellcheck="true">//父类析构函数声明为 virtual 会先调用子类的析构函数 多态性质</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Animal 构造函数调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span>    <span class="token comment" spellcheck="true">//virtual void Speak() = 0;</span>    <span class="token comment" spellcheck="true">//析构函数加上virtual关键字，变成虚析构函数</span>    <span class="token comment" spellcheck="true">//virtual ~Animal()</span>    <span class="token comment" spellcheck="true">//{</span>    <span class="token comment" spellcheck="true">//    cout &lt;&lt; "Animal虚析构函数调用！" &lt;&lt; endl;</span>    <span class="token comment" spellcheck="true">//}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Animal<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Animal 纯虚析构函数调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token operator">:</span> <span class="token keyword">public</span> Animal <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Cat</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Cat构造函数调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        m_Name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Cat析构函数调用!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_Name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Cat析构函数调用succ!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">delete</span> m_Name<span class="token punctuation">;</span>            m_Name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    string<span class="token operator">*</span> m_Name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Animal<span class="token operator">*</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//animal->Speak();</span>    <span class="token comment" spellcheck="true">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span>    <span class="token comment" spellcheck="true">//怎么解决？给基类增加一个虚析构函数</span>    <span class="token comment" spellcheck="true">//虚析构函数就是用来解决通过父类指针释放子类对象</span>    <span class="token keyword">delete</span> animal<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h4><h4 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h4><h4 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h4><h4 id="类的作用域"><a href="#类的作用域" class="headerlink" title="类的作用域"></a>类的作用域</h4><h4 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h4><h4 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h4><p>类成员函数<br>类外友元函数<br>函数运算符重载 </p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">function</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> input<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> input <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Demo demo;</span><span class="token comment" spellcheck="true">//demo("hello world");</span><span class="token comment" spellcheck="true">//operator() 让对象变得像函数，这个运算符也被称为 operator() 函数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h4><p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术<br>友元的目的就是让一个函数或者类 访问另一个类中私有成员<br>全局函数做友元<br>friend void goodGay(calss * calssone);<br>函数访问类中私有成员<br>类做友元</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">friend2</span> <span class="token punctuation">{</span>    <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">friend1</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">friend2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">friend1</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">friend1</span><span class="token punctuation">(</span>friend2 friendorder<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>friendorder <span class="token operator">=</span> friendorder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span>friendorder<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">log</span><span class="token punctuation">(</span>friendorder<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    friend2 friendorder<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">classforfriend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    friend2 one<span class="token punctuation">;</span>    friend1 <span class="token function">two</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>    two<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//成员函数做友元</span>    <span class="token comment" spellcheck="true">//friend void friend1::visit();</span>    <span class="token comment" spellcheck="true">//类中的某一个成员函数，可以访问私有内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类的自动转换和强制类类型转换"><a href="#类的自动转换和强制类类型转换" class="headerlink" title="类的自动转换和强制类类型转换"></a>类的自动转换和强制类类型转换</h4><h4 id="类和动态内存分配"><a href="#类和动态内存分配" class="headerlink" title="类和动态内存分配"></a>类和动态内存分配</h4><h4 id="构造函数new注意事项"><a href="#构造函数new注意事项" class="headerlink" title="构造函数new注意事项"></a>构造函数new注意事项</h4><h4 id="放回对象的说明"><a href="#放回对象的说明" class="headerlink" title="放回对象的说明"></a>放回对象的说明</h4><h4 id="使用指向对象的指针"><a href="#使用指向对象的指针" class="headerlink" title="使用指向对象的指针"></a>使用指向对象的指针</h4><h4 id="基类"><a href="#基类" class="headerlink" title="基类"></a>基类</h4><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h4 id="多态共有继承"><a href="#多态共有继承" class="headerlink" title="多态共有继承"></a>多态共有继承</h4><h4 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h4><h4 id="继承和动态内存分配"><a href="#继承和动态内存分配" class="headerlink" title="继承和动态内存分配"></a>继承和动态内存分配</h4><h3 id="代码重用"><a href="#代码重用" class="headerlink" title="代码重用"></a>代码重用</h3><h4 id="包含对象成员的类"><a href="#包含对象成员的类" class="headerlink" title="包含对象成员的类"></a>包含对象成员的类</h4><h4 id="私有继承"><a href="#私有继承" class="headerlink" title="私有继承"></a>私有继承</h4><h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><h4 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h4><h3 id="异常、友元、其它"><a href="#异常、友元、其它" class="headerlink" title="异常、友元、其它"></a>异常、友元、其它</h3><h3 id="输入、输出、文件"><a href="#输入、输出、文件" class="headerlink" title="输入、输出、文件"></a>输入、输出、文件</h3><h3 id="new-在堆区开辟数据"><a href="#new-在堆区开辟数据" class="headerlink" title="new 在堆区开辟数据"></a>new 在堆区开辟数据</h3><pre class="line-numbers language-cpp"><code class="language-cpp">定位<span class="token keyword">new</span><span class="token operator">--</span>类<span class="token operator">/</span>结构体<span class="token keyword">class</span> <span class="token class-name">classnew</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">classnew</span><span class="token punctuation">(</span>string charbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>charbuf <span class="token operator">=</span> charbuf<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">classnew</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"destructor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string <span class="token function">getcharbuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>charbuf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">getnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    string charbuf<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//delete 释放 new分配的内存 </span><span class="token comment" spellcheck="true">//由于创建在堆区 可以有程序员使用delete释放</span><span class="token keyword">int</span> <span class="token function">newfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//temp 赋值为10 int类型</span>    <span class="token keyword">int</span><span class="token operator">*</span> temp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> temp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//c++ 11</span>    <span class="token function">log</span><span class="token punctuation">(</span>temp1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>temp2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> temp1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//delete(temp1);</span>    <span class="token keyword">delete</span> temp2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//数组类型</span>    <span class="token keyword">int</span><span class="token operator">*</span> arrtemp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//int* arrtemp2 = new(10 * sizeof(int));</span>    <span class="token keyword">int</span><span class="token operator">*</span> arrtemp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        arrtemp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span>arrtemp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//数组为 delete[]</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrtemp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span>arrtemp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrtemp1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建类对象</span>    person<span class="token operator">*</span> pTest <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token function">person</span><span class="token punctuation">(</span><span class="token string">"fengle"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>pTest<span class="token operator">-</span><span class="token operator">></span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>pTest<span class="token operator">-</span><span class="token operator">></span><span class="token function">getage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> pTest<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处执行类的析构函数 </span>    <span class="token comment" spellcheck="true">//直接创建类 会在栈区 析构函数不能有程序员执行</span>        <span class="token comment" spellcheck="true">//placement new 定位放置new</span>        <span class="token comment" spellcheck="true">//在指定内存上分配</span>    <span class="token keyword">char</span> buffer1<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    classnew<span class="token operator">*</span> class1 <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>buffer1<span class="token punctuation">)</span> <span class="token function">classnew</span><span class="token punctuation">(</span><span class="token string">"one"</span> <span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>class1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getcharbuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>class1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//但是由于对象的空间不会自动释放 因为是在已经分配好的空间上进行分配</span>    <span class="token comment" spellcheck="true">//此时析构函数 必须显示调用 不用自动调用</span>    class1<span class="token operator">-</span><span class="token operator">></span><span class="token operator">~</span><span class="token function">classnew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//placement new 使用场景举例</span>    <span class="token comment" spellcheck="true">//如果有这样一个场景，我们需要大量的申请一块类似的内存空间，然后又释放掉，</span>    <span class="token comment" spellcheck="true">//比如在在一个server中对于客户端的请求，每个客户端的每一次上行数据我们都需要</span>    <span class="token comment" spellcheck="true">//为此申请一块内存，当我们处理完请求给客户端下行回复时释放掉该内存，</span>    <span class="token comment" spellcheck="true">//表面上看者符合c++的内存管理要求，没有什么错误，但是仔细想想很不合理，</span>    <span class="token comment" spellcheck="true">//为什么我们每个请求都要重新申请一块内存呢，要知道每一次内从的申请，</span>    <span class="token comment" spellcheck="true">//系统都要在内存中找到一块合适大小的连续的内存空间，这个过程是很慢的（相对而言)，</span>    <span class="token comment" spellcheck="true">//极端情况下，如果当前系统中有大量的内存碎片，并且我们申请的空间很大，甚至有可能失败。</span>    <span class="token comment" spellcheck="true">//为什么我们不能共用一块我们事先准备好的内存呢？</span>    <span class="token comment" spellcheck="true">//可以的，我们可以使用placement new来构造对象，那么就会在我们指定的内存空间中构造对象。</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h3 id="杂项及其用法：c-11-20-新标准"><a href="#杂项及其用法：c-11-20-新标准" class="headerlink" title="杂项及其用法：c++11-20 新标准"></a>杂项及其用法：c++11-20 新标准</h3><h4 id="语言可用性的强化"><a href="#语言可用性的强化" class="headerlink" title="语言可用性的强化"></a>语言可用性的强化</h4><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><h5 id="变量及其初始化"><a href="#变量及其初始化" class="headerlink" title="变量及其初始化"></a>变量及其初始化</h5><h5 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h5><h5 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h5><h5 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h5><h4 id="语言运行期的强化"><a href="#语言运行期的强化" class="headerlink" title="语言运行期的强化"></a>语言运行期的强化</h4><h5 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h5><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//lamdba表达式就是匿名函数(没有名字的函数)</span>    <span class="token comment" spellcheck="true">// </span>    <span class="token comment" spellcheck="true">//[]捕获列表 ()参数列表 ->返回值</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">int</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//函数体</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//自动推导返回类型 且可以 b(1,3)</span>    <span class="token keyword">auto</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">int</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//函数体</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//lamdba嵌套</span>    <span class="token comment" spellcheck="true">//函数式编程 疯狂嵌套 结果取决于内部的参数  </span>    <span class="token comment" spellcheck="true">//(外界影响不大 集中内函数内部)  对多线程 并发 天生具有优势</span>    <span class="token keyword">int</span> forlamdba <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">int</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> n <span class="token operator">+</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> ee <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> n <span class="token operator">+</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token function">ee</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> e <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="函数对象包装器"><a href="#函数对象包装器" class="headerlink" title="函数对象包装器"></a>函数对象包装器</h5><h5 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h5><h4 id="右值引用-1"><a href="#右值引用-1" class="headerlink" title="右值引用"></a>右值引用</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//提高资源资源利用效率</span><span class="token comment" spellcheck="true">//移动构造 &amp;&amp; srd:move</span><span class="token keyword">class</span> <span class="token class-name">Buffer</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buf <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">;</span>            buf <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span><span class="token operator">*</span> buf <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Buffer <span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Buffer buf<span class="token punctuation">;</span>    <span class="token keyword">return</span> buf<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setBuffer</span><span class="token punctuation">(</span><span class="token keyword">const</span> Buffer<span class="token operator">&amp;</span> buf<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"const Buffer&amp; buf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">void</span> <span class="token function">setBuffer</span><span class="token punctuation">(</span>Buffer<span class="token operator">&amp;&amp;</span> buf<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Buffer&amp;&amp; buf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">buftest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这样调用会有两次内存开销 两次对象 一次为buf  一次为 getbuffer中  此处get为右值 </span>    <span class="token comment" spellcheck="true">//如果没有const &amp; 编译器报错 因为getBuffer已经销毁</span>    <span class="token comment" spellcheck="true">//让一个常引用指向一个将亡值 将亡值声明周期将和常引用一样</span>    Buffer buf <span class="token operator">=</span> <span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setBuffer</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用普通常引用</span>    <span class="token function">setBuffer</span><span class="token punctuation">(</span><span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用右值引用</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="智能指针与内存管理"><a href="#智能指针与内存管理" class="headerlink" title="智能指针与内存管理"></a>智能指针与内存管理</h4><p>(头文件 <memory>)</memory></p><h5 id="Rall-amp-amp-引用计数"><a href="#Rall-amp-amp-引用计数" class="headerlink" title="Rall &amp;&amp; 引用计数"></a>Rall &amp;&amp; 引用计数</h5><p>引用计数是为了防止内存泄露 每当增加一次对同一个对象的引用 引用计数就会增加一次 每删除一次 引用计数就会减1 当引用计数为零时就会自动三处指向堆的内存。</p><h5 id="std-shared-ptr"><a href="#std-shared-ptr" class="headerlink" title="std::shared_ptr"></a>std::shared_ptr</h5><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//简单的使用方法</span><span class="token keyword">void</span> <span class="token function">shared_ptr_foo</span><span class="token punctuation">(</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">shared_ptr_realize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> pointer <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">shared_ptr_foo</span><span class="token punctuation">(</span>pointer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">*</span>pointer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">shared_ptr_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> pointer1 <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> pointer2 <span class="token operator">=</span> pointer1<span class="token punctuation">;</span>    <span class="token keyword">auto</span> pointer3 <span class="token operator">=</span> pointer1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获得原始指针</span>    <span class="token keyword">auto</span><span class="token operator">*</span> p <span class="token operator">=</span> pointer1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//显示引用次数</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer1<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer2<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer3<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//reset() 减少一个引用计数</span>    pointer2<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer1<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer2<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer3<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>    pointer3<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer1<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer2<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer3<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="std-unique-ptr"><a href="#std-unique-ptr" class="headerlink" title="std::unique_ptr"></a>std::unique_ptr</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 貌似是老的方法 不深入研究</span><span class="token comment" spellcheck="true">//是一种独占的智能指针，它禁止其他智能指针与其共享同一个对象，从而保证代码的安全</span><span class="token keyword">int</span> <span class="token function">unique_ptr_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> pointers <span class="token operator">=</span> make_unique<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//auto pointers1 = pointers; 无法复制 因为unique独占 </span>    <span class="token comment" spellcheck="true">//可以用 std::move 转移</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="std-weak-ptr"><a href="#std-weak-ptr" class="headerlink" title="std::weak_ptr"></a>std::weak_ptr</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">weak_ptr_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> A<span class="token punctuation">;</span>    <span class="token keyword">struct</span> B<span class="token punctuation">;</span>    <span class="token keyword">struct</span> A <span class="token punctuation">{</span>        shared_ptr<span class="token operator">&lt;</span>B<span class="token operator">></span> pointer<span class="token punctuation">;</span>        <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A 被销毁"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> B <span class="token punctuation">{</span>        shared_ptr<span class="token operator">&lt;</span>A<span class="token operator">></span> pointer<span class="token punctuation">;</span>        <span class="token operator">~</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B 被销毁"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> a <span class="token operator">=</span> std<span class="token operator">::</span>make_shared<span class="token operator">&lt;</span>A<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//引用计数一次</span>    <span class="token keyword">auto</span> b <span class="token operator">=</span> std<span class="token operator">::</span>make_shared<span class="token operator">&lt;</span>B<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//引用计数一次</span>    a<span class="token operator">-</span><span class="token operator">></span>pointer <span class="token operator">=</span> b<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//引用计数两次</span>    b<span class="token operator">-</span><span class="token operator">></span>pointer <span class="token operator">=</span> a<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//引用计数两次</span>    <span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>    <span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>    <span class="token comment" spellcheck="true">//退出作用域时 引用减少一次 则为1 无法释放内存</span>    <span class="token comment" spellcheck="true">//此时使用弱引用指针 weak_ptr 因为弱引用不会增加引用次数 问题得以解决</span>    <span class="token comment" spellcheck="true">//解决方法  二次使用弱引用 weak_ptr </span>    <span class="token keyword">struct</span> C<span class="token punctuation">;</span>    <span class="token keyword">struct</span> D<span class="token punctuation">;</span>    <span class="token keyword">struct</span> C <span class="token punctuation">{</span>        weak_ptr<span class="token operator">&lt;</span>D<span class="token operator">></span> pointer<span class="token punctuation">;</span>        <span class="token operator">~</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A 被销毁"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> D <span class="token punctuation">{</span>        weak_ptr<span class="token operator">&lt;</span>C<span class="token operator">></span> pointer<span class="token punctuation">;</span>        <span class="token operator">~</span><span class="token function">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B 被销毁"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> c <span class="token operator">=</span> std<span class="token operator">::</span>make_shared<span class="token operator">&lt;</span>C<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">auto</span> d <span class="token operator">=</span> std<span class="token operator">::</span>make_shared<span class="token operator">&lt;</span>D<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      c<span class="token operator">-</span><span class="token operator">></span>pointer <span class="token operator">=</span> d<span class="token punctuation">;</span>                      d<span class="token operator">-</span><span class="token operator">></span>pointer <span class="token operator">=</span> c<span class="token punctuation">;</span>                         <span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>    <span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>    <span class="token comment" spellcheck="true">//当作用域结束后 引用则为0 析构函数执行</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><h5 id="正则表达式简介"><a href="#正则表达式简介" class="headerlink" title="正则表达式简介"></a>正则表达式简介</h5><h5 id="std-regex-及其相关"><a href="#std-regex-及其相关" class="headerlink" title="std::regex 及其相关"></a>std::regex 及其相关</h5><h3 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h3><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><p>并发 两个以上的任何 同时发生<br>并发的假象 需要时间开销 任务切换<br>多个核心cpu  硬件并发<br>任务数少于核心数 可以做到真正的任务并发<br>使用并发的原因 同时执行多个任务 提高性能</p><h4 id="可执行程序"><a href="#可执行程序" class="headerlink" title="可执行程序"></a>可执行程序</h4><p>磁盘上的一个文件 windows下 一个扩展名为exe<br>windows下 双击 lunux./</p><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><p>就是一个可执行程序 运行起来 就创建了一个进程</p><p>进程就是运行起来的可执行程序</p><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><p>进程存在了 主线程就出现了<br>main thread<br>main函数中的代码 有主线程执行<br>主线程和线程 唇齿相依</p><p>除了主线程之外 我们可以通过自己创建其它线程 其它现场走的是别的通道 甚至去不同搞的地方</p><p>没创建一个新的线程 我们就可以在同一时刻 多干一个不同的事情 </p><p>多线程 并发<br>线程并不是越多越好 每个线程 都需要一个独立的堆栈空间(1M) 现场之间的切换 要保存很多中间状态；<br>切换会耗费本该属于程序的运行的时间</p><p>可以同时处理不同的事情</p><p>总结<br>用来执行代码<br>一个新线程 代表一条新的通路<br>一个进程包含一个主线程 主线程随着进程的启动 并运行 我们可以创建多个其它现场(非主线程)<br>但是创建的数量一般不超过200-300个(个数根据实际情况)<br>因为主线程是自动启动的 所以一个进程中最少也是有一个线程(主线程)<br>多线程程序可以同时干多个事 运行效率高<br>提高效率 需要调整和优化 资源 线程等问题</p><h4 id="学习心得"><a href="#学习心得" class="headerlink" title="学习心得"></a>学习心得</h4><p>开发多线程程序 实力的体现 一个商用的必须要求<br>线程开发有一定难度 实现代码更复杂 理解上更难一些 需要一定的学习时间<br>c++线程会涉及很多新概念 对于c++道路上的成长特别关键 不要急于求成<br>方向 网络通信 网络服务器 qt等方向 都需要多线程 绝对绕不开</p><h4 id="实现并发的手段"><a href="#实现并发的手段" class="headerlink" title="实现并发的手段"></a>实现并发的手段</h4><p>通过多个进程 实现并发<br>单个进程中 创建多个线程 实现并发</p><h5 id="多进程并发"><a href="#多进程并发" class="headerlink" title="多进程并发"></a>多进程并发</h5><p>系统举例 启动多个软件<br>服务器进程之间的通信 账号服务器 游戏服务器 之间的通信<br>进程之间的通信<br>管道<br>文件<br>消息队列<br>共享内存<br>等等等等<br>如果不同电脑之间 可以使用socker通信 等等<br>等等</p><h5 id="多线程并发"><a href="#多线程并发" class="headerlink" title="多线程并发"></a>多线程并发</h5><p>线程 (像是轻量级的进程)<br>共享内存 因为在同一个进程内<br>全局变量<br>指针<br>引用<br>等<br>多线程开销远远小于多进程<br>共享内存的新问题<br>数据一致性的问题<br>多个现场对一个变量同时操作 需要先后顺序等<br>互斥问题<br>多线程和多进程可以混合使用 但是有限考虑多线程技术开发 而不是多进程</p><h4 id="c-11-新标准-线程库"><a href="#c-11-新标准-线程库" class="headerlink" title="c++11 新标准 线程库"></a>c++11 新标准 线程库</h4><p>需要主要查看官方文档 API<br>以前官方多线程代码不可以跨平台<br>可以导入库 保持代码一致性 可以跨平台 但还是需要配置 比较麻烦</p><p>从c++11新标准开始<br>本身增加对多线程的支持 意味着可移植性 跨平台 windows linux</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>多线程的优点(对比进程)<br>启动速度更快 更轻量级<br>系统资源开销更少 执行速度更快 比如共享内存这种通信方式 比其他通信方式更快<br>缺点<br>使用有一定难度<br>需要处理数据的一致性问题</p><h4 id="multi-thread-code-realize"><a href="#multi-thread-code-realize" class="headerlink" title="multi thread code realize"></a>multi thread code realize</h4><h5 id="线程-thread"><a href="#线程-thread" class="headerlink" title="线程 thread"></a>线程 thread</h5><h5 id="互斥体-mutex"><a href="#互斥体-mutex" class="headerlink" title="互斥体 mutex"></a>互斥体 mutex</h5><p>std::mutex mtx;<br>锁住的是锁 不是其中范围的内容 一个线程用了这个锁<br>其它线程用这个锁 需要等待这个锁解锁才可以使用 才能继续往下执行<br>std::lock_guard<br>自动上锁 离开作用域后自动解锁 不需要手动解锁<br>std::unique_lock<br>自动上锁 离开作用域后自动解锁 不需要手动解锁  但是可以使用解锁和上锁 使得程序更加灵活</p><p>std::unique_lock 与std::lock_guard都能实现自动加锁与解锁功能，但是std::unique_lock要比std::lock_guard更灵活，但是更灵活的代价是占用空间相对更大一点且相对更慢一点。</p><h5 id="future"><a href="#future" class="headerlink" title="future"></a>future</h5><p>主线程获得子线程的值 —— 线程之间的通信</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//头文件</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;future></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>future引出<br>condition mutex 写法</p><pre class="line-numbers language-cpp"><code class="language-cpp">mutex mu<span class="token punctuation">;</span>               condition_variable cond<span class="token punctuation">;</span><span class="token keyword">bool</span> notified <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 通知信号</span><span class="token keyword">void</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> result<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">*</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; "Result is" &lt;&lt; res &lt;&lt; endl;</span>    std<span class="token operator">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>mu<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> res<span class="token punctuation">;</span>    notified <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    cond<span class="token punctuation">.</span><span class="token function">notify_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    thread <span class="token function">t1</span><span class="token punctuation">(</span>factorial<span class="token punctuation">,</span> N<span class="token punctuation">,</span> <span class="token function">ref</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>mu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>notified<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 避免虚假唤醒</span>         cond<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Result is"</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//全局变量多 线程之间的耦合度高 不符合线程安全</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>future写法<br>主线程获得子线程的值</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">*</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; "Result is" &lt;&lt; res &lt;&lt; endl;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从未来获取某一个变量的类 future get只能调用一次</span>    future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> fu <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span>factorial<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//async(launch::async, factorial, 5);  此时创建了一个子线程</span>    x <span class="token operator">=</span> fu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Result is"</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子线程获得主线程的值、</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span>future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> fu<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> fu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">*</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Result is "</span> <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">factorial_shared</span><span class="token punctuation">(</span>shared_future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> fu<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> fu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">*</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Result is "</span> <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    promise<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">;</span>    future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> fp <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">get_future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> fu <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span>factorial<span class="token punctuation">,</span> <span class="token function">ref</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//promise future 无法被复制   可以使用shared_future 重复赋值</span>    <span class="token comment" spellcheck="true">//声明了promise 必须给值  不然无法调用</span>    p<span class="token punctuation">.</span><span class="token function">set_value</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> fu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"main set res "</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="条件变量-condition-variable"><a href="#条件变量-condition-variable" class="headerlink" title="条件变量 condition_variable"></a>条件变量 condition_variable</h5><p>简单实现</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;condition_variable></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//STL队列 只能从容器末尾添加 并且只能从容器头部删除  </span>    <span class="token comment" spellcheck="true">//生产者队列</span>    std<span class="token operator">::</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> produced_nums<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//互斥量</span>    std<span class="token operator">::</span>mutex mtx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//条件变量</span>    std<span class="token operator">::</span>condition_variable cv<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//状态</span>    <span class="token keyword">bool</span> notified <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 通知信号</span>    <span class="token comment" spellcheck="true">// 生产者</span>    <span class="token keyword">auto</span> producer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token operator">::</span>chrono<span class="token operator">::</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            std<span class="token operator">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"producing "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>            produced_nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            notified <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            cv<span class="token punctuation">.</span><span class="token function">notify_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此处也可以使用 notify_one</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 消费者</span>    <span class="token keyword">auto</span> consumer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>notified<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 避免虚假唤醒</span>                cv<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 短暂取消锁，使得生产者有机会在消费者消费空前继续生产</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//消费者慢于生产者</span>            std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token operator">::</span>chrono<span class="token operator">::</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>produced_nums<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"consuming "</span> <span class="token operator">&lt;&lt;</span> produced_nums<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token operator">&lt;&lt;</span> <span class="token string">"Peoduced SIZE： "</span> <span class="token operator">&lt;&lt;</span>  produced_nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>                produced_nums<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            notified <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//一个生产者 两个消费者</span>    <span class="token comment" spellcheck="true">// 分别在不同的线程中运行</span>    std<span class="token operator">::</span>thread <span class="token function">p</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>thread cs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//两个消费者</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">thread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="原子-atomic"><a href="#原子-atomic" class="headerlink" title="原子 atomic"></a>原子 atomic</h5><h2 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> a <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> b <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> a<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> b<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">==</span> c<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">and</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c <span class="token operator">==</span> <span class="token number">1000</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a, b, c: %d, %d, %d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> a <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> b <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1001</span><span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>                c <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">-</span> a <span class="token operator">-</span> b                <span class="token keyword">if</span> a<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> b<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">==</span> c<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a, b, c: %d, %d, %d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">### 没有优化的方法所需时间</span>    start1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    solution<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span>    end1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">### 优化的方法所需时间</span>    start2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    solution<span class="token punctuation">.</span>func1<span class="token punctuation">(</span><span class="token punctuation">)</span>    end2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"done!"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"it  cost %s s for func running "</span> <span class="token operator">%</span><span class="token punctuation">(</span>end1 <span class="token operator">-</span> start1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"it  cost %s s for func1 running "</span> <span class="token operator">%</span><span class="token punctuation">(</span>end2 <span class="token operator">-</span> start2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间对比如下<br><img src="/medias/DA/example1.png"><br>可以看出小小的改动 时间相差居然高达千倍</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>算法的五大特性<br>输入: 算法具有0个或多个输入<br>输出: 算法至少有1个或多个输出<br>有穷性: 算法在有限的步骤之后会自动结束而不会无限循环，并且每一个步骤可以在可接受的时间内完成<br>确定性：算法中的每一步都有确定的含义，不会出现二义性<br>可行性：算法的每一步都是可行的，也就是说每一步都能够执行有限的次数完成</p><p>时间比空间重要<br>可以使用空间换时间</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><table><thead><tr><th>执行次数函数举例</th><th>阶</th><th>非正式术语</th></tr></thead><tbody><tr><td>12</td><td>O(1)</td><td>常数阶</td></tr><tr><td>2n+3</td><td>O(n)</td><td>线性阶</td></tr><tr><td>3n^2^+2n+1</td><td>O(n^2^)</td><td>平方阶</td></tr></tbody></table><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><h3 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h3><h3 id="常用数据结构"><a href="#常用数据结构" class="headerlink" title="常用数据结构"></a>常用数据结构</h3><h2 id="compilation"><a href="#compilation" class="headerlink" title="compilation"></a>compilation</h2><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h2 id="End"><a href="#End" class="headerlink" title="End!"></a>End!</h2><p>CS涉及太多<br>只能龟速更新😂</p>]]></content>
      
      
      <categories>
          
          <category> CS-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/2022/03/11/record20210311/"/>
      <url>/2022/03/11/record20210311/</url>
      
        <content type="html"><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><h3 id="随手照片-第一篇-测试-开学记录"><a href="#随手照片-第一篇-测试-开学记录" class="headerlink" title="随手照片(第一篇 测试(开学记录))"></a>随手照片(第一篇 测试(开学记录))</h3><p><img src="/medias/schoollife/view2.jpg" alt="开学"></p><h3 id="22-5-1-话痨上线"><a href="#22-5-1-话痨上线" class="headerlink" title="22/5/1(话痨上线)"></a>22/5/1(话痨上线)</h3><p><img src="/medias/schoollife/51.jpg" alt="下雨的五一(邑)"></p><h3 id="22-5-17"><a href="#22-5-17" class="headerlink" title="22/5/17"></a>22/5/17</h3><p>这几个月 发生了很多事情<br>出大问题了 差点石乐志<br>今天过后 开始每周持续更新 直到秋招开始<br>挖了无数坑给自己 开动填上吧<br>生活照样过 DayDayUp<br><br><br>    <iframe src="//player.bilibili.com/player.html?aid=247609487&amp;bvid=BV1vv41177jq&amp;cid=324439110&amp;page=1" width="100%" height="400px" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"><br>    </iframe><br><br><br><br></p><h3 id="22-5-19"><a href="#22-5-19" class="headerlink" title="22/5/19"></a>22/5/19</h3><p>哇哇哇 taylor昨天被授予荣誉博士学位</p><iframe src="//player.bilibili.com/player.html?aid=384197393&amp;bvid=BV1rZ4y187ZE&amp;cid=723680479&amp;page=1" width="100%" height="400px" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><br><h3 id="22-5-25"><a href="#22-5-25" class="headerlink" title="22/5/25"></a>22/5/25</h3><p>远远的观赏 挺好的 没啥不好的</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1895283808&amp;auto=1&amp;height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> Record-Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> record-life </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
