<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>课设</title>
      <link href="/2022/10/20/cd/"/>
      <url>/2022/10/20/cd/</url>
      
        <content type="html"><![CDATA[<h2 id="无线单片机课程设计"><a href="#无线单片机课程设计" class="headerlink" title="无线单片机课程设计"></a>无线单片机课程设计</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>(1)至少采用以下传感器其中1种: a.超声波、b.加速度、c.压力。<br>(2)点对点传输，采用LCD或数码管显示传感数据，或者通过串口传输到PC端，由串口调试助手完成。定时采样并刷新显示。<br>(3)设计报告中要清楚描述所用传感器的工作原理以及软硬件设计的具体方案。必须设计清晰、合理的程序流程图。解释关键代码段。<br>(4)全部程序代码作为附录，并要有必要的注释。<br>(5)优良等级的要求：实现多点的无线网络传输，要有自定义数据帧格式(含加密和纠错)。</p><h3 id="选题"><a href="#选题" class="headerlink" title="选题"></a>选题</h3><p>多点动作捕捉 （加速度传感器）</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>此处参考了大佬的代码</p><h4 id="mpu6050适配cc2530的zigbee协议栈"><a href="#mpu6050适配cc2530的zigbee协议栈" class="headerlink" title="mpu6050适配cc2530的zigbee协议栈"></a>mpu6050适配cc2530的zigbee协议栈</h4><p>mpu6050 头文件</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _MPU6050_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> _MPU6050_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> SCL P0_6      </span><span class="token comment" spellcheck="true">//IIC时钟引脚定义</span><span class="token macro property">#<span class="token directive keyword">define</span> SDA P0_7      </span><span class="token comment" spellcheck="true">//IIC数据引脚定义</span><span class="token macro property">#<span class="token directive keyword">define</span> SDA_OUT()   P0DIR |= 0x80</span><span class="token macro property">#<span class="token directive keyword">define</span> SDA_IN()    P0DIR &amp;= ~0x80</span><span class="token macro property">#<span class="token directive keyword">define</span> SCL_OUT()   P0DIR |= 0x40</span><span class="token comment" spellcheck="true">//****************************************</span><span class="token comment" spellcheck="true">// 定义MPU6050内部地址</span><span class="token comment" spellcheck="true">//****************************************</span><span class="token macro property">#<span class="token directive keyword">define</span>    SMPLRT_DIV        0x19    </span><span class="token comment" spellcheck="true">//陀螺仪采样率，典型值：0x07(125Hz)</span><span class="token macro property">#<span class="token directive keyword">define</span>    CONFIG            0x1A    </span><span class="token comment" spellcheck="true">//低通滤波频率，典型值：0x06(5Hz)</span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_CONFIG        0x1B    </span><span class="token comment" spellcheck="true">//陀螺仪自检及测量范围，典型值：0x18(不自检，2000deg/s)</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_CONFIG    0x1C    </span><span class="token comment" spellcheck="true">//加速计自检、测量范围及高通滤波频率，典型值：0x01(不自检，2G，5Hz)</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_XOUT_H    0x3B</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_XOUT_L    0x3C</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_YOUT_H    0x3D</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_YOUT_L    0x3E</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_ZOUT_H    0x3F</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_ZOUT_L    0x40</span><span class="token macro property">#<span class="token directive keyword">define</span>    TEMP_OUT_H        0x41</span><span class="token macro property">#<span class="token directive keyword">define</span>    TEMP_OUT_L        0x42</span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_XOUT_H        0x43</span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_XOUT_L        0x44    </span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_YOUT_H        0x45</span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_YOUT_L        0x46</span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_ZOUT_H        0x47</span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_ZOUT_L        0x48</span><span class="token macro property">#<span class="token directive keyword">define</span>    PWR_MGMT_1        0x6B    </span><span class="token comment" spellcheck="true">//电源管理，典型值：0x00(正常启用)</span><span class="token macro property">#<span class="token directive keyword">define</span>    WHO_AM_I            0x75    </span><span class="token comment" spellcheck="true">//IIC地址寄存器(默认数值0x68，只读)</span><span class="token macro property">#<span class="token directive keyword">define</span>    SlaveAddress    0xD0    </span><span class="token comment" spellcheck="true">//IIC写入时的地址字节数据，+1为读取</span><span class="token keyword">extern</span> <span class="token keyword">int</span> accX<span class="token punctuation">,</span>accY<span class="token punctuation">,</span>accZ<span class="token punctuation">,</span>graX<span class="token punctuation">,</span>graY<span class="token punctuation">,</span>graZ<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Init_MPU6050</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Multiple_read_MPU6050</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> REG_Address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源文件</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"ioCC2530.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"MPU6050.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"OnBoard.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"hal_types.h"</span></span><span class="token macro property">#<span class="token directive keyword">define</span> uint  unsigned int</span><span class="token macro property">#<span class="token directive keyword">define</span> uchar unsigned char</span><span class="token keyword">int</span> accX<span class="token punctuation">,</span>accY<span class="token punctuation">,</span>accZ<span class="token punctuation">,</span>graX<span class="token punctuation">,</span>graY<span class="token punctuation">,</span>graZ<span class="token punctuation">;</span><span class="token operator">/</span><span class="token comment" spellcheck="true">/****************************************//函数声明//****************************************void WriteSDA_0(void);void WriteSDA_1(void);void WriteSCL_0(void);void WriteSCL_1(void);void ReadSDA(void);void Init_IO(void);void MPU6050_Start(void);void MPU6050_Stop(void);void MPU6050_SendACK(uchar ack);uchar MPU6050_RecvACK(void);void MPU6050_SendByte(uchar data);uchar MPU6050_RecvByte(void);void Single_Write_MPU6050(uchar REG_Address,uchar REG_data);uchar Single_Read_MPU6050(uchar REG_Address);void InitMPU6050(void);void ALLInit(void);void Multiple_read_MPU6050(void);void delay_us(unsigned int u);void ALLInit(void){   Init_IO();   InitMPU6050();}/****************us延时函数 32M晶振 单周期MCU********************/</span><span class="token keyword">void</span> <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>   u<span class="token operator">=</span><span class="token number">4</span><span class="token operator">*</span>u<span class="token punctuation">;</span>   <span class="token function">MicroWait</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*****************************MPU6050*******************************/</span><span class="token keyword">void</span> <span class="token function">WriteSDA_0</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    P0DIR<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x40</span><span class="token punctuation">;</span>    SDA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">WriteSDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    P0DIR<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x40</span><span class="token punctuation">;</span>    SDA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">WriteSCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    P0DIR<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x80</span><span class="token punctuation">;</span>    SCL<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">WriteSCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    P0DIR<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x80</span><span class="token punctuation">;</span>    SCL<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ReadSDA</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//sda输入,=0</span><span class="token punctuation">{</span>    P0DIR<span class="token operator">&amp;</span><span class="token operator">=</span><span class="token number">0xBF</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Init_IO</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  P0DIR<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0xc0</span><span class="token punctuation">;</span>  P0SEL<span class="token operator">&amp;</span><span class="token operator">=</span><span class="token number">0x3f</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************起始信号**************************************/</span><span class="token keyword">void</span> <span class="token function">MPU6050_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">WriteSDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WriteSCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WriteSDA_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WriteSCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************停止信号**************************************/</span><span class="token keyword">void</span> <span class="token function">MPU6050_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>       <span class="token function">WriteSDA_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">WriteSCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">WriteSDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//I2C发送应答信号</span><span class="token comment" spellcheck="true">//入口参数:ack (0:ACK 1:NAK)</span><span class="token keyword">void</span> <span class="token function">MPU6050_SendACK</span><span class="token punctuation">(</span>uchar ack<span class="token punctuation">)</span><span class="token punctuation">{</span>        SDA<span class="token operator">=</span>ack<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//写应答信号</span>    <span class="token function">WriteSCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//拉高时钟线</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Delay5us();    //延时</span>    <span class="token function">WriteSCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//拉低时钟线</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Delay5us();    //延时</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************发送应答信号**************************************/</span>uchar <span class="token function">MPU6050_RecvACK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ReadSDA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WriteSCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//拉高时钟线</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Delay5us();    //延时</span>    CY<span class="token operator">=</span>SDA<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//读应答信号</span>    <span class="token function">WriteSCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//拉低时钟线</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Delay5us();    //延时</span>    P0DIR<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> CY<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************向IIC总线发送一个字节数据**************************************/</span><span class="token keyword">void</span> <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>uchar data<span class="token punctuation">)</span><span class="token punctuation">{</span>    uchar i<span class="token punctuation">;</span>    <span class="token function">SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//8位计数器</span>    <span class="token punctuation">{</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token function">WriteSDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">else</span>         <span class="token punctuation">{</span><span class="token function">WriteSDA_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                data<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">WriteSCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//拉高时钟线</span>        <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//延时</span>        <span class="token function">WriteSCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//拉低时钟线</span>        <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//延时</span>    <span class="token punctuation">}</span>    <span class="token function">MPU6050_RecvACK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************从IIC总线接收一个字节数据**************************************/</span>uchar <span class="token function">MPU6050_RecvByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      uchar i<span class="token punctuation">;</span>    uchar dat <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">WriteSDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//使能内部上拉,准备读取数据,</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//8位计数器</span>    <span class="token punctuation">{</span>        dat <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        SCL <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//拉高时钟线</span>        <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//延时</span>        dat <span class="token operator">|</span><span class="token operator">=</span> SDA<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//读数据               </span>        SCL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//拉低时钟线</span>         <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//延时</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dat<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//******单字节写入*******************************************</span><span class="token keyword">void</span> <span class="token function">Single_Write_MPU6050</span><span class="token punctuation">(</span>uchar REG_Address<span class="token punctuation">,</span>uchar REG_data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">MPU6050_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//起始信号</span>    <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>SlaveAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//发送设备地址+写信号</span>    <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>REG_Address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//内部寄存器地址，</span>    <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>REG_data<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//内部寄存器数据，</span>    <span class="token function">MPU6050_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//发送停止信号</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//********单字节读取*****************************************</span>uchar <span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>uchar REG_Address<span class="token punctuation">)</span><span class="token punctuation">{</span>    uchar REG_data<span class="token punctuation">;</span>    <span class="token function">MPU6050_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//起始信号</span>    <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>SlaveAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发送设备地址+写信号</span>    <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>REG_Address<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//发送存储单元地址，从0开始    </span>    <span class="token function">MPU6050_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//起始信号</span>    <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>SlaveAddress<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//发送设备地址+读信号</span>    REG_data<span class="token operator">=</span><span class="token function">MPU6050_RecvByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//读出寄存器数据</span>    <span class="token function">MPU6050_SendACK</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//接收应答信号</span>    <span class="token function">MPU6050_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//停止信号</span>    <span class="token keyword">return</span> REG_data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//*****************************************************************</span><span class="token comment" spellcheck="true">//初始化MPU6050，根据需要请参考pdf进行修改************************</span><span class="token keyword">void</span> <span class="token function">InitMPU6050</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Single_Write_MPU6050</span><span class="token punctuation">(</span>PWR_MGMT_1<span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//解除休眠状态</span>    <span class="token function">Single_Write_MPU6050</span><span class="token punctuation">(</span>SMPLRT_DIV<span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Single_Write_MPU6050</span><span class="token punctuation">(</span>CONFIG<span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Single_Write_MPU6050</span><span class="token punctuation">(</span>GYRO_CONFIG<span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Single_Write_MPU6050</span><span class="token punctuation">(</span>ACCEL_CONFIG<span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//*********************************************************</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//连续读出MPU6050内部数据</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//*********************************************************</span><span class="token keyword">void</span> <span class="token function">Multiple_read_MPU6050</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">char</span> BUF<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//接收数据缓存区  </span>  BUF<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>ACCEL_XOUT_H<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>ACCEL_XOUT_L<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>ACCEL_YOUT_H<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>ACCEL_YOUT_L<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>ACCEL_ZOUT_H<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>ACCEL_ZOUT_L<span class="token punctuation">)</span><span class="token punctuation">;</span>    BUF<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>GYRO_XOUT_H<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>GYRO_XOUT_L<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>GYRO_YOUT_H<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>GYRO_YOUT_L<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>GYRO_ZOUT_H<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>GYRO_ZOUT_L<span class="token punctuation">)</span><span class="token punctuation">;</span>    accX<span class="token operator">=</span><span class="token punctuation">(</span>BUF<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>BUF<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   accY<span class="token operator">=</span><span class="token punctuation">(</span>BUF<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>BUF<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   accZ<span class="token operator">=</span><span class="token punctuation">(</span>BUF<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>BUF<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   graX<span class="token operator">=</span><span class="token punctuation">(</span>BUF<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>BUF<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  graY<span class="token operator">=</span><span class="token punctuation">(</span>BUF<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>BUF<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  graZ<span class="token operator">=</span><span class="token punctuation">(</span>BUF<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>BUF<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现多点的无线网络传输"><a href="#实现多点的无线网络传输" class="headerlink" title="实现多点的无线网络传输"></a>实现多点的无线网络传输</h4><p>采用点播 但是默认是一个终端节点<br>需要增了一个终端节点或者多个</p><h5 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h5><p>在头文件SampleApp.h中 添加一个点播id</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> SAMPLEAPP_FLASH_CLUSTERID     2</span><span class="token macro property">#<span class="token directive keyword">define</span> SAMPLEAPP_POINT_TO_POINT_CLUSTERID 3</span><span class="token macro property">#<span class="token directive keyword">define</span> SAMPLEAPP_POINT_TO_POINT_CLUSTERID_2 4   </span><span class="token comment" spellcheck="true">//需要添加的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h5><p>在就是接收处理函数 SampleApp_MessageMSGCB()中添加点播id相关的处理函数<br>如果协调器和终端节点烧的不同一份代码 这个函数在协调器文件中</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SampleApp_MessageMSGCB</span><span class="token punctuation">(</span> afIncomingMSGPacket_t <span class="token operator">*</span>pkt <span class="token punctuation">)</span><span class="token punctuation">{</span>  uint16 flashTime<span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span> pkt<span class="token operator">-></span>clusterId <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">case</span> SAMPLEAPP_PERIODIC_CLUSTERID<span class="token punctuation">:</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> SAMPLEAPP_POINT_TO_POINT_CLUSTERID<span class="token punctuation">:</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'X'</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"ED1:"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalLedBlink</span><span class="token punctuation">(</span> HAL_LED_1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">200</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> SAMPLEAPP_POINT_TO_POINT_CLUSTERID_2<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">//添加的id</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'X'</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"ED2:"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalLedBlink</span><span class="token punctuation">(</span> HAL_LED_1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">200</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> SAMPLEAPP_FLASH_CLUSTERID<span class="token punctuation">:</span>      flashTime <span class="token operator">=</span> <span class="token function">BUILD_UINT16</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">HalLedBlink</span><span class="token punctuation">(</span> HAL_LED_4<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>flashTime <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h5><p>烧录终端节点时 在点播发送函数 SampleApp_SendPointToPointMessage()<br>设置相对于的id</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">AF_DataRequest</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>Point_To_Point_DstAddr<span class="token punctuation">,</span>                       <span class="token operator">&amp;</span>SampleApp_epDesc<span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">//SAMPLEAPP_POINT_TO_POINT_CLUSTERID,  //节点1</span>                       SAMPLEAPP_POINT_TO_POINT_CLUSTERID_2<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//节点2</span>                       <span class="token number">37</span><span class="token punctuation">,</span>                       buf<span class="token punctuation">,</span>                       <span class="token operator">&amp;</span>SampleApp_TransID<span class="token punctuation">,</span>                       AF_DISCV_ROUTE<span class="token punctuation">,</span>                       AF_DEFAULT_RADIUS <span class="token punctuation">)</span> <span class="token operator">==</span> afStatus_SUCCESS <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//其余省略 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成以上步骤 协调器的串口数据如下<br><img src="/medias/cd/zigbeeresult.jpg"></p><h5 id="数据处理和参考"><a href="#数据处理和参考" class="headerlink" title="数据处理和参考"></a>数据处理和参考</h5><p><a href="https://zhuanlan.zhihu.com/p/20082486">https://zhuanlan.zhihu.com/p/20082486</a><br>(<a href="https://oshwhub.com/Scarling/shen-tai-dian-sai-jian-yi-dong-zuo-bu-zhuo-shou-tao">https://oshwhub.com/Scarling/shen-tai-dian-sai-jian-yi-dong-zuo-bu-zhuo-shou-tao</a>)</p>]]></content>
      
      
      <categories>
          
          <category> Other-Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/15/cmake/"/>
      <url>/2022/10/15/cmake/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浅尝FreeRTOS</title>
      <link href="/2022/10/15/freertos/"/>
      <url>/2022/10/15/freertos/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文主要记录通过esp32学习裸机以及FreeRTOS<br>ESP32 主频高达240MHZ 还自带wifi…..<br>可以使用arduino和microPython开发 当然这两个在c工程面前都是玩具 但是可以快速验证想法<br>本次浅尝主要用c开发<br>环境：VSCode + ESP-IDF(插件)</p>]]></content>
      
      
      <categories>
          
          <category> EC-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FreeRTOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/2022/10/11/LS/"/>
      <url>/2022/10/11/LS/</url>
      
        <content type="html"><![CDATA[<h2 id="linux简介"><a href="#linux简介" class="headerlink" title="linux简介"></a>linux简介</h2><h2 id="linux系统编程"><a href="#linux系统编程" class="headerlink" title="linux系统编程"></a>linux系统编程</h2><h3 id="文件IO"><a href="#文件IO" class="headerlink" title="文件IO"></a>文件IO</h3><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><h2 id="linux网络编程"><a href="#linux网络编程" class="headerlink" title="linux网络编程"></a>linux网络编程</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> EC-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通信协议</title>
      <link href="/2022/10/11/tx/"/>
      <url>/2022/10/11/tx/</url>
      
        <content type="html"><![CDATA[<h2 id="MCU常用通信协议"><a href="#MCU常用通信协议" class="headerlink" title="MCU常用通信协议"></a>MCU常用通信协议</h2><h3 id="URAT-amp-amp-RS232-amp-amp-RS485"><a href="#URAT-amp-amp-RS232-amp-amp-RS485" class="headerlink" title="URAT &amp;&amp; RS232 &amp;&amp; RS485"></a>URAT &amp;&amp; RS232 &amp;&amp; RS485</h3><p>URAT： 通用异步收发器<br>空闲位：高电平<br>起始位：低电平 为了区分 高电平和空闲<br>数据位：先发低位 再发高位<br>校验位：校验数据的正确性 奇校验(odd)，偶校验(even)，0校验(space)，1校验(mark)以及无校验(noparity) 不能修正错误 可有可无 会影响通信速度<br>停止位：高电平 (1/1.5/2位) 不能没有<br>发十个字节 循环十次发送 不能连续发送<br>不能连续发送 一次最多发八位 不影响后面的<br>累计误差的出现 后面的会一直错<br>异步 收发双方 时钟不同步<br>uart控制器 需要设置一下相关寄存器就可以了<br>输入输出重定向 在linux下收到的串口 打印到<br>利用写好的发送和接收的基本函数 传入字符串等封装成函数<br>UART，全称为universal asynchronous receiver and transmitter，即通用异步收/发器；<br>USART，全称为universal synchronous asynchronous receiver and transmitter，即通用同步/异步收/发器。<br>顾名思义，UART只能用于异步串行通讯，而USART既能用于同步串行通讯，又能用于异步串行通讯。<br>这里的同步异步分别是指：<br>异步通信，指数据传送以字符为单位，字符与字符间的传送完全异步，位与位之间的传送基本上是同步的。<br>同步通信，是指数据传送以数据块（一组字符）为单位，字符与字符之间、字符内部的位与位之间都同步。<br>相对而言，异步通信效率较低，同步通信效率较高。</p><h4 id="RS232-RS485"><a href="#RS232-RS485" class="headerlink" title="RS232 RS485"></a>RS232 RS485</h4><p>物理层 电气层的协议 依赖于uart 传输速度 距离等提高<br>uart 缺点 : 电气接口不统一 没有定义接口的电气特性。<br>ttl电平 cpu电平<br>抗干扰能力差<br>数据传输容易出错<br>通信距离很短<br>rs232协议<br>规定采用标准的连接器<br>电气层做了优化 增加了传输距离<br>rs232用的最多的是三根线 rxd txd gud<br>信号 -5–15V 认为是1  +5-+15V 是低电平<br>提高了抗干扰能力 增大了通信距离 一般可达15M<br>ttl和232互相转换电平的芯片<br>电平转换芯片<br>rs232存在的问题<br>    需要转换电平芯片<br>    传输距离较短<br>rs485协议<br>特点：传输距离1500m、连接多个收发器 具有多站能力 可以建立一个设备网络</p><p>用差分信号进行传输 提高了抗干扰能力<br>兼容TTL电平<br>半双工 编程时需要加以处理</p><p>I2C规定了主机和从机的管理机制<br>rs485自己设定</p><h3 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h3><p>SPI (Serial Peripheral Interface) 串行外围设备接口。<br>高速 全双工 同步的通信总线<br>MISO     主设备输入从设备输出<br>MOSI     主设备输出从设备输入<br>SCLK     时钟  同步效果<br>CS       片选  chip select 用于寻址   cs可以用多条 cs1 cs2 cs3…………..<br>master   主设备<br>slave    从设备</p><h4 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h4><p>每个从设备跟主设备之间都用一个专属的cs线<br>主设备需要先向对应从设备的片选线使能信号(高低电平都可以)<br>高低电平使能判断<br>一般      cs(高电平有效)    /cs(低电平有效)<br>芯片手册</p><h4 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h4><p>先发高位 后发低位<br>高电平 1 低电平 0<br>一个字节传送完成后无需应答开始下一个字节传送<br>SPI总线采用同步方式工作 时钟线在上升沿或下降沿时发送，读取同理<br>八个时钟周期完成一个字节传输<br>没有起始信号和停止信号</p><h4 id="极性和相位"><a href="#极性和相位" class="headerlink" title="极性和相位"></a>极性和相位</h4><p>一共用四种工作模式<br>时钟极性设置时钟空闲时的电平<br>时钟相位设置读取数据和发送数据的时钟沿</p><h3 id="I2C"><a href="#I2C" class="headerlink" title="I2C"></a>I2C</h3><p>总线协议 半双工<br>SDA：串行数据线<br>SCL：串行时钟线<br>用于近距离、低俗的芯片之间的通信；有两跟双向的信号线，一根数据线sda用于收发数据，一根scl用于通信双方时钟同步；I2C总线硬件结构简单，成本较低，因此在各个领域得到了广泛的应用。<br>多主机总线，连接IIC总线上的器件分为主机和从机 主机有权发起和结束一次通信 而从机只能被主机呼唤 每个链接到IIC总线上的期间都有唯一的地址(7bit) ，每个都可以成为主机和从机(同一时刻只能有一个主机)，总线上的器件增加和删除不影响其他器件正常工作；<br>发送器：在通信总线上发送数据的器件<br>接收器：在通信总线上接收数据的器件</p><p>I2C总线存在三种状态：<br>1.空闲                SCL SDA 都为高电平<br>2.工作开始         此时SCL为高，而SDA出现下降沿<br>3.工作停止         此时SCL为高，SDA出现上升沿</p><p>同步信号<br>SCL管理发送和接收数据<br>SCL 低电平 发送器工作 在此期间 SDA数据线的信号 允许变化<br>SLC 高电平 接收器工作<br>每次都是一位 循环八次就是一个字节<br>IIC 总线读写过程：<br>1.主机发送从机地址(7bit)+0(0是写)，所有从机都会接收到这个信息，但是只有地址匹配的从机反馈一个ACK(0)，并准备后面的接收工作，其它地址不对的从机，’早点洗洗睡吧，没咱啥事儿了’。<br>2.主机收到这个ACK，开始发送内存地址(8bit),所有地址匹配的从机(前面说过，一个主机可以匹配多个从机，只要那从机地址相同就行)接收这个8bit的内存地址，在吩咐下去之后，给主机一个反馈ACK(0)，’我OK啦’。<br>3.主机收到这个ACK，开始发送数据给从机，一个字节8bit，从机接收完成，给主机反馈ACK(0)。<br>4.主机收到这个ACK，是继续发送数据，还是发送终止信号，取决于数据是否发送完毕。<br>IIC 总线读写过程：<br>1.主机发送从机地址(7bit)+0(0是写)，这里为啥又是写呢？首先，主机得找到这些从机呀，当然要将从机地址写给各个从机了。所有从机都会接收到这个信息，但是只有地址匹配的从机反馈一个ACK(0)，并准备后面的接收工作，其它地址不对的从机，’诶……早点洗洗睡吧，又没咱啥事儿了’。<br>2.主机接收到这个ACK，开始发送8bit的内存地址给从机，’把这个地址找到，把货给我取出来备着，我一会儿要从你这里提货啊!’。从机找好这些地址后，反馈一个ACK(0)给主机。<br>3.主机收到这个ACK，再发一次从机地址(7bit)，只不过这次最后一个换成1(读)了。从机收到并返回ACK(0)。<br>4.主机收到这个ACK，做好了接收从机信息的准备，这个时候从机信息到了，主机接收完信息后不对从机发送反馈(毕竟人家是老大啊，老大拿好了还要给小喽喽打个报告？)直接发起终止信号，心疼从机3秒钟。<br>1<br>先确认通信的从机<br>2<br>如果是发送数据 直接发送 发送完毕后 从机返回一个ack-0<br>如果是接收数据 再发一次地址和最后一位改为1(接收/读取状态) 从机返回一个ack-0<br>主机收完信息后不用ack给从机<br>补充：I2C通信协议允许暂停功能，就是在主机传输数据时，从机需要进行一个优先级高的事件时，从机通过拉低SCL，迫使主机等待，等到处理完紧急事件后，从机释放SCL，主机继续传输。<br>中断？</p><h2 id="物联网常用通信协议"><a href="#物联网常用通信协议" class="headerlink" title="物联网常用通信协议"></a>物联网常用通信协议</h2><h3 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h3><h3 id="ZigBee"><a href="#ZigBee" class="headerlink" title="ZigBee"></a>ZigBee</h3><h3 id="LoRa"><a href="#LoRa" class="headerlink" title="LoRa"></a>LoRa</h3><h3 id="NB-IoT"><a href="#NB-IoT" class="headerlink" title="NB-IoT"></a>NB-IoT</h3>]]></content>
      
      
      <categories>
          
          <category> EC-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux driver</title>
      <link href="/2022/09/16/LD/"/>
      <url>/2022/09/16/LD/</url>
      
        <content type="html"><![CDATA[<p>以及一些 本文记录驱动开发学习上的一些问题 </p>]]></content>
      
      
      <categories>
          
          <category> EC-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C</title>
      <link href="/2022/09/16/c/"/>
      <url>/2022/09/16/c/</url>
      
        <content type="html"><![CDATA[<p>记录c的一些基础知识</p><h2 id="内存5区"><a href="#内存5区" class="headerlink" title="内存5区"></a>内存5区</h2><h3 id="代码区"><a href="#代码区" class="headerlink" title="代码区"></a>代码区</h3><p>存放可执行代码</p><h3 id="全局存储区"><a href="#全局存储区" class="headerlink" title="全局存储区"></a>全局存储区</h3><p>存放所有全局变量和静态变量</p><h3 id="文字常量区"><a href="#文字常量区" class="headerlink" title="文字常量区"></a>文字常量区</h3><p>常量字符串,不可以修改,程序结束后由系统释放。</p><h3 id="堆区"><a href="#堆区" class="headerlink" title="堆区"></a>堆区</h3><p>一般由程序员分配释放，若不手动释放，程序结束时可能由操作系统回收。</p><h3 id="栈区"><a href="#栈区" class="headerlink" title="栈区"></a>栈区</h3><p>局部变量、函数形参，栈区变量的地址不可通过函数返回     </p><h2 id="段错误"><a href="#段错误" class="headerlink" title="段错误"></a>段错误</h2><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p>段错误是指访问的内存超出了系统给这个程序所设定的内存空间，例如访问了不存在的内存地址、访问了系统保护的内存地址、访问了只读的内存地址等等情况。</p><ol><li>访问不存在的内存地址</li><li>访问系统保护的内存地址</li><li>访问了只读的内存地址</li><li>栈溢出</li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串定义的三种方式"><a href="#字符串定义的三种方式" class="headerlink" title="字符串定义的三种方式"></a>字符串定义的三种方式</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> names1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//1 </span><span class="token keyword">char</span> names2<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//2         </span><span class="token keyword">char</span> <span class="token operator">*</span> names3 <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第一第二种 names1 names2将文字常量区的字符串拷贝到栈区<br>修改的方法 names1[i] = ‘x’;<br>         *(names1 + i) = ‘x’;<br>使用man函数 查看strncpy源码</p><pre class="line-numbers language-C"><code class="language-C">char *strncpy(char *dest, const char *src, size_t n){    size_t i;    for (i = 0; i < n && src[i] != '\0'; i++)        dest[i] = src[i];    for ( ; i < n; i++)        dest[i] = '\0';    return dest;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用的方法是 上面 names1[i] = ‘x’;</p><p>第三种 names3 一个栈区的指针 指向常量区的常量 可以再次赋值字符串常量</p><p>第三种赋值的方法 是否可以使用str函数呢 答案是不可以的<br><img src="/medias/C/charptr.jpg"></p><p>因为指向的内存是不能修改的文字常量区<br>修改的方法<br>names3 = “yyyyy”; （指向新的常量区）</p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>void：声明函数无返回值或无参数，声明无类型指针，显式丢弃运算结果<br>char：字符型类型数据，属于整型数据的一种<br>int：整型数据，通常为编译器指定的机器字长<br>float：单精度浮点型数据，属于浮点数据的一种<br>double：双精度浮点型数据，属于浮点数据的一种</p><h3 id="类型修饰符"><a href="#类型修饰符" class="headerlink" title="类型修饰符"></a>类型修饰符</h3><p>short：修饰int，短整型数据，可省略被修饰的int。<br>long：修饰int，长整形数据，可省略被修饰的int。<br>signed：修饰整型数据，有符号数据类型<br>unsigned：修饰整型数据，无符号数据类型</p><h3 id="复杂类型关键字"><a href="#复杂类型关键字" class="headerlink" title="复杂类型关键字"></a>复杂类型关键字</h3><p>struct：结构体声明<br>union：共用体声明<br>enum：枚举声明<br>typedef：声明类型别名<br>sizeof：得到特定类型或特定类型变量的大小</p><h3 id="存储级别关键字"><a href="#存储级别关键字" class="headerlink" title="存储级别关键字"></a>存储级别关键字</h3><p>auto：指定为自动变量，由编译器自动分配及释放。通常在栈上分配  默认不屑就是<br>static：指定为静态变量，分配在静态变量区，修饰函数时，指定函数作用域为文件内部<br>register：指定为寄存器变量，建议编译器将变量存储到寄存器中使用，也可以修饰函数形参，建议编译器通过寄存器而不是堆栈传递参数<br>extern：指定对应变量为外部变量，即在另外的目标文件中定义，可以认为是约定由另外文件声明的对象的一个“引用“<br>const：与volatile合称“cv特性”，指定变量不可被当前线程/进程改变（但有可能被系统或其他线程/进程改变）<br>volatile：与const合称“cv特性”，指定变量的值有可能会被系统或其他进程/线程改变，强制编译器每次从内存中取得该变量的值</p><h3 id="流程控制关键字"><a href="#流程控制关键字" class="headerlink" title="流程控制关键字"></a>流程控制关键字</h3><p>return：用在函数体中，返回特定值（或者是void值，即不返回值）<br>continue：结束当前循环，开始下一轮循环<br>break：跳出当前循环或switch结构<br>goto：无条件跳转语句</p><p>if：条件语句<br>else：条件语句否定分支（与if连用）<br>switch：开关语句（多重分支语句）<br>case：开关语句中的分支标记<br>default：开关语句中的“其他”分治，可选。</p><p>for：for循环结构，for(1;2;3)4;的执行顺序为1-&gt;2-&gt;4-&gt;3-&gt;2…循环，其中2为循环条件<br>do：do循环结构，do 1 while(2);的执行顺序是1-&gt;2-&gt;1…循环，2为循环条件<br>while：while循环结构，while(1) 2;的执行顺序是1-&gt;2-&gt;1…循环，1为循环条件</p><h3 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h3><p>存储类型 特征修饰 数据类型 变量名<br>列如： static volatile int value；</p>]]></content>
      
      
      <categories>
          
          <category> CS-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法</title>
      <link href="/2022/06/29/DSA/"/>
      <url>/2022/06/29/DSA/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h2><p>用python实现 原因:快速入门<br>在CPP中 甚至已经封装好了 晚点在C/CPP实现</p><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><h4 id="计算机思维三大关-递归、分治、平衡"><a href="#计算机思维三大关-递归、分治、平衡" class="headerlink" title="计算机思维三大关 递归、分治、平衡"></a>计算机思维三大关 递归、分治、平衡</h4><p>eee 《浪潮之巅》作者吴军博士说<br>一个人过不了递归这关 计算机这碗饭基本吃不了 这是计算机思维的第一个<br>我的高度来看 他还是有点东西的 虽然貌似他的风评不是很好</p><h5 id="汉罗塔问题"><a href="#汉罗塔问题" class="headerlink" title="汉罗塔问题"></a>汉罗塔问题</h5><pre class="line-numbers language-python3"><code class="language-python3">def hanoi(n, a, b, c):    if n > 0:        hanoi(n-1, a, c, b)        print("moving from %s to %s" % (a, c))        hanoi(n-1, b, a, c)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>算法的五大特性<br>输入: 算法具有0个或多个输入<br>输出: 算法至少有1个或多个输出<br>有穷性: 算法在有限的步骤之后会自动结束而不会无限循环，并且每一个步骤可以在可接受的时间内完成<br>确定性：算法中的每一步都有确定的含义，不会出现二义性<br>可行性：算法的每一步都是可行的，也就是说每一步都能够执行有限的次数完成</p><p>时间比空间重要 可以使用空间换时间</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>时间维度：是指执行当前算法所消耗的时间，我们通常用「时间复杂度」来描述。<br>时间复杂度指的是执行一个算法所需要的时间。 这不一定是一个确切的时间，通常，我们需要知道的是一个算法在最坏情况下执行（比如输入规模无限大）所需要的时间，也就是寻找算法执行时间的一个渐进上界来作为算法的时间复杂度，通过比较多个算法的这个上界，可以知道哪个算法执行比较快，哪个比较慢。</p><table><thead><tr><th>阶</th><th>时间复杂度</th></tr></thead><tbody><tr><td>常数阶</td><td>O(1)</td></tr><tr><td>对数阶</td><td>O(logN))</td></tr><tr><td>线性阶</td><td>O(n)</td></tr><tr><td>线性对数阶</td><td>O(nlogN)</td></tr><tr><td>平方阶</td><td>O(n²)</td></tr><tr><td>立方阶</td><td>O(n³)</td></tr><tr><td>立方阶</td><td>O(n^k)</td></tr><tr><td>指数</td><td>(2^n)</td></tr></tbody></table><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>空间维度：是指执行当前算法需要占用多少内存空间，我们通常用「空间复杂度」来描述。</p><p>空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度，记做S(n)=O. (f(n))。 比如直接插入排序的时间复杂度是O(n^2),空间复杂度是O(1) 。 而一般的递归算法就要有O(n)的空间复杂度了，因为每次递归都要存储返回信息。</p><h3 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h3><p>查找 (python 列表为例)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="利用循环-初始化列表"><a href="#利用循环-初始化列表" class="headerlink" title="利用循环 初始化列表"></a>利用循环 初始化列表</h1><h4 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">## 顾名思义  遍历</span><span class="token keyword">def</span> <span class="token function">liner_serch</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">:</span>            <span class="token keyword">return</span> i    <span class="token keyword">return</span> None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">## 二分查找的速度是暴力查找的指数倍</span><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    low <span class="token operator">=</span> <span class="token number">0</span>     hight <span class="token operator">=</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>     <span class="token keyword">while</span> low <span class="token operator">&lt;=</span> hight<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> hight<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> list<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">:</span>            <span class="token keyword">return</span> mid         <span class="token keyword">elif</span> list<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">:</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>         <span class="token keyword">else</span><span class="token punctuation">:</span>            hight <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">return</span> None <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>排序</p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">##  冒泡排序 每一轮遍历 把最大的放到最后得后</span><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span>  list<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 遍历 把最小的放到最前</span><span class="token keyword">def</span> <span class="token function">selection_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        min_index <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">:</span>                min_index <span class="token operator">=</span> j        list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 第一次遍历顺序  第二次遍历最小值弄到前面 二次遍历的索引需要跟前情况而定range(i, 0, -1)</span><span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        min_index <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">:</span>                min_index <span class="token operator">=</span> j        list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 递归思想 分治思想</span><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> list    pivot <span class="token operator">=</span> list<span class="token punctuation">[</span>len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 存比基准值小的数字   就是赋值一个列表</span>    left <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> list <span class="token keyword">if</span> x <span class="token operator">&lt;</span> pivot<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 存放基准值的列表</span>    middle <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> list <span class="token keyword">if</span> x <span class="token operator">==</span> pivot<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 存比基准值大的数字</span>    right <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> list <span class="token keyword">if</span> x <span class="token operator">></span> pivot<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 对除了存基准值的列表进行递归（为什么要用一个单独的列表去存基准值? 因为列表之间可以用+去拼接）</span>    <span class="token keyword">return</span> quick_sort<span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> middle <span class="token operator">+</span> quick_sort<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="堆排"><a href="#堆排" class="headerlink" title="堆排"></a>堆排</h4><ol><li>将待排序的数组初始化为大顶堆，该过程为建堆。</li><li>将堆顶元素与最后一个元素交换，除去最后一个元素外可以建立一个新的大顶堆。</li><li>由于第二部堆顶元素跟最后一个元素交换后，新建立的堆不是大顶堆，需要重新建立大顶堆。</li><li>重复上面流程，直到仅剩一个元素。</li></ol><p>比较难的一个排序 目前没能力空手敲 </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># 数组长度</span>    first <span class="token operator">=</span> int<span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 最后一个非叶子节点</span>    <span class="token keyword">for</span> start <span class="token keyword">in</span> range<span class="token punctuation">(</span>first<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 从最后一个非叶子节点开始调整</span>        max_heapify<span class="token punctuation">(</span>list<span class="token punctuation">,</span> start<span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 调整为大顶堆</span>    <span class="token keyword">for</span> end <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 从最后一个元素开始对序列进行调整</span>        list<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 交换</span>        max_heapify<span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> end<span class="token number">-1</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 调整为大顶堆</span>    <span class="token keyword">return</span> list <span class="token keyword">def</span> <span class="token function">max_heapify</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 堆调整</span>    root <span class="token operator">=</span> start   <span class="token comment" spellcheck="true"># 当前（子）树的根</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 循环调整</span>        child <span class="token operator">=</span> root <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 左子节点</span>        <span class="token keyword">if</span> child <span class="token operator">></span> end<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果左子节点超出范围，直接跳出</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> child <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> end <span class="token operator">and</span> list<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&lt;</span> list<span class="token punctuation">[</span>child<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果右子节点存在且大于左子节点</span>            child <span class="token operator">+=</span> <span class="token number">1</span>     <span class="token comment" spellcheck="true"># </span>        <span class="token keyword">if</span> list<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">&lt;</span> list<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果子节点大于根节点</span>            list<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>root<span class="token punctuation">]</span>            root <span class="token operator">=</span> child        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><h3 id="常用数据结构"><a href="#常用数据结构" class="headerlink" title="常用数据结构"></a>常用数据结构</h3><h4 id="栈、队列、双端队列"><a href="#栈、队列、双端队列" class="headerlink" title="栈、队列、双端队列"></a>栈、队列、双端队列</h4><h5 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h5><h5 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h5><h5 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h5><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>链表是一种在存储单元上非连续、非顺序的存储结构。数据元素的逻辑顺序是通过链表中的指针链接次序实现。链表是由一系列的结点组成，结点可以在运行时动态生成。每个结点包含两部分：数据域与指针域。数据域存储数据元素，指针域存储下一结点的指针。</p><h5 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h5><p>单向链表也叫单链表，是链表中最简单的形式，它的每个节点包含两个域，一个信息域（元素域）和一个链接域。这个链接指向链表中的下一个节点，而最后一个节点的链接域则指向一个空值。</p><p>单向链表的操作方法：<br>is_empty() 链表是否为空<br>length() 链表长度<br>items() 获取链表数据迭代器<br>add(item) 链表头部添加元素<br>append(item) 链表尾部添加元素<br>insert(pos, item) 指定位置添加元素<br>remove(item) 删除节点<br>find(item) 查找节点是否存在</p><p>节点定义：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data        <span class="token comment" spellcheck="true">#数据域</span>        self<span class="token punctuation">.</span>next <span class="token operator">=</span> None        <span class="token comment" spellcheck="true">#指针域</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>代码如下:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SingleLinkList</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_head <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_head <span class="token keyword">is</span> None    <span class="token keyword">def</span> <span class="token function">length</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            count <span class="token operator">+=</span> <span class="token number">1</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next        <span class="token keyword">return</span> count    <span class="token keyword">def</span> <span class="token function">items</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取head指针</span>        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head        <span class="token comment" spellcheck="true"># 循环遍历</span>        <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 返回生成器</span>            <span class="token keyword">yield</span> cur<span class="token punctuation">.</span>item            <span class="token comment" spellcheck="true"># 指针下移</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""向链表头部添加元素"""</span>        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 新结点指针指向原头部结点</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>_head        <span class="token comment" spellcheck="true"># 头部结点指针修改为新结点</span>        self<span class="token punctuation">.</span>_head <span class="token operator">=</span> node    <span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""尾部添加元素"""</span>        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 先判断是否为空链表</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 空链表，_head 指向新结点</span>            self<span class="token punctuation">.</span>_head <span class="token operator">=</span> node        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 不是空链表，则找到尾部，将尾部next结点指向新结点</span>            cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head            <span class="token keyword">while</span> cur<span class="token punctuation">.</span>next <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> node    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""指定位置插入元素"""</span>        <span class="token comment" spellcheck="true"># 指定位置在第一个元素之前，在头部插入</span>        <span class="token keyword">if</span> index <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 指定位置超过尾部，在尾部插入</span>        <span class="token keyword">elif</span> index <span class="token operator">></span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>length<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 创建元素结点</span>            node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>            cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head            <span class="token comment" spellcheck="true"># 循环到需要插入的位置</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            node<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> node    <span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""删除节点"""</span>        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head        pre <span class="token operator">=</span> None        <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 找到指定元素</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>item <span class="token operator">==</span> item<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 如果第一个就是删除的节点</span>                <span class="token keyword">if</span> <span class="token operator">not</span> pre<span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 将头指针指向头节点的后一个节点</span>                    self<span class="token punctuation">.</span>_head <span class="token operator">=</span> cur<span class="token punctuation">.</span>next                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 将删除位置前一个节点的next指向删除位置的后一个节点</span>                    pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 继续按链表后移节点</span>                pre <span class="token operator">=</span> cur                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""查找元素是否存在"""</span>        <span class="token keyword">return</span> item <span class="token keyword">in</span> self<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>循环链表、双向链表不表</p><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><h4 id="树"><a href="#树" class="headerlink" title="树"></a>树</h4><h5 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h5><p>节点定义：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BiTreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> lchild <span class="token operator">=</span> None<span class="token punctuation">,</span> rchild <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data        self<span class="token punctuation">.</span>lchild <span class="token operator">=</span> None        self<span class="token punctuation">.</span>rchild <span class="token operator">=</span> None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二叉树的遍历：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">## 前序遍历</span><span class="token keyword">def</span> <span class="token function">pre_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> root<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出根节点</span>        pre_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 输出根节点的左子树 先根节点 再左子树 再右子树 递归实现</span>        pre_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 同理</span><span class="token comment" spellcheck="true">## 中序遍历</span><span class="token keyword">def</span> <span class="token function">in_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> root<span class="token punctuation">:</span>        in_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>        in_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span><span class="token comment" spellcheck="true">## 后序遍历</span><span class="token keyword">def</span> <span class="token function">post_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> root<span class="token punctuation">:</span>        post_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>        post_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">## 层次遍历(用到了队列)</span><span class="token keyword">def</span> <span class="token function">level_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>    queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    <span class="token keyword">while</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        node <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> node<span class="token punctuation">.</span>lchild<span class="token punctuation">:</span>            queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>        <span class="token keyword">if</span> node<span class="token punctuation">.</span>rchild<span class="token punctuation">:</span>            queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h5><p>定义：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BSTNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data        self<span class="token punctuation">.</span>lchild <span class="token operator">=</span> None        self<span class="token punctuation">.</span>rchild <span class="token operator">=</span> None        self<span class="token punctuation">.</span>parent <span class="token operator">=</span> None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BST</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> li<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>root <span class="token operator">=</span> None        <span class="token keyword">if</span> li<span class="token punctuation">:</span>            <span class="token keyword">for</span> element <span class="token keyword">in</span> li<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>insert_no_rec<span class="token punctuation">(</span>element<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">## 插入 递归</span>    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> node <span class="token operator">==</span> None<span class="token punctuation">:</span>            node <span class="token operator">=</span> BSTNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">elif</span> val <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>data<span class="token punctuation">:</span>            node<span class="token punctuation">.</span>lchild <span class="token operator">=</span> self<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>node<span class="token punctuation">.</span>lchild<span class="token punctuation">,</span> val<span class="token punctuation">)</span>            node<span class="token punctuation">.</span>lchild<span class="token punctuation">.</span>parent <span class="token operator">=</span> node         <span class="token keyword">elif</span> val <span class="token operator">></span> node<span class="token punctuation">.</span>data<span class="token punctuation">:</span>            node<span class="token punctuation">.</span>rchild <span class="token operator">=</span> self<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>node<span class="token punctuation">.</span>rchild<span class="token punctuation">,</span> val<span class="token punctuation">)</span>            node<span class="token punctuation">.</span>lchild<span class="token punctuation">.</span>parent <span class="token operator">=</span> node         <span class="token keyword">return</span> node    <span class="token comment" spellcheck="true">## 插入</span>    <span class="token keyword">def</span> <span class="token function">insert_no_rec</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> self<span class="token punctuation">.</span>root         <span class="token keyword">if</span> <span class="token operator">not</span> p<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>root <span class="token operator">=</span> BSTNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>            <span class="token keyword">return</span>         <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> val <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>data<span class="token punctuation">:</span>                <span class="token keyword">if</span> p<span class="token punctuation">.</span>lchild<span class="token punctuation">:</span>                    p <span class="token operator">=</span> p<span class="token punctuation">.</span>lchild                <span class="token keyword">else</span><span class="token punctuation">:</span>                    p<span class="token punctuation">.</span>lchild <span class="token operator">=</span> BSTNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>                    p<span class="token punctuation">.</span>lchild<span class="token punctuation">.</span>parent <span class="token operator">=</span> p                    <span class="token keyword">return</span>            <span class="token keyword">elif</span> val <span class="token operator">></span> p<span class="token punctuation">.</span>data<span class="token punctuation">:</span>                <span class="token keyword">if</span> p<span class="token punctuation">.</span>rchild<span class="token punctuation">:</span>                    p <span class="token operator">=</span> p<span class="token punctuation">.</span>rchild                <span class="token keyword">else</span><span class="token punctuation">:</span>                    p<span class="token punctuation">.</span>rchild <span class="token operator">=</span> BSTNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>                    p<span class="token punctuation">.</span>rchild<span class="token punctuation">.</span>parent <span class="token operator">=</span> p                    <span class="token keyword">return</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>     <span class="token comment" spellcheck="true">## 中序遍历在二叉搜索树中 结果是按顺序的</span>    <span class="token keyword">def</span> <span class="token function">in_order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> root<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>in_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>in_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">## 查询 递归写法</span>    <span class="token keyword">def</span> <span class="token function">search_rec</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> node<span class="token punctuation">.</span>data <span class="token operator">&lt;</span> val<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>search_rec<span class="token punctuation">(</span>node<span class="token punctuation">.</span>rchild<span class="token punctuation">,</span> val<span class="token punctuation">)</span>        <span class="token keyword">elif</span> node<span class="token punctuation">.</span>data <span class="token operator">></span> val<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>search_rec<span class="token punctuation">(</span>node<span class="token punctuation">.</span>lchild<span class="token punctuation">,</span> val<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="图"><a href="#图" class="headerlink" title="图"></a>图</h4>]]></content>
      
      
      <categories>
          
          <category> CS-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data-structure algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/2022/06/29/SQL/"/>
      <url>/2022/06/29/SQL/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="MySQL概述"><a href="#MySQL概述" class="headerlink" title="MySQL概述"></a>MySQL概述</h4><p>通过sql操作数据库管理系统<br>数据库管理系统操作数据库/数据库中的数据</p><p>数据库：数据存储的仓库<br>数据库管理系统：操纵和管理数据库的大型软件<br>SQL：操作关系型数据库的编程语言，是一套标准</p><p>关系型数据库(RDBMS)<br>建立在关系模型的基础上，由多张相互连接的二维表组成的数据库<br>![[关系型数据库.png]]</p><p>![[数据库服务器管理系统数据库.png]]<br>通过客户端连接数据库管理系统(DBMS)<br>使用SQL语句 通过数据库管理系统 操作数据库<br>一个数据服务器中 可以创建多个数据库<br>一个数据库中 可以创建多个表格(二维表)</p><h4 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h4><h4 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h4><h5 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h5><p>data definition language·<br>数据定义语言 用来定义数据库对象</p><pre class="line-numbers language-mysql"><code class="language-mysql">## 在数据库内 创建表create table database_name_user(    name varchar(10) COMMENT 'name',     ht int COMMENT 'ht',     mq int COMMENT 'gas')COMMENT 'user_table';## 显示数据库内的表show tables;## 参看指定表结构 desc database_name_user;show create table database_name_user;## show create table database_name_user; 结果CREATE TABLE `database_name_user` (  `name` varchar(10) DEFAULT NULL COMMENT 'name',  `ht` int(11) DEFAULT NULL COMMENT 'ht',  `mq` int(11) DEFAULT NULL COMMENT 'gas') ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='user_table'## 数据类型数值类型字符串类型create table database_name_user(    name varchar(10) COMMENT '名字',     ht smallint COMMENT '温湿度',     mq smallint COMMENT '气体',    score DOUBLE COMMENT '分数')COMMENT 'user_table';create table emp_table(    id int comment '编号',    name varchar(10) comment '姓名',    age TINYINT UNSIGNED,    idcard  char(18) comment '身份证号',    entrydata  date comment '入职时间') comment '员工信息表';show tables;desc emp_table;## 表结构的修改### 添加字段alter table emp_table  add add_char varchar(20);desc emp_table;### 删除alter table emp_table drop ziduanname;### 修改# 修改字段的数据类型alter table emp_table modify add_char varchar(5);desc emp_table;## 建议直接用changealter table emp_table change add_char add_rename char;desc emp_table;# 修改字段名和字段类型### 修改表名alter table emp_table rename to emp_rename;desc emp_table;desc emp_rename;## 删除表## 如果存在删除 不存在也不报错drop table if exists emp_table;  ## 删除表 重新建表 但是里面数据没有了 留下表结构create table emp_table(    id int comment '编号',    name varchar(10) comment '姓名',    age TINYINT UNSIGNED,    idcard  char(18) comment '身份证号',    entrydata  date comment '入职时间') comment '员工信息表';truncate table emp_table;desc emp_table;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结<br>![[DDL总结.png]]</p><h5 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h5><p>manipulateion<br>数据操作语言 用来对数据库表中的数据进行增删改<br>插入<br>修改</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 给指定字段添加数据insert  into table_name () values ();一一对应-- 给全部字段添加数据insert into table_name values ();-- 批量添加数据 -- 批量指定insert  into table_name () values (),(),();-- 批量全部insert  into table_name  values (),(),();insert into emp_table (id, name , age) values (123,'fengle', 99); desc emp_table;select * from emp_table;insert into emp_table values (123,'fengle', 99, '441223200704010234', '2022-01-01');-- 添加多条 每条记录之间 添加逗号即可-- 修改数据 update table set 字段1 = 字段名  where id = 1update emp_table set name = 'fengle' where idcard = 441223200704010234;update emp_table set name = 'fengkai', age = 89 where idcard = 441223200704010234;-- 修改一个属性的所有数据update emp_table set entrydata = '2022-06-01';-- 没有where条件 会更新整张表该属性的记录-- 删除数据delete from emp_table where age = 89;-- 删除所有数据  表结构还在delete from emp_table;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结<br>添加数据<br>insert into table_name  xxxx values xxxx;</p><p>修改数据<br>update table_name xxxx values;</p><p>删除数据<br>delete from tabe_name where condition;</p><h5 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h5><p>query<br>数据查询语言 用来查询数据库表中的数据<br>![[条件查询运算符.png]]<br>![[聚合函数.png]]</p><pre class="line-numbers language-mysql"><code class="language-mysql">select * from emp_table;DQL 语法SELECT            字段列表FROM            表名列表        WHERE            条件列表    GROUP BY            分组后条件列表    HAVING             排序字段列表    ORDER BY            排序字段列表    LIMIT                    分页参数基本查询条件查询聚合函数分组查询拍讯查询分页查询-- 查询多个字段select 字段1, 字段2,·····, from table_name;select * from table_name;-- 设置别名  查询结果显示的字段名称自定义select 字段1 as 别名1, 字段2 as 别名2,·····, from table_name;-- 去除重复记录 + distinct select distinct 字段列表 from table_name;select * from emp_table; -- 查询emp_table中 字段name age 的所有字段select  name, age from emp_table;-- 查询emp_table中 字段name的所有字段 重复不返回select distinct name from emp_table;-- 查询emp_table中 字段name age 的所有字段 重复不返回select distinct name, age from emp_table;如果name 相同 age有不同  select distinct name  select distinct name, age 放回结果有不同select     distinct name as '姓名', age as '年龄'from         emp_table-- conditionwhere     name = 'fengle';所有为 * 开发当中 尽量不要写* -- 条件查询 WHERE-- 条件比较运算符select     distinct name as '姓名', age as '年龄'from         emp_table-- conditionwhere     age = 89;-- 其它运算符 同理查询没有改字段的信息的select     *from         emp_table-- conditionwhere     idcard is null;-- 这里是 IS 不是 = -- 范围查询select     *from         emp_table-- conditionwhere     age >= 89 && age <= 99 && name = 'fengle';    where     age 89 and 99 && name = 'fengle';--  between 闭区间-- conditionwhere     age >= 89 && age <= 99 && name = 'fengle';        age = 89  or age =  99 && name = 'fengle';    --  between 闭区间模糊匹配 6个下划线 6个字符select * from emp_table where name like '______';8个下划线 8个字符select * from emp_table where name like '________';查询 idcaed 最后一位是x的员工前面多少是很么不管 最后一位是x就可以select * from emp_table where idcard like '%x';如果用下划线 前面就是17个斜划线select * from emp_table where idcard like '_____x';insert into emp_table values (1312,'fengle', 77, '44122320070401023x', '2022-01-01');查询 名字select * from emp_table;-- 聚合函数将一列数据作为一个整体 进行纵向的计算作用与字段 就是 整个表的某一列数据NULL值 不参与聚合函数的计算select count(*) from emp_table;select count(idcard) from emp_table;select avg(age) from emp_table;select min(age) from emp_table;select sum(age) from emp_table where name = 'fengle';-- 分组查询select     字段列表 from table_name where        conditiongroup by         分组名字名HAVING        分组后过滤条件;where 和 HAVING的区别:执行时机不一样 where 是分组之前进行过滤，不满足where条件 不参与分组 而HAVING之后过滤的判断条件不一样 where 不能对聚合函数进行判断 而having可以select * from emp_table;根据一个字段分组 分别求它们的某一个特性(最大值 求和等)select idcard , count(idcard) from emp_table group by idcard;select name , avg(age)  from emp_table group by name;查询过滤select fromwhere 查询后过滤和整理group by ## 查询 名字为fengle 年龄大于77 的个数 select         name as '名字',      count(*) as '人数'from        emp_tablewhere         age > 77group by        nameHAVING        name = 'fengle';需要主要注意的是执行顺序where 再到 聚合函数 再到 havingselect * from emp_table;-- 排序查询select * from emp_table order by age desc;select * from emp_table order by age asc, entrydata asc;如果是多字段排序 优先级 按顺序desc 降序asc 升序-- 分页查询limit 关键字 起始索引  = (页码 - 1) * 每一页展示的记录数 select 字段 from table_name limit 起始索引,  查询记录数;select * from emp_table;select * from emp_table limit 2, 2; 需要注意的是 不同的数据库 分页查询不一样 mysql中用到的是关键字limit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DQL 语句的执行顺序</p><pre class="line-numbers language-mysql"><code class="language-mysql">4 SELECT            字段列表1 FROM            表名列表        2 WHERE            条件列表    3 GROUP BY            分组后条件列表      HAVING             排序字段列表    5 ORDER BY            排序字段列表    6 LIMIT                    分页参数            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用别名的时候 可以按照执行顺序 产生相关代码</p><p>总结</p><pre class="line-numbers language-mysql"><code class="language-mysql">select * from emp_table;DQL 语法SELECT            字段列表  as 别名FROM            表名列表  as 别名    WHERE            条件列表    运算符GROUP BY            分组后条件列表    HAVING             排序字段列表    分组过滤之后ORDER BY            排序字段列表    升序 asc 降序 descLIMIT                    分页参数   两个参数 起始索引 每页展示数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h5><p>control<br>数据控制语言 用来创建数据库用户 控制数据库的访问权限<br>用来管理数据库用户 控制数据库的访问权限</p><p>通过用户 访问mysql服务器<br>每个用户可以设置不同的访问权限</p><p>DCL 控制 有那些用户访问mysql服务器<br>可以操作 哪几个数据库</p><p>DCL - 用户管理</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 查询用户use mysql;select * from user;-- 创建用户create user 'user_name'@'host' identified by 'passwd'host 填% 代表任意主机都可以访问-- 修改用户密码alter user 'user_fengle'@'localhost' identified with mysql_native_password by '1234';-- 删除用户drop user 'user_fengle'@'localhost';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DCL 权限控制<br>![[DCL权限控制.png]]</p><pre class="line-numbers language-mysql"><code class="language-mysql">DCL - 权限控制-- 查询权限show grants for 'user_fengle'@'localhost';-- 授予权限grant all ON fengle_test.emp to 'user_fengle'@'localhost';grant all ON *.* to 'user_name'@'host';*.* 代表给此用户 所有数据库的所有表的权限 就是root 用户了 超级管理员-- 撤销权限revoke all on fengle_test.emp from 'user_fengle'@'localhost';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>root 用户可以访问所有数据库的所有表格<br>创建用户 创建表 设置用户权限<br>总结<br>用户管理<br>权限控制<br>DBA对DCL需要掌握 开发人员一般不用</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>函数有字符函数 数值函数 日期函数 流程函数 在select中执行<br>函数可以嵌套</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 字符函数select concat('Hello', 'MySQL');select upper('Hello');select lower('Hello');select lpad('fengle', 10, 'x');select rpad('fengle', 10, 'x');select ' sssss ';select trim(' sssss ');select substring(rpad('fengle', 10, 'x'), 1, 7);select substring('fengle', 1, 6);-- 索引值从1开始引用 update emp_table set name = rpad(name, 6, 'e');select * from emp_table;-- 数值函数ceil(x) 向上取整floor(x) 向下取整mod(x,y) 返回x/y 的模rand() 返回0—1内的随机数round(x,y) 求参数x的四舍五入的值 保留y位小数select ceil(9.54);select floor(9.54);select mod(9, 2);select rpad(round(rand() * 100000, 0), 6, '0');select round(9.99903,4);-- 日期函数curdate()             返回当前日期curtime()                返回当前时间now()                 返回当前日期和时间year(date)            获取指点年month(date)day(date)date_add(date, interval expr type) 返回一个日期/时间值加上一个时间间隔expr后的时间值datediff(date1, date2)    返回起始时间data1 和 date2 之间的天数select curdate();select curtime();select year(curdate());select  datediff('2022-05-31', '2023-05-31');select  datediff(date_add(now(), interval 70 day), now());select date_add(now(), interval 70 year);根据时间差 列出姓名 显示为降序排序select     name, datediff(curdate(), entrydata) as 'entrydatas' from     emp_tableorder by     entrydatas desc;    -- 流程函数IF(value , t , f) 如果value为true 则返回0 否则返回1select if(true, 'fengle', 'fenglee');select ifnull('ok', 'fengle');select ifnull(null, 'fengle');case when [val1] then [res1], 多个 逗号区分, else [default]  end select * from emp_table;select     age,     (case name when 'fengle' then '一流的名字'      when 'zhange' then '二流的名字'    else '其它名字'    end)    as '名字' from emp_table;-- 大于90岁为老东西  否则为年轻人select     name,     (        case          when age>=90 then '老东西'          when age<90 then '年轻人'          end    ) as '芳龄',    (        case          when id>123 then '错误的'          when id<=123 then '正确的'          end    ) as 'id分类' from emp_table;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><p>概述<br>约束是作用域表中字段删的规则 用于限制存储在表中的数据<br>约束的是表格的结构 对其插入 删除等 进行约束<br>目的：<br>保证数据库中数据的正确、有效性和完整性<br>分类：<br>非空约束<br>唯一约束<br>主键约束   非空唯一<br>默认约束   字段采用默认值<br>检查约束     保证字段值满足某一个条件<br>外键约束      用来让两张表的数据之间建立连接，保证数据的一致性和完整性  键约束条件 至少两张表</p><pre class="line-numbers language-mysql"><code class="language-mysql">有约束条件的表结构create table emp_2(    id int primary key auto_increment comment '主键',    name varchar(10) not null comment '姓名',    age int check (age > 0 && age <= 120) comment '年龄',    status char(1)  default '1' comment '状态 ',    gender char(1) comment '性别') comment '用户表';select * from emp_2;insert into emp_2(name, age, status, gender)values('fengle', 19, '1', '男');## 数据库的插入 会根据约束过滤外键约束具有外键的这张表 称为子表外键关联的这张表 称为父表建立外键关联alter table 子表 add constraint 父亲 foreign key ()references 有约束条件的表结构create table emp_3(    id int primary key auto_increment comment '主键',    name varchar(10) not null comment '姓名',    age int check (age > 0 && age <= 120) comment '年龄',    status char(1)  default '1' comment '状态 ',    gender char(1) comment '性别',    dept_id int comment '部门ID') comment '有外键用户表';create table emp_4(    id int primary key auto_increment comment '主键',    name varchar(10) not null comment '姓名') comment '外键表';insert into emp_3(name, age, status, gender, dept_id)values('fengla', 20, '1', '男', 2);insert into emp_4(name)values('销售部');alter table emp_3 add constraint fk_emp_3_dept_id foreign key (dept_id) references emp_4(id);## 外键删除/更新行为alter table emp_3 add constraint fk_emp_3_dept_id foreign key (dept_id) references emp_4(id);cascade 当父表中删除/更新对应记录时 首先检查改记录是否有对应外键 如果有则也删除/更新 子表的外键记录set NULL 当父表中删对应记录时 首先检查改记录是否有对应外键如果有外键会设置为NULLalter table emp_3 add constraint fk_emp_3_dept_id foreign key (dept_id) references emp_4(id) on update cascade on delete cascade;alter table emp_3 add constraint fk_emp_3_dept_id foreign key (dept_id) references emp_4(id) on update  set null on delete cascade;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4>]]></content>
      
      
      <categories>
          
          <category> CS-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习(兴趣记录)</title>
      <link href="/2022/06/03/ML/"/>
      <url>/2022/06/03/ML/</url>
      
        <content type="html"><![CDATA[<h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><p>感兴趣是因为<br>都在吹人工智能 深度学习 神经网络 大数据····<br>真正进入这个行业的门槛却很高<br>数学基础和学历的要求都是不低的<br>所以只能是兴趣点</p><p>记得第一次老师提问我线性回归是什么<br>我给出的回答是一条线 坐标系的点贴近这条线 如今回想起来确实尬得失禁!<br>现在我给出的回答可能是:<br>特征值与目标值之间可以一个线性方程 f(x) = WTX + b (WT = 列向量)<br>可以是一条线一个平面或者是一个超平面<br>尽量让这个线性方程拟合数据的标准 我们采用的是均方差(损失函数)<br>算法要做的就是让这个均方差最小<br>可以采用 最小二乘法和梯度下降法<br>还是很笼统 不说了 尬住了 哈哈哈</p><h3 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h3><p>发展史和一些关系 暂不表<br>机器学习是从数据中自动分析获得模型，并利用模型对未知数据进行预测。</p><p>给定一个样本特征,我们希望预测其对应的属性值,如果是离散的,那么这就是一个分类问题，<br>反之，如果是连续的实数,这就是一个回归问题。</p><p>如果给定一组样本特征,我们没有对应的属性值,而是想发掘这组样本在维空间的分布,<br>比如分析哪些样本靠的更近，哪些样本之间离得很远,这就是属于聚类问题。</p><p>如果我们想用维数更低的子空间来表示原来高维的特征空间,<br>那么这就是降维问题。<br>算法主要有 线性 回归 聚类三种 好像是吧</p><p>在数据集中一般：<br>一行数据我们称为一个样本<br>一列数据我们称为一个特征<br>有些数据有目标值（标签值），有些数据没有目标值</p><p>数据类型构成：<br>数据类型一：特征值+目标值（目标值是连续的和离散的）<br>数据类型二：只有特征值，没有目标值</p><p>数据分割：<br>机器学习一般的数据集会划分为两个部分：<br>训练数据：用于训练，构建模型<br>测试数据：在模型检验时使用，用于评估模型是否有效<br>划分比例：<br>训练集：70% 80% 75%<br>测试集：30% 20% 25% 等</p><p>机器学习算法<br>机器学习算法可以大致分为以下三种类型之一：</p><p>监督学习<br>是一种机器学习任务，建立输入X和输出Y变量之间的数学（映射）关系。这样的(X、Y)对构成了用于建立模型的标签数据，以便学习如何从输入中预测输出。<br>在监督学习中，两个常见的机器学习任务包括分类和回归。</p><p>无监督学习<br>是一种只利用输入X变量的机器学习任务。X变量是未标记的数据，学习算法在建模时使用的是数据的固有结构。</p><p>强化学习<br>是一种决定下一步行动方案的机器学习任务，它通过试错学习（trial and error learning）来实现这一目标，努力使reward回报最大化。</p><h3 id="机器学习工作流程总结"><a href="#机器学习工作流程总结" class="headerlink" title="机器学习工作流程总结"></a>机器学习工作流程总结</h3><p>1.获取数据<br>2.数据基本处理<br>即对数据进行缺失值、去除异常值等处理<br>3.特征工程<br>特征工程是使用专业背景知识和技巧处理数据，使得特征能在机器学习算法上发挥更好的作用的过程。<br>特征工程包括<br>特征提取<br>特征预处理<br>特征降维<br>4.机器学习(模型训练)<br>5.模型评估</p><h3 id="机器学习的几个算法-课程主要内容-传统"><a href="#机器学习的几个算法-课程主要内容-传统" class="headerlink" title="机器学习的几个算法(课程主要内容) 传统"></a>机器学习的几个算法(课程主要内容) 传统</h3><p>手推这些算法 估计要等一段时间 先了解大概<br>毕竟本人线代和概率的知识不够 推导会卡很久 </p><h4 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h4><p>解决问题: 回归<br>线性回归模型是利用线性函数对一个或多个自变量和因变量（y）之间关系进行拟合的模型。<br>优化目标: 均方差<br>优化算法: 梯度下降法 最小二乘法</p><h4 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h4><p>解决问题: 分类<br>线性回归+sigmoid函数<br>优化目标: 最大化似然函数<br>优化算法: 梯度下降法 </p><h4 id="KNN-K-最近邻算法"><a href="#KNN-K-最近邻算法" class="headerlink" title="KNN(K-最近邻算法)"></a>KNN(K-最近邻算法)</h4><p>解决问题: 分类和回归<br>优化目标: 没有吧<br>算法: 暴力循环 或者 构造合适的数据结构或者算法 提高速度</p><p>简述算法过程：<br>计算待分类点与已知类别的点之间的距离（这个距离需要一个标准 比如欧式距离 求相关性等）<br>按照距离递增次序排序<br>选取与待分类点距离最小的K个点<br>确定前K个点所在类别的出现次数(分类问题)  或者  求均值(回归问题) 中间可以根据距离 加权重<br>返回前K个点出现次数最高的类别作为待分类点的预测分类</p><h4 id="PCA-主成分分析法-课堂上唯一讲过的一个数据处理的算法"><a href="#PCA-主成分分析法-课堂上唯一讲过的一个数据处理的算法" class="headerlink" title="PCA 主成分分析法 (课堂上唯一讲过的一个数据处理的算法)"></a>PCA 主成分分析法 (课堂上唯一讲过的一个数据处理的算法)</h4><p>PCA算法实现一般流程：　　　　<br>对数据进行归一化处理；<br>计算归一化后的数据集的协方差矩阵；<br>计算协方差矩阵的特征值和特征向量；<br>保留最重要的k个特征（通常k要小于n）；<br>找出k个特征值相应的特征向量<br>将m * n的数据集乘以k个n维的特征向量的特征向量（n * k）,得到最后降维的数据。</p><h4 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h4><p>朴素贝叶斯的核心思想: 是每个条件独立的</p><p>对每个类别计算先验概率P(y)<br>对每个类别计算条件概率P(x|y)<br>对每个类别计算后验概率P(y|x)  根据贝叶斯公式 计算的是P(x|y)p(y)<br>取最大值作为预测结果<br>离散和连续的数据 处理的方法不同 连续需要引用概率密度函数<br><img src="/medias/ML/GNB.png" alt="朴素贝叶斯推导过程"></p><p>贝叶斯公式不单单是一个公式 他表达的意思其实非常深刻</p><h4 id="SVM-支持向量机"><a href="#SVM-支持向量机" class="headerlink" title="SVM(支持向量机)"></a>SVM(支持向量机)</h4><p>解决问题: 二分类<br>这个算法要弄懂 比其他5个加起来估计还要难 课堂上我tamiao听到直接睡着了</p><h4 id="K-means"><a href="#K-means" class="headerlink" title="K-means++"></a>K-means++</h4><p>k均值聚类算法（k-means clustering algorithm）是一种迭代求解的聚类分析算法，其步骤是，预将数据分为K组，则随机选取K个对象作为初始的聚类中心，然后计算每个对象与各个种子聚类中心之间的距离，把每个对象分配给距离它最近的聚类中心。 聚类中心以及分配给它们的对象就代表一个聚类。</p><p>首先确认k值 k就是分类的种数<br>人为/随机 的选取k的中心点<br>根据这些中心点 计算样本和这k个点的距离<br>算完后分类完成 根据类内的样本出重新计算k值的中心点<br>一直迭代到分类没有变化<br>就是完成了分类</p><h4 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h4><h4 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h4><h4 id="集成学习"><a href="#集成学习" class="headerlink" title="集成学习"></a>集成学习</h4><h3 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h3><h4 id="卷积神经网络-–-CNN"><a href="#卷积神经网络-–-CNN" class="headerlink" title="卷积神经网络 – CNN"></a>卷积神经网络 – CNN</h4><h4 id="生成对抗网络-–-GANs"><a href="#生成对抗网络-–-GANs" class="headerlink" title="生成对抗网络 – GANs"></a>生成对抗网络 – GANs</h4>]]></content>
      
      
      <categories>
          
          <category> Other-Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine-Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人项目</title>
      <link href="/2022/05/06/project/"/>
      <url>/2022/05/06/project/</url>
      
        <content type="html"><![CDATA[<h2 id="基于linux的语音识别项目-科大讯飞离线端"><a href="#基于linux的语音识别项目-科大讯飞离线端" class="headerlink" title="基于linux的语音识别项目(科大讯飞离线端)"></a>基于linux的语音识别项目(科大讯飞离线端)</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>该项目是在linux下科大讯飞离线包和虚拟LCD的基础上完成</p><h4 id="涉及的知识"><a href="#涉及的知识" class="headerlink" title="涉及的知识:"></a>涉及的知识:</h4><ul><li>linux基本操作/常用命令</li><li>C语言基础</li><li>TCP/IP(socket网络编程)</li><li>多线程编程</li><li>makefile</li><li>linux简单驱动调用</li></ul><h4 id="工程文件结构"><a href="#工程文件结构" class="headerlink" title="工程文件结构"></a>工程文件结构</h4><p><img src="/project/gcwj.jpg"></p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>本次开发是在windows下的vscode通过ssh插件远程开发<br>linux版本为ubuntu16.04 在VMware下运行<br>需要在虚拟机配置好网卡 alsa声音库等 保证tcp通信 和 声音播放以及录入<br>工程文件如上图 需要编写好makefile(工程较小 没用cmake) 以及配置好文件夹</p><h3 id="配置模拟LCD驱动"><a href="#配置模拟LCD驱动" class="headerlink" title="配置模拟LCD驱动"></a>配置模拟LCD驱动</h3><p>模拟只是为了实现两个功能：<br>图像化界面的显示 —- lcd<br>触摸屏按钮的功能 —- 触摸屏</p><h4 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h4><p><img src="/project/lcd1.jpg"></p><ol><li>进入lcd驱动文件夹 cd  mmap_drv  </li><li>sudo make clean 和 sudo make 清除以及重新编译</li><li>安装驱动 sudo insmod mmp_drv.ko</li><li>进入模拟器目录 重复以上步骤</li></ol><h3 id="客户端与科大讯飞端建立稳定的TCP通信"><a href="#客户端与科大讯飞端建立稳定的TCP通信" class="headerlink" title="客户端与科大讯飞端建立稳定的TCP通信"></a>客户端与科大讯飞端建立稳定的TCP通信</h3><ol><li>打开科大讯飞本地离线包端</li><li>配置语言ID<br><img src="/project/kdxf1.jpg" alt="科大讯飞离线端开启成功"></li><li>测试<br><img src="/project/kdxf2.jpg" alt="与科大讯飞通信成功"></li></ol><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>三个进程</p><ul><li>终端1: 科大讯飞语音识别端</li><li>终端2: 虚拟lcd驱动端</li><li>终端3: 主程序</li></ul><p><img src="/project/result1.jpg"></p><p>通过语音控制客户端 功能有画图 视频播放 音乐等等<br><img src="/project/result2.jpg"></p><h2 id="基于linux和qt的聊天室"><a href="#基于linux和qt的聊天室" class="headerlink" title="基于linux和qt的聊天室"></a>基于linux和qt的聊天室</h2><h2 id="基于stm32的平衡小车-PID-amp-amp-freertos"><a href="#基于stm32的平衡小车-PID-amp-amp-freertos" class="headerlink" title="基于stm32的平衡小车(PID &amp;&amp; freertos)"></a>基于stm32的平衡小车(PID &amp;&amp; freertos)</h2><h2 id="基于zigbee和mqtt的宿舍防火防盗-物联网"><a href="#基于zigbee和mqtt的宿舍防火防盗-物联网" class="headerlink" title="基于zigbee和mqtt的宿舍防火防盗(物联网)"></a>基于zigbee和mqtt的宿舍防火防盗(物联网)</h2><h2 id="基于imx6ull的视频监控"><a href="#基于imx6ull的视频监控" class="headerlink" title="基于imx6ull的视频监控"></a>基于imx6ull的视频监控</h2>]]></content>
      
      
      <categories>
          
          <category> Other-Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT</title>
      <link href="/2022/04/27/QT/"/>
      <url>/2022/04/27/QT/</url>
      
        <content type="html"><![CDATA[<h2 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h2><h3 id="安装注意事项"><a href="#安装注意事项" class="headerlink" title="安装注意事项"></a>安装注意事项</h3><h4 id="QT-VS2019安装-MSVC2017-X64"><a href="#QT-VS2019安装-MSVC2017-X64" class="headerlink" title="QT+VS2019安装 (MSVC2017 X64)"></a>QT+VS2019安装 (MSVC2017 X64)</h4><p>安装好qt后 5.9为例 必须点击MSVC2017组件<br>打开vs2019 安装扩展 QT Visual Studio Tools<br>安装完成后配置 add qt versions 到 qt文件下下的MSVC2017<br>配置完成<br><img src="/medias/qt/qtpath.png" alt="配置图"></p><h4 id="release-amp-debug"><a href="#release-amp-debug" class="headerlink" title="release &amp; debug"></a>release &amp; debug</h4><p>调试版本通常更慢、更大，并且占用更多内存。它们具有调试符号，使调试成为可能且更简单。发布版本被剥离了所有非生产信息。</p><h4 id="需要注意"><a href="#需要注意" class="headerlink" title="需要注意"></a>需要注意</h4><p>调试构建需要更多时间，因此有时您可能会选择在发布模式下进行开发，如果您偶然发现问题，您可以并且应该始终进行调试构建，这将允许您将代码作为您的程序执行。在调试模式下，您可以在程序的任何位置添加断点，此时执行将停止，您可以继续逐行执行、步入和退出函数、不同的源代码等，同时观察内存中的变量和许多其他工具可帮助您查明代码中的错误。<br>通常，如果一个应用程序在调试中工作但在发布中没有工作，那是因为某些变量或内存没有正确设置为初始值。<br>在调试版本中，变量和内存通常设置为零，但在发布时跳过此步骤以节省时间。额外的数据也被添加到对象周围并分配内存作为检测内存覆盖的屏障。<br>所以千万要记住初始化变量<br>有时（很少）发布构建中的优化会引入错误<br>最大的问题就是 debug运行正常的程序 切换为release时 编译错误 或者 运行时发生错误 那就gg了</p><h4 id="添加需要的模块"><a href="#添加需要的模块" class="headerlink" title="添加需要的模块"></a>添加需要的模块</h4><p>在qtcreator开发时 添加模块需要到pro文件中+=(模块名字) vs中则不需要 直接添加即可<br><img src="/medias/qt/qtmodel.png" alt="添加需要项目"></p><h4 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//头文件处添加</span><span class="token macro property">#<span class="token directive keyword">pragma</span> execution_character_set("utf-8")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="打开控制台-方便调试"><a href="#打开控制台-方便调试" class="headerlink" title="打开控制台 方便调试"></a>打开控制台 方便调试</h4><p><img src="/medias/qt/qtconsole.png"></p><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>将VS2019 工程文件relese下的exe 拷贝到任意文件夹<br>QT控制台(msvc 2017 64-bit) cd 到文件夹下<br>执行 windeployqt xxxxx.exe<br>在文件夹下可以找到exe 打包完成</p><h3 id="基础快速飞过"><a href="#基础快速飞过" class="headerlink" title="基础快速飞过"></a>基础快速飞过</h3><h4 id="快速介绍"><a href="#快速介绍" class="headerlink" title="快速介绍"></a>快速介绍</h4><p>Qt 是一个跨平台的 C++ 应用程序开发框架。它提供给开发者建立图形用户界面所需的功能，广泛用于开发 GUI 程序，也可用于开发非 GUI 程序。使用 Qt，在一定程度上你获得的是一个 “一站式” 的解决方案：不再需要研究 STL，不再需要 C++ 的 <string>，不再需要到处去找解析 XML、连接数据库、访问网络的各种第三方库，因为 Qt 自己内置了这些技术。<br>优点：<br>    跨平台 容易扩展<br>    面向对象 好的封装机制 模块化强<br>    丰富的API<br>    提供很多模板 stl<br>    支持2/3D渲染 支持opengl<br>    xml支持 大量开发文档</string></p><h5 id="创建一个按钮的新窗口-amp-amp-对象树概念-amp-amp-信号和槽—连接函数-QT最重要的函数"><a href="#创建一个按钮的新窗口-amp-amp-对象树概念-amp-amp-信号和槽—连接函数-QT最重要的函数" class="headerlink" title="创建一个按钮的新窗口 &amp;&amp; 对象树概念 &amp;&amp; 信号和槽—连接函数(QT最重要的函数)"></a>创建一个按钮的新窗口 &amp;&amp; 对象树概念 &amp;&amp; 信号和槽—连接函数(QT最重要的函数)</h5><h5 id="混合列子"><a href="#混合列子" class="headerlink" title="混合列子"></a>混合列子</h5><p>我们试着创建一个主窗口 并且创建一个按钮  然后点击按钮 就会弹出一个新窗口<br>第一步 我们创建一个新按钮<br>第二步 我们创建一个新窗口<br>第三部 用信号和槽 连接按钮和窗口<br>首先新一个窗口 包括了CPP H UI三个文件<br><img src="/medias/qt/newui.png"><br>代码如下</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//主窗口代码</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"review_1.h"</span></span>review_1<span class="token operator">::</span><span class="token function">review_1</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    ui<span class="token punctuation">.</span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新建一个按钮</span>    QPushButton<span class="token operator">*</span> btn_new_windows <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"打开新窗口"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn_new_windows<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    btn_new_windows<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setFixedSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//窗口实例化</span>    windows_one<span class="token operator">*</span> new_windows <span class="token operator">=</span> <span class="token keyword">new</span> windows_one<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//信号和槽函数 点击按钮 窗口实现打开关闭循环</span>    <span class="token function">connect</span><span class="token punctuation">(</span>btn_new_windows<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>btn_new_windows<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"打开新窗口"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            new_windows<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            btn_new_windows<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"关闭新窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            new_windows<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            btn_new_windows<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"打开新窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对象树概念"><a href="#对象树概念" class="headerlink" title="对象树概念"></a>对象树概念</h4><p>我们在创建按钮的时候 创建在了堆区 那我们为什么没有delete呢？<br>原因就是因为对象树的概念，由于我们绑定了this 会自动析构<br>Qt 运用对象树模式，当父对象被析构时，子对象自动就 delete 掉了，不用再写一大堆的代码了。</p><pre class="line-numbers language-cpp"><code class="language-cpp">QPushButton<span class="token operator">*</span> btn_new_windows <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"打开新窗口"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="信号和槽—连接函数-QT最重要的函数"><a href="#信号和槽—连接函数-QT最重要的函数" class="headerlink" title="信号和槽—连接函数(QT最重要的函数)"></a>信号和槽—连接函数(QT最重要的函数)</h4><p>信号和槽是用于对象之间的通信，它是Qt的核心机制，在Qt编程中有着广泛的应用。<br>如果想学好Qt，一定要充分掌握信号的槽的概念与使用。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">connect</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span>QString<span class="token punctuation">,</span>QString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>receiver<span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">updateValue</span><span class="token punctuation">(</span>QString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sender：发送对象<br>SIGNAL：信号<br>receiver：接收对象<br>SLOT: 槽函数</p><p>推荐写法 lambda表达式</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">connect</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span>QString<span class="token punctuation">,</span>QString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实现代码；</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>信号和槽之间只要通过connect 函数连接就建立了耦合关系<br>如果想解除连接可以使用disconnect函数<br>信号可以连接信号<br>一个信号可以连接多个槽函数<br>多个信号 可以连接同一个槽函数<br>信号和槽函数的参数 必须一一对应<br>信号和槽的参数个数 不需要一致  信号要大于槽的参数个数</p><h4 id="熟悉参看qt设计师助手的API并且使用"><a href="#熟悉参看qt设计师助手的API并且使用" class="headerlink" title="熟悉参看qt设计师助手的API并且使用"></a>熟悉参看qt设计师助手的API并且使用</h4><p>用宇宙第一IDE VS 开发 虽然很拉风<br>但是如果用QTcreator开发 也是有很多好处的<br>比如代码提示和与QT Assistant联动<br>Qt库文档是由开发者自己在线在.cpp中所写。<br>文档团队修正的文档以确保它是准确和可用的，并提供产品质量的控制。<br>该文档团队还写了大量的文本，如类描述-介绍类与类使用的概念，以及类提供的功能和属性。<br>该文档的重点是API，而不是内部结构，因为需要努力保持API相一致，并与每一个新版本兼容。<br>但可以改变内部结构大大提高性能和增强功能。<br>对于帮助文档查阅运用，首先是要知道自己想达到什么目的、实现什么功能，<br>然后先可以用谷歌百度搜索关键词，得到可能的模块名、类名、函数名，<br>再用 Qt 助手的索引或搜索功能找到具体的文档和示例代码。</p><p>API过于庞大复杂 暂不细说(能力有限)</p><h4 id="熟悉QT的UI操作-资源文件-对话框-界面布局-常用控件"><a href="#熟悉QT的UI操作-资源文件-对话框-界面布局-常用控件" class="headerlink" title="熟悉QT的UI操作 资源文件 对话框 界面布局 常用控件"></a>熟悉QT的UI操作 资源文件 对话框 界面布局 常用控件</h4><h5 id="添加资源文件"><a href="#添加资源文件" class="headerlink" title="添加资源文件"></a>添加资源文件</h5><p>右键项目-&gt;新建-&gt;QT-&gt;QT Resource File<br><img src="/medias/qt/qtres.png"></p><h5 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h5><p>QT中的对话框有很多种，比如：</p><ul><li>消息框</li><li>文件对话框</li><li>颜色对话框</li><li>输入对话框</li><li>等<br>自行参看qt助手的API</li></ul><p>窗口代码</p><pre class="line-numbers language-cpp"><code class="language-cpp">UI_danlog_src_ctr<span class="token operator">::</span><span class="token function">UI_danlog_src_ctr</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    ui<span class="token punctuation">.</span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用添加的资源文件 设置背景图片</span>    QPalette palette<span class="token punctuation">;</span>    palette<span class="token punctuation">.</span><span class="token function">setBrush</span><span class="token punctuation">(</span>QPalette<span class="token operator">::</span>Background<span class="token punctuation">,</span> <span class="token function">QBrush</span><span class="token punctuation">(</span><span class="token function">QPixmap</span><span class="token punctuation">(</span><span class="token string">":/src/16.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scaled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>IgnoreAspectRatio<span class="token punctuation">,</span> Qt<span class="token operator">::</span>SmoothTransformation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setPalette</span><span class="token punctuation">(</span>palette<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setAutoFillBackground</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新建一个文件对话框 连接消息框按键 </span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token punctuation">.</span>pushButton_8<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        QMessageBox<span class="token operator">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"消息框"</span><span class="token punctuation">,</span> <span class="token string">"对对对"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"消息框出现了!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//颜色</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token punctuation">.</span>pushButton_3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//QColorDialog dlg(this);</span>        QColor res_color <span class="token operator">=</span> QColorDialog<span class="token operator">::</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//dlg.exec();</span>        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> res_color<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//文件</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token punctuation">.</span>pushButton_2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//QColorDialog dlg(this);</span>        QString res_File <span class="token operator">=</span> QFileDialog<span class="token operator">::</span><span class="token function">getOpenFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"打开文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//dlg.exec();</span>        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> res_File<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//其它不举 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下<br><img src="/medias/qt/qtdialogres.png"></p><p>ui设计 直接点击ui文件 会自动跳转qtdesigner </p><h4 id="封装自定义控件"><a href="#封装自定义控件" class="headerlink" title="封装自定义控件"></a>封装自定义控件</h4><p>新建一个qtwidgetcalss 自定义名称 这里命名为UserDefineControl<br>步骤 右键项目-&gt;添加-&gt;Add Qt Class-&gt; Qt Widget Class<br>会生成<br>UserDefineControl.cpp<br>UserDefineControl.h<br>UserDefineControl.ui<br>在 UserDefineControl.ui 设置自己需要的控件</p><p>在 UserDefineControl.h/cpp<br>设置需要提供的接口(.h函数的声明/.cpp函数的定义)</p><p>在主窗口中添加一个widget 提升为上面命名的类（这里是UserDefineControl）<br>此时.h(项目)中会自动#include&lt;UserDefineControl.h&gt;<br>.cpp(项目)中 此时用UserDefineContro提供的接口</p><p>在使用自定义封装控件提供的接口时<br>不能直接<br>ui.function();<br>而是用<br>ui.widget-&gt;function();<br>因为上面模块话的自动化空间 都被封装到项目UI的widget中<br>此时已经完成了模块化的自定义控件操作</p><p>需要注意的是 添加的类 头文件目录在vs中可能需要自己添加路径(VC++中的包含路径)</p><p>结果如下<br><img src="/medias/qt/userdefine.png" alt="自定义控件"><br><img src="/medias/qt/userdefine_2.png" alt="主窗口widget控件提升"><br><img src="/medias/qt/userdefine_3.png" alt="res"><br>到这 控件的模块化设计已经完成</p><h4 id="事件处理-amp-事件分发-amp-事件过滤器-amp-定时器-amp-qt简单的绘图-amp-文件读写操作"><a href="#事件处理-amp-事件分发-amp-事件过滤器-amp-定时器-amp-qt简单的绘图-amp-文件读写操作" class="headerlink" title="事件处理 &amp; 事件分发 &amp; 事件过滤器 &amp; 定时器 &amp; qt简单的绘图 &amp; 文件读写操作"></a>事件处理 &amp; 事件分发 &amp; 事件过滤器 &amp; 定时器 &amp; qt简单的绘图 &amp; 文件读写操作</h4><h5 id="定时器-时间分发-过滤-杂项"><a href="#定时器-时间分发-过滤-杂项" class="headerlink" title="定时器 时间分发 过滤 杂项"></a>定时器 时间分发 过滤 杂项</h5><p>窗口cpp代码</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"QTTimerStudy.h"</span></span>QTTimerStudy<span class="token operator">::</span><span class="token function">QTTimerStudy</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    ui<span class="token punctuation">.</span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//启动定时器</span>    timer1 <span class="token operator">=</span> <span class="token function">startTimer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    timer2 <span class="token operator">=</span> <span class="token function">startTimer</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//推荐的写法</span>    <span class="token comment" spellcheck="true">//定时器类的写法</span>    QTimer<span class="token operator">*</span> timer3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTimer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//启动定时器</span>    timer3<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//信号连接写法  lambda yyds</span>    <span class="token function">connect</span><span class="token punctuation">(</span>timer3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QTimer<span class="token operator">::</span>timeout<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        ui<span class="token punctuation">.</span>label_3<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setText</span><span class="token punctuation">(</span>QString<span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//点击按钮 停止定时器</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token punctuation">.</span>pushButton<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        timer3<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> 0 </span>    QTimer<span class="token operator">*</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTimer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QTimer<span class="token operator">::</span>timeout    timer<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">start</span><span class="token punctuation">(</span>xms<span class="token punctuation">)</span><span class="token punctuation">;</span>    timer<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    ui<span class="token punctuation">.</span>label_2  <span class="token comment" spellcheck="true">//ev-&gt;timerId() 判断返回的定时器ID</span><span class="token keyword">void</span> QTTimerStudy<span class="token operator">::</span><span class="token function">timerEvent</span><span class="token punctuation">(</span>QTimerEvent<span class="token operator">*</span> ev<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">timerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> timer1<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        ui<span class="token punctuation">.</span>label<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setText</span><span class="token punctuation">(</span>QString<span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>num1<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">timerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> timer2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        ui<span class="token punctuation">.</span>label_2<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setText</span><span class="token punctuation">(</span>QString<span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>num2<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//过滤</span><span class="token keyword">bool</span> QTTimerStudy<span class="token operator">::</span><span class="token function">eventFilter</span><span class="token punctuation">(</span>QObject<span class="token operator">*</span> obj<span class="token punctuation">,</span> QEvent<span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> ui<span class="token punctuation">.</span>label_2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QEvent<span class="token operator">::</span>Timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"事件过滤器已经过滤"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token keyword">return</span> QTTimerStudy<span class="token operator">::</span><span class="token function">eventFilter</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>窗口头文件 </p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">pragma</span> execution_character_set("utf-8")</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QtWidgets/QWidget&gt;</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"ui_QTTimerStudy.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QTimer&gt;</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QPushButton&gt;</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QEvent&gt;</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QDebug&gt;</span></span><span class="token keyword">class</span> <span class="token class-name">QTTimerStudy</span> <span class="token operator">:</span> <span class="token keyword">public</span> QWidget<span class="token punctuation">{</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">QTTimerStudy</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">timerEvent</span><span class="token punctuation">(</span>QTimerEvent<span class="token operator">*</span> ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> timer1<span class="token punctuation">;</span>    <span class="token keyword">int</span> timer2<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">eventFilter</span><span class="token punctuation">(</span>QObject<span class="token operator">*</span><span class="token punctuation">,</span> QEvent<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>QTTimerStudyClass <span class="token class-name">ui</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h4 id="…"><a href="#…" class="headerlink" title="….."></a>…..</h4><h3 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h3><h3 id="qt-for-linux"><a href="#qt-for-linux" class="headerlink" title="qt for linux"></a>qt for linux</h3><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><pre class="line-numbers language-md"><code class="language-md">QMake version 3.0Using Qt version 5.5.1 in /usr/lib/x86_64-linux-gnu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> EC-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Math</title>
      <link href="/2022/04/26/math/"/>
      <url>/2022/04/26/math/</url>
      
        <content type="html"><![CDATA[<h2 id="Linear-Algebra"><a href="#Linear-Algebra" class="headerlink" title="Linear Algebra"></a>Linear Algebra</h2><h2 id="Probability-and-Statistics"><a href="#Probability-and-Statistics" class="headerlink" title="Probability and Statistics"></a>Probability and Statistics</h2><h2 id="discrete-mathematics"><a href="#discrete-mathematics" class="headerlink" title="discrete mathematics"></a>discrete mathematics</h2>]]></content>
      
      
      <categories>
          
          <category> Math-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++</title>
      <link href="/2022/03/27/cpp/"/>
      <url>/2022/03/27/cpp/</url>
      
        <content type="html"><![CDATA[<h2 id="CPP"><a href="#CPP" class="headerlink" title="CPP"></a>CPP</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h5 id="引用变量"><a href="#引用变量" class="headerlink" title="引用变量"></a>引用变量</h5><p>可以作为参数 返回值 局部变量 无法返回 因为随着函数声明周期的结束 函数内局部变量会被销毁<br>const int&amp; value2 防止形参改变实参<br>函数中利用常量引用防止误操作修改实参<br>引用的好处之一就是在函数调用时在内存中不会生成副本。<br>用引用传递函数的参数，能保证参数传递中不产生副本，提高传递的效率，且通过const的使用，保证了引用传递的安全性。<br>流操作符&lt;&lt;和&gt;&gt;、赋值操作符=的返回值、拷贝构造函数的参数、赋值操作符=的参数</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">firstref</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> value1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> value2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> value5 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">&amp;</span> ref1 <span class="token operator">=</span> value5<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>ref1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注意：不要返回局部变量引用  可以返回静态变量</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="默认参数、函数重载、函数模板"><a href="#默认参数、函数重载、函数模板" class="headerlink" title="默认参数、函数重载、函数模板"></a>默认参数、函数重载、函数模板</h5><h6 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h6><p>提高可复用性<br>同一个作用域下<br>函数名称相同<br>函数参数类型不同 或者 个数不同 或者 顺序不同</p><h4 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h4><p>////class 默认private  struct默认public<br>    //简单类</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"structure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//初始化列表</span>    <span class="token comment" spellcheck="true">//person(string n, int a) :name(name), age(age) {};</span>    <span class="token comment" spellcheck="true">//除了性能问题之外，有些时候合初始化列表是不可或缺的，以下几种情况时必须使用初始化列表</span>    <span class="token comment" spellcheck="true">//1.常量成员，因为常量只能初始化不能赋值，所以必须放在初始化列表里面 const</span>    <span class="token comment" spellcheck="true">//2.引用类型，引用必须在定义的时候初始化，并且不能重新赋值，所以也要写在初始化列表里面</span>    <span class="token comment" spellcheck="true">//3. 没有默认构造函数的类类型，因为使用初始化列表可以不必调用默认构造函数来初始化，而是直接调用拷贝构造函数初始化</span>    <span class="token function">person</span><span class="token punctuation">(</span><span class="token keyword">const</span> person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name <span class="token operator">=</span> p<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age <span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">.</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对于含有指针成员的类，直接拷贝可能会出现两个对象的指针成员指向同一个数据区。这时候一般先new个内存，然后复制内容</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"destruct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setname</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string  <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setage</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span>  <span class="token function">getage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继承&amp;&amp;多态 多态的优点：代码组织结构清晰 可读性强 利于前期和后期的扩展以及维护</span><span class="token keyword">class</span> <span class="token class-name">AbstractCalculator</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> m_Num1<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_Num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加法计算器  根据需求自己定义</span><span class="token keyword">class</span> <span class="token class-name">AddCalculator</span> <span class="token operator">:</span><span class="token keyword">public</span> AbstractCalculator<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> m_Num1 <span class="token operator">+</span> m_Num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">////调用</span><span class="token keyword">void</span> <span class="token function">addCalculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建加法计算器</span>    AbstractCalculator<span class="token operator">*</span> abc <span class="token operator">=</span> <span class="token keyword">new</span> AddCalculator<span class="token punctuation">;</span>    abc<span class="token operator">-</span><span class="token operator">></span>m_Num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    abc<span class="token operator">-</span><span class="token operator">></span>m_Num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-</span><span class="token operator">></span>m_Num1 <span class="token operator">&lt;&lt;</span> <span class="token string">" + "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-</span><span class="token operator">></span>m_Num2 <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-</span><span class="token operator">></span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">delete</span> abc<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//用完了记得销毁</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">////可以从 AbstractCalculator 知道 类中虚函数毫无作用 可以直接改写为纯虚函数</span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//纯虚函数</span>    <span class="token comment" spellcheck="true">//类中只要有一个纯虚函数就称为抽象类</span>    <span class="token comment" spellcheck="true">//抽象类无法实例化对象</span>    <span class="token comment" spellcheck="true">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token keyword">public</span> Base<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//案列</span><span class="token keyword">class</span> <span class="token class-name">AbstractDrinking</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">MakeDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token operator">:</span> <span class="token keyword">public</span> AbstractDrinking <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Boil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"煮农夫山泉!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"冲泡咖啡!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"将咖啡倒入杯中!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"加入牛奶!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//业务函数 传入子类 new zilei</span><span class="token keyword">void</span> <span class="token function">DoWork</span><span class="token punctuation">(</span>AbstractDrinking<span class="token operator">*</span> drink<span class="token punctuation">)</span> <span class="token punctuation">{</span>    drink<span class="token operator">-</span><span class="token operator">></span><span class="token function">MakeDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> drink<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="虚析构和纯虚析构"><a href="#虚析构和纯虚析构" class="headerlink" title="虚析构和纯虚析构"></a>虚析构和纯虚析构</h4><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">//解决父类指针释放后 无法调用到子类的析构代码 堆区资源无法释放(new）</span>    <span class="token comment" spellcheck="true">//父类析构函数声明为 virtual 会先调用子类的析构函数 多态性质</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Animal 构造函数调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span>    <span class="token comment" spellcheck="true">//virtual void Speak() = 0;</span>    <span class="token comment" spellcheck="true">//析构函数加上virtual关键字，变成虚析构函数</span>    <span class="token comment" spellcheck="true">//virtual ~Animal()</span>    <span class="token comment" spellcheck="true">//{</span>    <span class="token comment" spellcheck="true">//    cout &lt;&lt; "Animal虚析构函数调用！" &lt;&lt; endl;</span>    <span class="token comment" spellcheck="true">//}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Animal<span class="token operator">::</span><span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Animal 纯虚析构函数调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token operator">:</span> <span class="token keyword">public</span> Animal <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Cat</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Cat构造函数调用！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        m_Name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Cat析构函数调用!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>m_Name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Cat析构函数调用succ!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">delete</span> m_Name<span class="token punctuation">;</span>            m_Name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    string<span class="token operator">*</span> m_Name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Animal<span class="token operator">*</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//animal->Speak();</span>    <span class="token comment" spellcheck="true">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span>    <span class="token comment" spellcheck="true">//怎么解决？给基类增加一个虚析构函数</span>    <span class="token comment" spellcheck="true">//虚析构函数就是用来解决通过父类指针释放子类对象</span>    <span class="token keyword">delete</span> animal<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类成员函数<br>类外友元函数<br>函数运算符重载 </p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">function</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> input<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> input <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Demo demo;</span><span class="token comment" spellcheck="true">//demo("hello world");</span><span class="token comment" spellcheck="true">//operator() 让对象变得像函数，这个运算符也被称为 operator() 函数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h4><p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术<br>友元的目的就是让一个函数或者类 访问另一个类中私有成员<br>全局函数做友元<br>friend void goodGay(calss * calssone);<br>函数访问类中私有成员<br>类做友元</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">friend2</span> <span class="token punctuation">{</span>    <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">friend1</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">friend2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">friend1</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">friend1</span><span class="token punctuation">(</span>friend2 friendorder<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>friendorder <span class="token operator">=</span> friendorder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span>friendorder<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">log</span><span class="token punctuation">(</span>friendorder<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    friend2 friendorder<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">classforfriend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    friend2 one<span class="token punctuation">;</span>    friend1 <span class="token function">two</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>    two<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//成员函数做友元</span>    <span class="token comment" spellcheck="true">//friend void friend1::visit();</span>    <span class="token comment" spellcheck="true">//类中的某一个成员函数，可以访问私有内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="new-在堆区开辟数据"><a href="#new-在堆区开辟数据" class="headerlink" title="new 在堆区开辟数据"></a>new 在堆区开辟数据</h3><pre class="line-numbers language-cpp"><code class="language-cpp">定位<span class="token keyword">new</span><span class="token operator">--</span>类<span class="token operator">/</span>结构体<span class="token keyword">class</span> <span class="token class-name">classnew</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">classnew</span><span class="token punctuation">(</span>string charbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>charbuf <span class="token operator">=</span> charbuf<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">classnew</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"destructor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string <span class="token function">getcharbuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>charbuf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">getnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    string charbuf<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//delete 释放 new分配的内存 </span><span class="token comment" spellcheck="true">//由于创建在堆区 可以有程序员使用delete释放</span><span class="token keyword">int</span> <span class="token function">newfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//temp 赋值为10 int类型</span>    <span class="token keyword">int</span><span class="token operator">*</span> temp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> temp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//c++ 11</span>    <span class="token function">log</span><span class="token punctuation">(</span>temp1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>temp2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> temp1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//delete(temp1);</span>    <span class="token keyword">delete</span> temp2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//数组类型</span>    <span class="token keyword">int</span><span class="token operator">*</span> arrtemp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//int* arrtemp2 = new(10 * sizeof(int));</span>    <span class="token keyword">int</span><span class="token operator">*</span> arrtemp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        arrtemp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span>arrtemp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//数组为 delete[]</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrtemp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span>arrtemp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrtemp1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建类对象</span>    person<span class="token operator">*</span> pTest <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token function">person</span><span class="token punctuation">(</span><span class="token string">"fengle"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>pTest<span class="token operator">-</span><span class="token operator">></span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>pTest<span class="token operator">-</span><span class="token operator">></span><span class="token function">getage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> pTest<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处执行类的析构函数 </span>    <span class="token comment" spellcheck="true">//直接创建类 会在栈区 析构函数不能有程序员执行</span>        <span class="token comment" spellcheck="true">//placement new 定位放置new</span>        <span class="token comment" spellcheck="true">//在指定内存上分配</span>    <span class="token keyword">char</span> buffer1<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    classnew<span class="token operator">*</span> class1 <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>buffer1<span class="token punctuation">)</span> <span class="token function">classnew</span><span class="token punctuation">(</span><span class="token string">"one"</span> <span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>class1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getcharbuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>class1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//但是由于对象的空间不会自动释放 因为是在已经分配好的空间上进行分配</span>    <span class="token comment" spellcheck="true">//此时析构函数 必须显示调用 不用自动调用</span>    class1<span class="token operator">-</span><span class="token operator">></span><span class="token operator">~</span><span class="token function">classnew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//placement new 使用场景举例</span>    <span class="token comment" spellcheck="true">//如果有这样一个场景，我们需要大量的申请一块类似的内存空间，然后又释放掉，</span>    <span class="token comment" spellcheck="true">//比如在在一个server中对于客户端的请求，每个客户端的每一次上行数据我们都需要</span>    <span class="token comment" spellcheck="true">//为此申请一块内存，当我们处理完请求给客户端下行回复时释放掉该内存，</span>    <span class="token comment" spellcheck="true">//表面上看者符合c++的内存管理要求，没有什么错误，但是仔细想想很不合理，</span>    <span class="token comment" spellcheck="true">//为什么我们每个请求都要重新申请一块内存呢，要知道每一次内从的申请，</span>    <span class="token comment" spellcheck="true">//系统都要在内存中找到一块合适大小的连续的内存空间，这个过程是很慢的（相对而言)，</span>    <span class="token comment" spellcheck="true">//极端情况下，如果当前系统中有大量的内存碎片，并且我们申请的空间很大，甚至有可能失败。</span>    <span class="token comment" spellcheck="true">//为什么我们不能共用一块我们事先准备好的内存呢？</span>    <span class="token comment" spellcheck="true">//可以的，我们可以使用placement new来构造对象，那么就会在我们指定的内存空间中构造对象。</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h5><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//lamdba表达式就是匿名函数(没有名字的函数)</span>    <span class="token comment" spellcheck="true">// </span>    <span class="token comment" spellcheck="true">//[]捕获列表 ()参数列表 ->返回值</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">int</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//函数体</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//自动推导返回类型 且可以 b(1,3)</span>    <span class="token keyword">auto</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">int</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//函数体</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//lamdba嵌套</span>    <span class="token comment" spellcheck="true">//函数式编程 疯狂嵌套 结果取决于内部的参数  </span>    <span class="token comment" spellcheck="true">//(外界影响不大 集中内函数内部)  对多线程 并发 天生具有优势</span>    <span class="token keyword">int</span> forlamdba <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">int</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> n <span class="token operator">+</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> ee <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> n <span class="token operator">+</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token function">ee</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> e <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//提高资源资源利用效率</span><span class="token comment" spellcheck="true">//移动构造 &amp;&amp; srd:move</span><span class="token keyword">class</span> <span class="token class-name">Buffer</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buf <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">;</span>            buf <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span><span class="token operator">*</span> buf <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Buffer <span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Buffer buf<span class="token punctuation">;</span>    <span class="token keyword">return</span> buf<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setBuffer</span><span class="token punctuation">(</span><span class="token keyword">const</span> Buffer<span class="token operator">&amp;</span> buf<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"const Buffer&amp; buf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">void</span> <span class="token function">setBuffer</span><span class="token punctuation">(</span>Buffer<span class="token operator">&amp;&amp;</span> buf<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Buffer&amp;&amp; buf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">buftest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这样调用会有两次内存开销 两次对象 一次为buf  一次为 getbuffer中  此处get为右值 </span>    <span class="token comment" spellcheck="true">//如果没有const &amp; 编译器报错 因为getBuffer已经销毁</span>    <span class="token comment" spellcheck="true">//让一个常引用指向一个将亡值 将亡值声明周期将和常引用一样</span>    Buffer buf <span class="token operator">=</span> <span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setBuffer</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用普通常引用</span>    <span class="token function">setBuffer</span><span class="token punctuation">(</span><span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用右值引用</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="智能指针与内存管理"><a href="#智能指针与内存管理" class="headerlink" title="智能指针与内存管理"></a>智能指针与内存管理</h4><p>(头文件 <memory>)</memory></p><h5 id="Rall-amp-amp-引用计数"><a href="#Rall-amp-amp-引用计数" class="headerlink" title="Rall &amp;&amp; 引用计数"></a>Rall &amp;&amp; 引用计数</h5><p>引用计数是为了防止内存泄露 每当增加一次对同一个对象的引用 引用计数就会增加一次 每删除一次 引用计数就会减1 当引用计数为零时就会自动三处指向堆的内存。</p><h5 id="std-shared-ptr"><a href="#std-shared-ptr" class="headerlink" title="std::shared_ptr"></a>std::shared_ptr</h5><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//简单的使用方法</span><span class="token keyword">void</span> <span class="token function">shared_ptr_foo</span><span class="token punctuation">(</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">shared_ptr_realize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> pointer <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">shared_ptr_foo</span><span class="token punctuation">(</span>pointer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">*</span>pointer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">shared_ptr_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> pointer1 <span class="token operator">=</span> make_shared<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> pointer2 <span class="token operator">=</span> pointer1<span class="token punctuation">;</span>    <span class="token keyword">auto</span> pointer3 <span class="token operator">=</span> pointer1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获得原始指针</span>    <span class="token keyword">auto</span><span class="token operator">*</span> p <span class="token operator">=</span> pointer1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//显示引用次数</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer1<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer2<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer3<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//reset() 减少一个引用计数</span>    pointer2<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer1<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer2<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer3<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>    pointer3<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer1<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer2<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>    <span class="token function">log</span><span class="token punctuation">(</span>pointer3<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="std-unique-ptr"><a href="#std-unique-ptr" class="headerlink" title="std::unique_ptr"></a>std::unique_ptr</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 貌似是老的方法 不深入研究</span><span class="token comment" spellcheck="true">//是一种独占的智能指针，它禁止其他智能指针与其共享同一个对象，从而保证代码的安全</span><span class="token keyword">int</span> <span class="token function">unique_ptr_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> pointers <span class="token operator">=</span> make_unique<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//auto pointers1 = pointers; 无法复制 因为unique独占 </span>    <span class="token comment" spellcheck="true">//可以用 std::move 转移</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="std-weak-ptr"><a href="#std-weak-ptr" class="headerlink" title="std::weak_ptr"></a>std::weak_ptr</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">weak_ptr_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> A<span class="token punctuation">;</span>    <span class="token keyword">struct</span> B<span class="token punctuation">;</span>    <span class="token keyword">struct</span> A <span class="token punctuation">{</span>        shared_ptr<span class="token operator">&lt;</span>B<span class="token operator">></span> pointer<span class="token punctuation">;</span>        <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A 被销毁"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> B <span class="token punctuation">{</span>        shared_ptr<span class="token operator">&lt;</span>A<span class="token operator">></span> pointer<span class="token punctuation">;</span>        <span class="token operator">~</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B 被销毁"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> a <span class="token operator">=</span> std<span class="token operator">::</span>make_shared<span class="token operator">&lt;</span>A<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//引用计数一次</span>    <span class="token keyword">auto</span> b <span class="token operator">=</span> std<span class="token operator">::</span>make_shared<span class="token operator">&lt;</span>B<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//引用计数一次</span>    a<span class="token operator">-</span><span class="token operator">></span>pointer <span class="token operator">=</span> b<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//引用计数两次</span>    b<span class="token operator">-</span><span class="token operator">></span>pointer <span class="token operator">=</span> a<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//引用计数两次</span>    <span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>    <span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>    <span class="token comment" spellcheck="true">//退出作用域时 引用减少一次 则为1 无法释放内存</span>    <span class="token comment" spellcheck="true">//此时使用弱引用指针 weak_ptr 因为弱引用不会增加引用次数 问题得以解决</span>    <span class="token comment" spellcheck="true">//解决方法  二次使用弱引用 weak_ptr </span>    <span class="token keyword">struct</span> C<span class="token punctuation">;</span>    <span class="token keyword">struct</span> D<span class="token punctuation">;</span>    <span class="token keyword">struct</span> C <span class="token punctuation">{</span>        weak_ptr<span class="token operator">&lt;</span>D<span class="token operator">></span> pointer<span class="token punctuation">;</span>        <span class="token operator">~</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A 被销毁"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> D <span class="token punctuation">{</span>        weak_ptr<span class="token operator">&lt;</span>C<span class="token operator">></span> pointer<span class="token punctuation">;</span>        <span class="token operator">~</span><span class="token function">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B 被销毁"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> c <span class="token operator">=</span> std<span class="token operator">::</span>make_shared<span class="token operator">&lt;</span>C<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">auto</span> d <span class="token operator">=</span> std<span class="token operator">::</span>make_shared<span class="token operator">&lt;</span>D<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      c<span class="token operator">-</span><span class="token operator">></span>pointer <span class="token operator">=</span> d<span class="token punctuation">;</span>                      d<span class="token operator">-</span><span class="token operator">></span>pointer <span class="token operator">=</span> c<span class="token punctuation">;</span>                         <span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>    <span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>    <span class="token comment" spellcheck="true">//当作用域结束后 引用则为0 析构函数执行</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><p>并发 两个以上的任何 同时发生<br>并发的假象 需要时间开销 任务切换<br>多个核心cpu  硬件并发<br>任务数少于核心数 可以做到真正的任务并发<br>使用并发的原因 同时执行多个任务 提高性能</p><h4 id="可执行程序"><a href="#可执行程序" class="headerlink" title="可执行程序"></a>可执行程序</h4><p>磁盘上的一个文件 windows下 一个扩展名为exe<br>windows下 双击 lunux./</p><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><p>就是一个可执行程序 运行起来 就创建了一个进程</p><p>进程就是运行起来的可执行程序</p><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><p>进程存在了 主线程就出现了<br>main thread<br>main函数中的代码 有主线程执行<br>主线程和线程 唇齿相依</p><p>除了主线程之外 我们可以通过自己创建其它线程 其它现场走的是别的通道 甚至去不同搞的地方</p><p>没创建一个新的线程 我们就可以在同一时刻 多干一个不同的事情 </p><p>多线程 并发<br>线程并不是越多越好 每个线程 都需要一个独立的堆栈空间(1M) 现场之间的切换 要保存很多中间状态；<br>切换会耗费本该属于程序的运行的时间</p><p>可以同时处理不同的事情</p><p>总结<br>用来执行代码<br>一个新线程 代表一条新的通路<br>一个进程包含一个主线程 主线程随着进程的启动 并运行 我们可以创建多个其它现场(非主线程)<br>但是创建的数量一般不超过200-300个(个数根据实际情况)<br>因为主线程是自动启动的 所以一个进程中最少也是有一个线程(主线程)<br>多线程程序可以同时干多个事 运行效率高<br>提高效率 需要调整和优化 资源 线程等问题</p><h4 id="学习心得"><a href="#学习心得" class="headerlink" title="学习心得"></a>学习心得</h4><p>开发多线程程序 实力的体现 一个商用的必须要求<br>线程开发有一定难度 实现代码更复杂 理解上更难一些 需要一定的学习时间<br>c++线程会涉及很多新概念 对于c++道路上的成长特别关键 不要急于求成<br>方向 网络通信 网络服务器 qt等方向 都需要多线程 绝对绕不开</p><h4 id="实现并发的手段"><a href="#实现并发的手段" class="headerlink" title="实现并发的手段"></a>实现并发的手段</h4><p>通过多个进程 实现并发<br>单个进程中 创建多个线程 实现并发</p><h5 id="多进程并发"><a href="#多进程并发" class="headerlink" title="多进程并发"></a>多进程并发</h5><p>系统举例 启动多个软件<br>服务器进程之间的通信 账号服务器 游戏服务器 之间的通信<br>进程之间的通信<br>管道<br>文件<br>消息队列<br>共享内存<br>等等等等<br>如果不同电脑之间 可以使用socker通信 等等<br>等等</p><h5 id="多线程并发"><a href="#多线程并发" class="headerlink" title="多线程并发"></a>多线程并发</h5><p>线程 (像是轻量级的进程)<br>共享内存 因为在同一个进程内<br>全局变量<br>指针<br>引用<br>等<br>多线程开销远远小于多进程<br>共享内存的新问题<br>数据一致性的问题<br>多个现场对一个变量同时操作 需要先后顺序等<br>互斥问题<br>多线程和多进程可以混合使用 但是有限考虑多线程技术开发 而不是多进程</p><h4 id="c-11-新标准-线程库"><a href="#c-11-新标准-线程库" class="headerlink" title="c++11 新标准 线程库"></a>c++11 新标准 线程库</h4><p>需要主要查看官方文档 API<br>以前官方多线程代码不可以跨平台<br>可以导入库 保持代码一致性 可以跨平台 但还是需要配置 比较麻烦</p><p>从c++11新标准开始<br>本身增加对多线程的支持 意味着可移植性 跨平台 windows linux</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>多线程的优点(对比进程)<br>启动速度更快 更轻量级<br>系统资源开销更少 执行速度更快 比如共享内存这种通信方式 比其他通信方式更快<br>缺点<br>使用有一定难度<br>需要处理数据的一致性问题</p><h4 id="multi-thread-code-realize"><a href="#multi-thread-code-realize" class="headerlink" title="multi thread code realize"></a>multi thread code realize</h4><h5 id="线程-thread"><a href="#线程-thread" class="headerlink" title="线程 thread"></a>线程 thread</h5><h5 id="互斥体-mutex"><a href="#互斥体-mutex" class="headerlink" title="互斥体 mutex"></a>互斥体 mutex</h5><p>std::mutex mtx;<br>锁住的是锁 不是其中范围的内容 一个线程用了这个锁<br>其它线程用这个锁 需要等待这个锁解锁才可以使用 才能继续往下执行<br>std::lock_guard<br>自动上锁 离开作用域后自动解锁 不需要手动解锁<br>std::unique_lock<br>自动上锁 离开作用域后自动解锁 不需要手动解锁  但是可以使用解锁和上锁 使得程序更加灵活</p><p>std::unique_lock 与std::lock_guard都能实现自动加锁与解锁功能，但是std::unique_lock要比std::lock_guard更灵活，但是更灵活的代价是占用空间相对更大一点且相对更慢一点。</p><h5 id="future"><a href="#future" class="headerlink" title="future"></a>future</h5><p>主线程获得子线程的值 —— 线程之间的通信</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//头文件</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;future></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>future引出<br>condition mutex 写法</p><pre class="line-numbers language-cpp"><code class="language-cpp">mutex mu<span class="token punctuation">;</span>               condition_variable cond<span class="token punctuation">;</span><span class="token keyword">bool</span> notified <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 通知信号</span><span class="token keyword">void</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> result<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">*</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; "Result is" &lt;&lt; res &lt;&lt; endl;</span>    std<span class="token operator">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>mu<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> res<span class="token punctuation">;</span>    notified <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    cond<span class="token punctuation">.</span><span class="token function">notify_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    thread <span class="token function">t1</span><span class="token punctuation">(</span>factorial<span class="token punctuation">,</span> N<span class="token punctuation">,</span> <span class="token function">ref</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>mu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>notified<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 避免虚假唤醒</span>         cond<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Result is"</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//全局变量多 线程之间的耦合度高 不符合线程安全</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>future写法<br>主线程获得子线程的值</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">*</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; "Result is" &lt;&lt; res &lt;&lt; endl;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从未来获取某一个变量的类 future get只能调用一次</span>    future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> fu <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span>factorial<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//async(launch::async, factorial, 5);  此时创建了一个子线程</span>    x <span class="token operator">=</span> fu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Result is"</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子线程获得主线程的值、</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span>future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> fu<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> fu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">*</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Result is "</span> <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">factorial_shared</span><span class="token punctuation">(</span>shared_future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> fu<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> fu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">*</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Result is "</span> <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    promise<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">;</span>    future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> fp <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">get_future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> fu <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span>factorial<span class="token punctuation">,</span> <span class="token function">ref</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//promise future 无法被复制   可以使用shared_future 重复赋值</span>    <span class="token comment" spellcheck="true">//声明了promise 必须给值  不然无法调用</span>    p<span class="token punctuation">.</span><span class="token function">set_value</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> fu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"main set res "</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="条件变量-condition-variable"><a href="#条件变量-condition-variable" class="headerlink" title="条件变量 condition_variable"></a>条件变量 condition_variable</h5><p>简单实现</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;condition_variable></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//STL队列 只能从容器末尾添加 并且只能从容器头部删除  </span>    <span class="token comment" spellcheck="true">//生产者队列</span>    std<span class="token operator">::</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> produced_nums<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//互斥量</span>    std<span class="token operator">::</span>mutex mtx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//条件变量</span>    std<span class="token operator">::</span>condition_variable cv<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//状态</span>    <span class="token keyword">bool</span> notified <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 通知信号</span>    <span class="token comment" spellcheck="true">// 生产者</span>    <span class="token keyword">auto</span> producer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token operator">::</span>chrono<span class="token operator">::</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            std<span class="token operator">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"producing "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>            produced_nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            notified <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            cv<span class="token punctuation">.</span><span class="token function">notify_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此处也可以使用 notify_one</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 消费者</span>    <span class="token keyword">auto</span> consumer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            std<span class="token operator">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>notified<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 避免虚假唤醒</span>                cv<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 短暂取消锁，使得生产者有机会在消费者消费空前继续生产</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//消费者慢于生产者</span>            std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token operator">::</span>chrono<span class="token operator">::</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>produced_nums<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"consuming "</span> <span class="token operator">&lt;&lt;</span> produced_nums<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token operator">&lt;&lt;</span> <span class="token string">"Peoduced SIZE： "</span> <span class="token operator">&lt;&lt;</span>  produced_nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>                produced_nums<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            notified <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//一个生产者 两个消费者</span>    <span class="token comment" spellcheck="true">// 分别在不同的线程中运行</span>    std<span class="token operator">::</span>thread <span class="token function">p</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>thread cs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//两个消费者</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">thread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="原子-atomic"><a href="#原子-atomic" class="headerlink" title="原子 atomic"></a>原子 atomic</h5><h3 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h3>]]></content>
      
      
      <categories>
          
          <category> CS-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/2022/03/11/recordlife/"/>
      <url>/2022/03/11/recordlife/</url>
      
        <content type="html"><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><h3 id="随手照片-第一篇-测试-开学记录"><a href="#随手照片-第一篇-测试-开学记录" class="headerlink" title="随手照片(第一篇 测试(开学记录))"></a>随手照片(第一篇 测试(开学记录))</h3><p><img src="/medias/schoollife/view2.jpg" alt="开学"></p><h3 id="04-01-22"><a href="#04-01-22" class="headerlink" title="04/01/22"></a>04/01/22</h3><p>eeeee</p><h3 id="05-01-22"><a href="#05-01-22" class="headerlink" title="05/01/22"></a>05/01/22</h3><p><img src="/medias/schoollife/51.jpg" alt="下雨的五一(邑)"></p><h3 id="05-19-22"><a href="#05-19-22" class="headerlink" title="05/19/22"></a>05/19/22</h3><iframe src="//player.bilibili.com/player.html?aid=384197393&amp;bvid=BV1rZ4y187ZE&amp;cid=723680479&amp;page=1" width="100%" height="400px" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><br><h3 id="06-03-22"><a href="#06-03-22" class="headerlink" title="06/03/22"></a>06/03/22</h3><p><img src="/medias/schoollife/603.jpg" alt="为什么端午奶茶下面是热的"></p><h3 id="22-6-22"><a href="#22-6-22" class="headerlink" title="22/6/22"></a>22/6/22</h3><p><img src="/medias/schoollife/gg.png" alt="寄 把人养成残废 然后收费"></p><h3 id="06-27-22"><a href="#06-27-22" class="headerlink" title="06/27/22"></a>06/27/22</h3><p>快废了 时间管理失败的第23年😄</p><h3 id="07-14-22"><a href="#07-14-22" class="headerlink" title="07/14/22"></a>07/14/22</h3><p>逃避深度 追求广度归根到底还是不对的<br>还是需要一定的深度作为基础</p><h3 id="07-16-22"><a href="#07-16-22" class="headerlink" title="07/16/22"></a>07/16/22</h3><p><img src="/medias/schoollife/%E6%9C%80%E4%BC%9F%E5%A4%A7%E7%9A%84%E4%BD%9C%E5%93%81.png"><br>都很好听~~~~~</p><h3 id="07-17-22"><a href="#07-17-22" class="headerlink" title="07/17/22"></a>07/17/22</h3><p><img src="/medias/schoollife/shima1.jpg"><br><img src="/medias/schoollife/shima2.jpg"></p><h3 id="08-23-22"><a href="#08-23-22" class="headerlink" title="08/23/22"></a>08/23/22</h3><p><img src="/project/lddd.jpg"><br>晚了点上手 可惜了 </p><h3 id="09-04-22-00-01"><a href="#09-04-22-00-01" class="headerlink" title="09/04/22 00:01"></a>09/04/22 00:01</h3><p>春招吧 重开吧 毁灭吧<br>正点原子十天 治好了我的精神内耗</p><h3 id="09-08-22"><a href="#09-08-22" class="headerlink" title="09/08/22"></a>09/08/22</h3><p>新生舍友的第一个hw<br><img src="/medias/schoollife/%E8%88%8D%E5%8F%8B%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F.jpg"></p><h3 id="09-29-22"><a href="#09-29-22" class="headerlink" title="09/29/22"></a>09/29/22</h3><p>确认了一些事情</p>]]></content>
      
      
      <categories>
          
          <category> Record-Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> record-life </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
