<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>课设</title>
      <link href="/2022/10/20/cd/"/>
      <url>/2022/10/20/cd/</url>
      
        <content type="html"><![CDATA[<h2 id="无线单片机课程设计"><a href="#无线单片机课程设计" class="headerlink" title="无线单片机课程设计"></a>无线单片机课程设计</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>(1)至少采用以下传感器其中1种: a.超声波、b.加速度、c.压力。<br>(2)点对点传输，采用LCD或数码管显示传感数据，或者通过串口传输到PC端，由串口调试助手完成。定时采样并刷新显示。<br>(3)设计报告中要清楚描述所用传感器的工作原理以及软硬件设计的具体方案。必须设计清晰、合理的程序流程图。解释关键代码段。<br>(4)全部程序代码作为附录，并要有必要的注释。<br>(5)优良等级的要求：实现多点的无线网络传输，要有自定义数据帧格式(含加密和纠错)。</p><h3 id="选题"><a href="#选题" class="headerlink" title="选题"></a>选题</h3><p>多点动作捕捉 （加速度传感器）</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>此处参考了大佬的代码</p><h4 id="mpu6050适配cc2530-c51"><a href="#mpu6050适配cc2530-c51" class="headerlink" title="mpu6050适配cc2530(c51)"></a>mpu6050适配cc2530(c51)</h4><p>mpu6050 头文件</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _MPU6050_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> _MPU6050_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> SCL P0_6      </span><span class="token comment" spellcheck="true">//IIC时钟引脚定义</span><span class="token macro property">#<span class="token directive keyword">define</span> SDA P0_7      </span><span class="token comment" spellcheck="true">//IIC数据引脚定义</span><span class="token macro property">#<span class="token directive keyword">define</span> SDA_OUT()   P0DIR |= 0x80</span><span class="token macro property">#<span class="token directive keyword">define</span> SDA_IN()    P0DIR &amp;= ~0x80</span><span class="token macro property">#<span class="token directive keyword">define</span> SCL_OUT()   P0DIR |= 0x40</span><span class="token comment" spellcheck="true">//****************************************</span><span class="token comment" spellcheck="true">// 定义MPU6050内部地址</span><span class="token comment" spellcheck="true">//****************************************</span><span class="token macro property">#<span class="token directive keyword">define</span>    SMPLRT_DIV        0x19    </span><span class="token comment" spellcheck="true">//陀螺仪采样率，典型值：0x07(125Hz)</span><span class="token macro property">#<span class="token directive keyword">define</span>    CONFIG            0x1A    </span><span class="token comment" spellcheck="true">//低通滤波频率，典型值：0x06(5Hz)</span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_CONFIG        0x1B    </span><span class="token comment" spellcheck="true">//陀螺仪自检及测量范围，典型值：0x18(不自检，2000deg/s)</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_CONFIG    0x1C    </span><span class="token comment" spellcheck="true">//加速计自检、测量范围及高通滤波频率，典型值：0x01(不自检，2G，5Hz)</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_XOUT_H    0x3B</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_XOUT_L    0x3C</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_YOUT_H    0x3D</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_YOUT_L    0x3E</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_ZOUT_H    0x3F</span><span class="token macro property">#<span class="token directive keyword">define</span>    ACCEL_ZOUT_L    0x40</span><span class="token macro property">#<span class="token directive keyword">define</span>    TEMP_OUT_H        0x41</span><span class="token macro property">#<span class="token directive keyword">define</span>    TEMP_OUT_L        0x42</span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_XOUT_H        0x43</span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_XOUT_L        0x44    </span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_YOUT_H        0x45</span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_YOUT_L        0x46</span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_ZOUT_H        0x47</span><span class="token macro property">#<span class="token directive keyword">define</span>    GYRO_ZOUT_L        0x48</span><span class="token macro property">#<span class="token directive keyword">define</span>    PWR_MGMT_1        0x6B    </span><span class="token comment" spellcheck="true">//电源管理，典型值：0x00(正常启用)</span><span class="token macro property">#<span class="token directive keyword">define</span>    WHO_AM_I            0x75    </span><span class="token comment" spellcheck="true">//IIC地址寄存器(默认数值0x68，只读)</span><span class="token macro property">#<span class="token directive keyword">define</span>    SlaveAddress    0xD0    </span><span class="token comment" spellcheck="true">//IIC写入时的地址字节数据，+1为读取</span><span class="token keyword">extern</span> <span class="token keyword">int</span> accX<span class="token punctuation">,</span>accY<span class="token punctuation">,</span>accZ<span class="token punctuation">,</span>graX<span class="token punctuation">,</span>graY<span class="token punctuation">,</span>graZ<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Init_MPU6050</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Multiple_read_MPU6050</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> REG_Address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源文件</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"ioCC2530.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"MPU6050.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"OnBoard.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"hal_types.h"</span></span><span class="token macro property">#<span class="token directive keyword">define</span> uint  unsigned int</span><span class="token macro property">#<span class="token directive keyword">define</span> uchar unsigned char</span><span class="token keyword">int</span> accX<span class="token punctuation">,</span>accY<span class="token punctuation">,</span>accZ<span class="token punctuation">,</span>graX<span class="token punctuation">,</span>graY<span class="token punctuation">,</span>graZ<span class="token punctuation">;</span><span class="token operator">/</span><span class="token comment" spellcheck="true">/****************************************//函数声明//****************************************void WriteSDA_0(void);void WriteSDA_1(void);void WriteSCL_0(void);void WriteSCL_1(void);void ReadSDA(void);void Init_IO(void);void MPU6050_Start(void);void MPU6050_Stop(void);void MPU6050_SendACK(uchar ack);uchar MPU6050_RecvACK(void);void MPU6050_SendByte(uchar data);uchar MPU6050_RecvByte(void);void Single_Write_MPU6050(uchar REG_Address,uchar REG_data);uchar Single_Read_MPU6050(uchar REG_Address);void InitMPU6050(void);void ALLInit(void);void Multiple_read_MPU6050(void);void delay_us(unsigned int u);void ALLInit(void){   Init_IO();   InitMPU6050();}/****************us延时函数 32M晶振 单周期MCU********************/</span><span class="token keyword">void</span> <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>   u<span class="token operator">=</span><span class="token number">4</span><span class="token operator">*</span>u<span class="token punctuation">;</span>   <span class="token function">MicroWait</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*****************************MPU6050*******************************/</span><span class="token keyword">void</span> <span class="token function">WriteSDA_0</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    P0DIR<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x40</span><span class="token punctuation">;</span>    SDA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">WriteSDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    P0DIR<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x40</span><span class="token punctuation">;</span>    SDA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">WriteSCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    P0DIR<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x80</span><span class="token punctuation">;</span>    SCL<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">WriteSCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    P0DIR<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x80</span><span class="token punctuation">;</span>    SCL<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ReadSDA</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//sda输入,=0</span><span class="token punctuation">{</span>    P0DIR<span class="token operator">&amp;</span><span class="token operator">=</span><span class="token number">0xBF</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Init_IO</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  P0DIR<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0xc0</span><span class="token punctuation">;</span>  P0SEL<span class="token operator">&amp;</span><span class="token operator">=</span><span class="token number">0x3f</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************起始信号**************************************/</span><span class="token keyword">void</span> <span class="token function">MPU6050_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">WriteSDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WriteSCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WriteSDA_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WriteSCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************停止信号**************************************/</span><span class="token keyword">void</span> <span class="token function">MPU6050_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>       <span class="token function">WriteSDA_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">WriteSCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">WriteSDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//I2C发送应答信号</span><span class="token comment" spellcheck="true">//入口参数:ack (0:ACK 1:NAK)</span><span class="token keyword">void</span> <span class="token function">MPU6050_SendACK</span><span class="token punctuation">(</span>uchar ack<span class="token punctuation">)</span><span class="token punctuation">{</span>        SDA<span class="token operator">=</span>ack<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//写应答信号</span>    <span class="token function">WriteSCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//拉高时钟线</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Delay5us();    //延时</span>    <span class="token function">WriteSCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//拉低时钟线</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Delay5us();    //延时</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************发送应答信号**************************************/</span>uchar <span class="token function">MPU6050_RecvACK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ReadSDA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WriteSCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//拉高时钟线</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Delay5us();    //延时</span>    CY<span class="token operator">=</span>SDA<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//读应答信号</span>    <span class="token function">WriteSCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//拉低时钟线</span>    <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Delay5us();    //延时</span>    P0DIR<span class="token operator">|</span><span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> CY<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************向IIC总线发送一个字节数据**************************************/</span><span class="token keyword">void</span> <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>uchar data<span class="token punctuation">)</span><span class="token punctuation">{</span>    uchar i<span class="token punctuation">;</span>    <span class="token function">SDA_OUT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//8位计数器</span>    <span class="token punctuation">{</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">&amp;</span><span class="token number">0x80</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token function">WriteSDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">else</span>         <span class="token punctuation">{</span><span class="token function">WriteSDA_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                data<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">WriteSCL_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//拉高时钟线</span>        <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//延时</span>        <span class="token function">WriteSCL_0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//拉低时钟线</span>        <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//延时</span>    <span class="token punctuation">}</span>    <span class="token function">MPU6050_RecvACK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**************************************从IIC总线接收一个字节数据**************************************/</span>uchar <span class="token function">MPU6050_RecvByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      uchar i<span class="token punctuation">;</span>    uchar dat <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">WriteSDA_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//使能内部上拉,准备读取数据,</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//8位计数器</span>    <span class="token punctuation">{</span>        dat <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        SCL <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//拉高时钟线</span>        <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//延时</span>        dat <span class="token operator">|</span><span class="token operator">=</span> SDA<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//读数据               </span>        SCL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//拉低时钟线</span>         <span class="token function">delay_us</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//延时</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dat<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//******单字节写入*******************************************</span><span class="token keyword">void</span> <span class="token function">Single_Write_MPU6050</span><span class="token punctuation">(</span>uchar REG_Address<span class="token punctuation">,</span>uchar REG_data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">MPU6050_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//起始信号</span>    <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>SlaveAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//发送设备地址+写信号</span>    <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>REG_Address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//内部寄存器地址，</span>    <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>REG_data<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//内部寄存器数据，</span>    <span class="token function">MPU6050_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//发送停止信号</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//********单字节读取*****************************************</span>uchar <span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>uchar REG_Address<span class="token punctuation">)</span><span class="token punctuation">{</span>    uchar REG_data<span class="token punctuation">;</span>    <span class="token function">MPU6050_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//起始信号</span>    <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>SlaveAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发送设备地址+写信号</span>    <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>REG_Address<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//发送存储单元地址，从0开始    </span>    <span class="token function">MPU6050_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//起始信号</span>    <span class="token function">MPU6050_SendByte</span><span class="token punctuation">(</span>SlaveAddress<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//发送设备地址+读信号</span>    REG_data<span class="token operator">=</span><span class="token function">MPU6050_RecvByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//读出寄存器数据</span>    <span class="token function">MPU6050_SendACK</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//接收应答信号</span>    <span class="token function">MPU6050_Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//停止信号</span>    <span class="token keyword">return</span> REG_data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//*****************************************************************</span><span class="token comment" spellcheck="true">//初始化MPU6050，根据需要请参考pdf进行修改************************</span><span class="token keyword">void</span> <span class="token function">InitMPU6050</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Single_Write_MPU6050</span><span class="token punctuation">(</span>PWR_MGMT_1<span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//解除休眠状态</span>    <span class="token function">Single_Write_MPU6050</span><span class="token punctuation">(</span>SMPLRT_DIV<span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Single_Write_MPU6050</span><span class="token punctuation">(</span>CONFIG<span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Single_Write_MPU6050</span><span class="token punctuation">(</span>GYRO_CONFIG<span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Single_Write_MPU6050</span><span class="token punctuation">(</span>ACCEL_CONFIG<span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//*********************************************************</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//连续读出MPU6050内部数据</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//*********************************************************</span><span class="token keyword">void</span> <span class="token function">Multiple_read_MPU6050</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">char</span> BUF<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//接收数据缓存区  </span>  BUF<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>ACCEL_XOUT_H<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>ACCEL_XOUT_L<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>ACCEL_YOUT_H<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>ACCEL_YOUT_L<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>ACCEL_ZOUT_H<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>ACCEL_ZOUT_L<span class="token punctuation">)</span><span class="token punctuation">;</span>    BUF<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>GYRO_XOUT_H<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>GYRO_XOUT_L<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>GYRO_YOUT_H<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>GYRO_YOUT_L<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>GYRO_ZOUT_H<span class="token punctuation">)</span><span class="token punctuation">;</span>  BUF<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Single_Read_MPU6050</span><span class="token punctuation">(</span>GYRO_ZOUT_L<span class="token punctuation">)</span><span class="token punctuation">;</span>    accX<span class="token operator">=</span><span class="token punctuation">(</span>BUF<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>BUF<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   accY<span class="token operator">=</span><span class="token punctuation">(</span>BUF<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>BUF<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   accZ<span class="token operator">=</span><span class="token punctuation">(</span>BUF<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>BUF<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   graX<span class="token operator">=</span><span class="token punctuation">(</span>BUF<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>BUF<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  graY<span class="token operator">=</span><span class="token punctuation">(</span>BUF<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>BUF<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  graZ<span class="token operator">=</span><span class="token punctuation">(</span>BUF<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">|</span>BUF<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现多点的无线网络传输"><a href="#实现多点的无线网络传输" class="headerlink" title="实现多点的无线网络传输"></a>实现多点的无线网络传输</h4><p>采用点播 但是默认是一个终端节点<br>需要增了一个终端节点或者多个</p><h5 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h5><p>在头文件SampleApp.h中 添加一个点播id</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> SAMPLEAPP_FLASH_CLUSTERID     2</span><span class="token macro property">#<span class="token directive keyword">define</span> SAMPLEAPP_POINT_TO_POINT_CLUSTERID 3</span><span class="token macro property">#<span class="token directive keyword">define</span> SAMPLEAPP_POINT_TO_POINT_CLUSTERID_2 4   </span><span class="token comment" spellcheck="true">//需要添加的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h5><p>在就是接收处理函数 SampleApp_MessageMSGCB()中添加点播id相关的处理函数<br>如果协调器和终端节点烧的不同一份代码 这个函数在协调器文件中</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SampleApp_MessageMSGCB</span><span class="token punctuation">(</span> afIncomingMSGPacket_t <span class="token operator">*</span>pkt <span class="token punctuation">)</span><span class="token punctuation">{</span>  uint16 flashTime<span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span> pkt<span class="token operator">-></span>clusterId <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">case</span> SAMPLEAPP_PERIODIC_CLUSTERID<span class="token punctuation">:</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>                                               <span class="token keyword">case</span> SAMPLEAPP_POINT_TO_POINT_CLUSTERID<span class="token punctuation">:</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'X'</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"ED1:"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalLedBlink</span><span class="token punctuation">(</span> HAL_LED_1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">200</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> SAMPLEAPP_POINT_TO_POINT_CLUSTERID_2<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">//添加的id</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'X'</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"ED2:"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalUARTWrite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HalLedBlink</span><span class="token punctuation">(</span> HAL_LED_1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">200</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> SAMPLEAPP_FLASH_CLUSTERID<span class="token punctuation">:</span>      flashTime <span class="token operator">=</span> <span class="token function">BUILD_UINT16</span><span class="token punctuation">(</span>pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pkt<span class="token operator">-></span>cmd<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">HalLedBlink</span><span class="token punctuation">(</span> HAL_LED_4<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>flashTime <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h5><p>烧录终端节点时 在点播发送函数 SampleApp_SendPointToPointMessage()<br>设置相对于的id</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">AF_DataRequest</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>Point_To_Point_DstAddr<span class="token punctuation">,</span>                       <span class="token operator">&amp;</span>SampleApp_epDesc<span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">//SAMPLEAPP_POINT_TO_POINT_CLUSTERID,  //节点1</span>                       SAMPLEAPP_POINT_TO_POINT_CLUSTERID_2<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//节点2</span>                       <span class="token number">37</span><span class="token punctuation">,</span>                       buf<span class="token punctuation">,</span>                       <span class="token operator">&amp;</span>SampleApp_TransID<span class="token punctuation">,</span>                       AF_DISCV_ROUTE<span class="token punctuation">,</span>                       AF_DEFAULT_RADIUS <span class="token punctuation">)</span> <span class="token operator">==</span> afStatus_SUCCESS <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//其余省略 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成以上步骤 协调器的串口数据如下<br><img src="/medias/cd/zigbeeresult.jpg"></p><h4 id="姿态解算方法"><a href="#姿态解算方法" class="headerlink" title="姿态解算方法"></a>姿态解算方法</h4><h5 id="计算正确的三轴加速度和角速度值"><a href="#计算正确的三轴加速度和角速度值" class="headerlink" title="计算正确的三轴加速度和角速度值"></a>计算正确的三轴加速度和角速度值</h5><p>角速度参数为：2000deg/s<br>加速度参数为：2g<br>加速度灵敏度为 ((2^16)/2) / 2    = 16384<br>角速度灵敏度为  ((2^16)/2)  / 2000 = 16.4<br>例如: ED2:  +03284  +07958  +12160  -00082  -00038  +00016<br>+03284  +07958  +12160 为 gx gy gz<br>-00082  -00038  +00016 为 ax ay az<br>则真实gx为：<br>gx = 3284 / 16384 = 0.2004….. （gy gz同理）<br>真实ax为：<br>ax = 82 / 16.4 = 5   (ay az同理)</p><h5 id="计算欧拉角"><a href="#计算欧拉角" class="headerlink" title="计算欧拉角"></a>计算欧拉角</h5><p>根据三轴加速度和角速度得出欧拉角。 </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">import</span> csv<span class="token keyword">import</span> serial<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">get_Euler_from_serial</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> portx<span class="token punctuation">,</span> bps<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ser <span class="token operator">=</span> serial<span class="token punctuation">.</span>Serial<span class="token punctuation">(</span>portx<span class="token punctuation">,</span> bps<span class="token punctuation">,</span> timeout <span class="token operator">=</span> timeout<span class="token punctuation">)</span>         self<span class="token punctuation">.</span>ser<span class="token punctuation">.</span>flushInput<span class="token punctuation">(</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>acceleration_Sensitivity <span class="token operator">=</span> <span class="token number">16384</span>  <span class="token comment" spellcheck="true">## 加速度灵敏度2g</span>        self<span class="token punctuation">.</span>Gyroscope_Sensitivity <span class="token operator">=</span> <span class="token number">16.4</span>      <span class="token comment" spellcheck="true">## 加速度灵敏度 2000reg/s</span>        self<span class="token punctuation">.</span>gx<span class="token punctuation">,</span> self<span class="token punctuation">.</span>gy<span class="token punctuation">,</span> self<span class="token punctuation">.</span>gz<span class="token punctuation">,</span> self<span class="token punctuation">.</span>ax<span class="token punctuation">,</span> self<span class="token punctuation">.</span>ay<span class="token punctuation">,</span> self<span class="token punctuation">.</span>az <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>pitch<span class="token punctuation">,</span> self<span class="token punctuation">.</span>roll<span class="token punctuation">,</span> self<span class="token punctuation">.</span>yaw <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_Euler</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>gx <span class="token operator">=</span> float<span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>acceleration_Sensitivity        self<span class="token punctuation">.</span>gy <span class="token operator">=</span> float<span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>acceleration_Sensitivity        self<span class="token punctuation">.</span>gz <span class="token operator">=</span> float<span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>acceleration_Sensitivity        self<span class="token punctuation">.</span>ax <span class="token operator">=</span> float<span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">:</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>Gyroscope_Sensitivity        self<span class="token punctuation">.</span>ay <span class="token operator">=</span> float<span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>Gyroscope_Sensitivity        self<span class="token punctuation">.</span>az <span class="token operator">=</span> float<span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">:</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>Gyroscope_Sensitivity        Kp<span class="token operator">=</span><span class="token number">100</span>        <span class="token comment" spellcheck="true">#比例增益控制加速度计/磁强计的收敛速度</span>        Ki<span class="token operator">=</span><span class="token number">0.002</span>      <span class="token comment" spellcheck="true">#积分增益控制陀螺仪偏差的收敛速度</span>        halft<span class="token operator">=</span><span class="token number">0.001</span>   <span class="token comment" spellcheck="true">#采样周期的一半</span>        <span class="token comment" spellcheck="true">#传感器框架相对于辅助框架的四元数（初始化四元数的值）</span>        q0<span class="token operator">=</span><span class="token number">1</span>        q1<span class="token operator">=</span><span class="token number">0</span>        q2<span class="token operator">=</span><span class="token number">0</span>        q3<span class="token operator">=</span><span class="token number">0</span>        <span class="token comment" spellcheck="true">#由Ki缩放的积分误差项（初始化）</span>        exInt<span class="token operator">=</span><span class="token number">0</span>        eyInt<span class="token operator">=</span><span class="token number">0</span>        ezInt<span class="token operator">=</span><span class="token number">0</span>        aax <span class="token operator">=</span> self<span class="token punctuation">.</span>gx        aay <span class="token operator">=</span> self<span class="token punctuation">.</span>gy        aaz <span class="token operator">=</span> self<span class="token punctuation">.</span>gz        ggx <span class="token operator">=</span> self<span class="token punctuation">.</span>ax        ggy <span class="token operator">=</span> self<span class="token punctuation">.</span>ay        ggz <span class="token operator">=</span> self<span class="token punctuation">.</span>az        ax <span class="token operator">=</span> float<span class="token punctuation">(</span>aax<span class="token punctuation">)</span>        ay <span class="token operator">=</span> float<span class="token punctuation">(</span>aay<span class="token punctuation">)</span>        az <span class="token operator">=</span> float<span class="token punctuation">(</span>aaz<span class="token punctuation">)</span>        gx <span class="token operator">=</span> float<span class="token punctuation">(</span>ggx<span class="token punctuation">)</span>        gy <span class="token operator">=</span> float<span class="token punctuation">(</span>ggy<span class="token punctuation">)</span>        gz <span class="token operator">=</span> float<span class="token punctuation">(</span>ggz<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#单元化</span>        norm<span class="token operator">=</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>ax<span class="token operator">*</span>ax<span class="token operator">+</span>ay<span class="token operator">*</span>ay<span class="token operator">+</span>az<span class="token operator">*</span>az<span class="token punctuation">)</span>        ax<span class="token operator">=</span>ax<span class="token operator">/</span>norm        ay<span class="token operator">=</span>ay<span class="token operator">/</span>norm        az<span class="token operator">=</span>az<span class="token operator">/</span>norm        <span class="token comment" spellcheck="true">#估计方向的重力</span>        vx<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>q1<span class="token operator">*</span>q3<span class="token operator">-</span>q0<span class="token operator">*</span>q2<span class="token punctuation">)</span>        vy<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>q0<span class="token operator">*</span>q1<span class="token operator">+</span>q2<span class="token operator">*</span>q3<span class="token punctuation">)</span>        vz<span class="token operator">=</span>q0<span class="token operator">*</span>q0<span class="token operator">-</span>q1<span class="token operator">*</span>q1<span class="token operator">-</span>q2<span class="token operator">*</span>q2<span class="token operator">+</span>q3<span class="token operator">*</span>q3        <span class="token comment" spellcheck="true"># 错误的领域和方向传感器测量参考方向之间的交叉乘积的总和</span>        ex<span class="token operator">=</span><span class="token punctuation">(</span>ay<span class="token operator">*</span>vz <span class="token operator">-</span> az<span class="token operator">*</span>vy<span class="token punctuation">)</span>        ey<span class="token operator">=</span><span class="token punctuation">(</span>az<span class="token operator">*</span>vx <span class="token operator">-</span> ax<span class="token operator">*</span>vz<span class="token punctuation">)</span>        ez<span class="token operator">=</span><span class="token punctuation">(</span>ax<span class="token operator">*</span>vy <span class="token operator">-</span> ay<span class="token operator">*</span>vx<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 积分误差比例积分增益</span>        exInt <span class="token operator">+=</span>ex<span class="token operator">*</span>Ki        eyInt <span class="token operator">+=</span>ey<span class="token operator">*</span>Ki        ezInt <span class="token operator">+=</span>ez<span class="token operator">*</span>Ki        <span class="token comment" spellcheck="true"># 调整后的陀螺仪测量</span>        gx <span class="token operator">+=</span>Kp<span class="token operator">*</span>ex <span class="token operator">+</span> exInt        gy <span class="token operator">+=</span>Kp<span class="token operator">*</span>ey <span class="token operator">+</span> eyInt        gz <span class="token operator">+=</span>Kp<span class="token operator">*</span>ez <span class="token operator">+</span>ezInt        <span class="token comment" spellcheck="true"># 整合四元数</span>        q0 <span class="token operator">+=</span><span class="token punctuation">(</span><span class="token operator">-</span>q1<span class="token operator">*</span>gx <span class="token operator">-</span> q2<span class="token operator">*</span>gy <span class="token operator">-</span> q3<span class="token operator">*</span>gz<span class="token punctuation">)</span><span class="token operator">*</span>halft        q1 <span class="token operator">+=</span><span class="token punctuation">(</span>q0<span class="token operator">*</span>gx <span class="token operator">+</span> q2<span class="token operator">*</span>gz <span class="token operator">-</span> q3<span class="token operator">*</span>gy<span class="token punctuation">)</span><span class="token operator">*</span>halft        q2 <span class="token operator">+=</span><span class="token punctuation">(</span>q0<span class="token operator">*</span>gy <span class="token operator">-</span> q1<span class="token operator">*</span>gz <span class="token operator">+</span> q3<span class="token operator">*</span>gx<span class="token punctuation">)</span><span class="token operator">*</span>halft        q3 <span class="token operator">+=</span><span class="token punctuation">(</span>q0<span class="token operator">*</span>gz <span class="token operator">+</span> q1<span class="token operator">*</span>gy <span class="token operator">-</span> q2<span class="token operator">*</span>gx<span class="token punctuation">)</span><span class="token operator">*</span>halft        <span class="token comment" spellcheck="true"># 正常化四元数</span>        norm <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>q0<span class="token operator">*</span>q0<span class="token operator">+</span>q1<span class="token operator">*</span>q1<span class="token operator">+</span>q2<span class="token operator">*</span>q2<span class="token operator">+</span>q3<span class="token operator">*</span>q3<span class="token punctuation">)</span>        q0 <span class="token operator">/=</span>norm        q1 <span class="token operator">/=</span>norm        q2 <span class="token operator">/=</span>norm        q3 <span class="token operator">/=</span>norm        <span class="token comment" spellcheck="true"># 获取欧拉角 pitch、roll、yaw</span>        pitch <span class="token operator">=</span> math<span class="token punctuation">.</span>asin<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>q1<span class="token operator">*</span>q3<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>q0<span class="token operator">*</span>q2<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">57.3</span>        roll <span class="token operator">=</span> math<span class="token punctuation">.</span>atan2<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>q2<span class="token operator">*</span>q3<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>q0<span class="token operator">*</span>q1<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>q1<span class="token operator">*</span>q1<span class="token number">-2</span><span class="token operator">*</span>q2<span class="token operator">*</span>q2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">57.3</span>        yaw <span class="token operator">=</span> math<span class="token punctuation">.</span>atan2<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>q1<span class="token operator">*</span>q2 <span class="token operator">+</span> q0<span class="token operator">*</span>q3<span class="token punctuation">)</span><span class="token punctuation">,</span>q0<span class="token operator">*</span>q0<span class="token operator">+</span>q1<span class="token operator">*</span>q1<span class="token operator">-</span>q2<span class="token operator">*</span>q2<span class="token operator">-</span>q3<span class="token operator">*</span>q3<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">57.3</span>        <span class="token comment" spellcheck="true">#打印姿态角信息以及把姿态角数据写到txt文本中</span>        <span class="token keyword">if</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"ED1"</span> <span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ED1: Pitch:%.3f,Roll: %.3f,Yaw:%.3f"</span> <span class="token operator">%</span><span class="token punctuation">(</span>pitch<span class="token punctuation">,</span>roll<span class="token punctuation">,</span>yaw<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"ED2"</span> <span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ED2: Pitch:%.3f,Roll: %.3f,Yaw:%.3f"</span> <span class="token operator">%</span><span class="token punctuation">(</span>pitch<span class="token punctuation">,</span>roll<span class="token punctuation">,</span>yaw<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            count <span class="token operator">=</span> self<span class="token punctuation">.</span>ser<span class="token punctuation">.</span>inWaiting<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取串口缓冲区数据</span>            <span class="token keyword">if</span> count <span class="token operator">!=</span><span class="token number">0</span> <span class="token punctuation">:</span>                recv <span class="token operator">=</span> self<span class="token punctuation">.</span>ser<span class="token punctuation">.</span>read<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ser<span class="token punctuation">.</span>in_waiting<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 读出串口数据，数据采用gbk编码</span>                self<span class="token punctuation">.</span>get_Euler<span class="token punctuation">(</span>recv<span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    get_Euler_from_serial<span class="token punctuation">(</span><span class="token string">"COM10"</span><span class="token punctuation">,</span> <span class="token number">115200</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="得到结果"><a href="#得到结果" class="headerlink" title="得到结果"></a>得到结果</h5><p><img src="/medias/cd/Euler.jpg"></p><h4 id="打板"><a href="#打板" class="headerlink" title="打板"></a>打板</h4><p>终端节点打板就可以<br>所以只需要一个降压模块(ams1117-3.3)和芯片底座以及mpu6050底座<br>能跑就行<br><img src="/medias/cd/board.jpg" alt="立创3d预览图"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/195683958">https://zhuanlan.zhihu.com/p/195683958</a><br><a href="https://zhuanlan.zhihu.com/p/20082486">https://zhuanlan.zhihu.com/p/20082486</a><br>(<a href="https://oshwhub.com/Scarling/shen-tai-dian-sai-jian-yi-dong-zuo-bu-zhuo-shou-tao">https://oshwhub.com/Scarling/shen-tai-dian-sai-jian-yi-dong-zuo-bu-zhuo-shou-tao</a>)</p><h2 id="基于linux的语音识别项目-科大讯飞离线端"><a href="#基于linux的语音识别项目-科大讯飞离线端" class="headerlink" title="基于linux的语音识别项目(科大讯飞离线端)"></a>基于linux的语音识别项目(科大讯飞离线端)</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>该项目是在linux下科大讯飞离线包和虚拟LCD的基础上完成</p><h4 id="涉及的知识"><a href="#涉及的知识" class="headerlink" title="涉及的知识:"></a>涉及的知识:</h4><ul><li>linux基本操作/常用命令</li><li>C语言基础</li><li>TCP/IP(socket网络编程)</li><li>多线程编程</li><li>makefile</li><li>linux简单驱动调用</li></ul><h4 id="工程文件结构"><a href="#工程文件结构" class="headerlink" title="工程文件结构"></a>工程文件结构</h4><p><img src="/project/gcwj.jpg"></p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>本次开发是在windows下的vscode通过ssh插件远程开发<br>linux版本为ubuntu16.04 在VMware下运行<br>需要在虚拟机配置好网卡 alsa声音库等 保证tcp通信 和 声音播放以及录入<br>工程文件如上图 需要编写好makefile(工程较小 没用cmake) 以及配置好文件夹</p><h3 id="配置模拟LCD驱动"><a href="#配置模拟LCD驱动" class="headerlink" title="配置模拟LCD驱动"></a>配置模拟LCD驱动</h3><p>模拟只是为了实现两个功能：<br>图像化界面的显示 —- lcd<br>触摸屏按钮的功能 —- 触摸屏</p><h4 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h4><p><img src="/project/lcd1.jpg"></p><ol><li>进入lcd驱动文件夹 cd  mmap_drv  </li><li>sudo make clean 和 sudo make 清除以及重新编译</li><li>安装驱动 sudo insmod mmp_drv.ko</li><li>进入模拟器目录 重复以上步骤</li></ol><h3 id="客户端与科大讯飞端建立稳定的TCP通信"><a href="#客户端与科大讯飞端建立稳定的TCP通信" class="headerlink" title="客户端与科大讯飞端建立稳定的TCP通信"></a>客户端与科大讯飞端建立稳定的TCP通信</h3><ol><li>打开科大讯飞本地离线包端</li><li>配置语言ID<br><img src="/project/kdxf1.jpg" alt="科大讯飞离线端开启成功"></li><li>测试<br><img src="/project/kdxf2.jpg" alt="与科大讯飞通信成功"></li></ol><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>三个进程</p><ul><li>终端1: 科大讯飞语音识别端</li><li>终端2: 虚拟lcd驱动端</li><li>终端3: 主程序</li></ul><p><img src="/project/result1.jpg"></p><p>通过语音控制客户端 功能有画图 视频播放 音乐等等<br><img src="/project/result2.jpg"></p><h2 id="基于zigbee和mqtt的宿舍防火防盗-物联网"><a href="#基于zigbee和mqtt的宿舍防火防盗-物联网" class="headerlink" title="基于zigbee和mqtt的宿舍防火防盗(物联网)"></a>基于zigbee和mqtt的宿舍防火防盗(物联网)</h2><h2 id="融合通信"><a href="#融合通信" class="headerlink" title="融合通信"></a>融合通信</h2><h2 id="毕设"><a href="#毕设" class="headerlink" title="毕设"></a>毕设</h2>]]></content>
      
      
      <categories>
          
          <category> Other-Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝FreeRTOS</title>
      <link href="/2022/10/15/freertos/"/>
      <url>/2022/10/15/freertos/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文主要记录通过esp32学习裸机以及FreeRTOS<br>ESP32 主频高达240MHZ 还自带wifi…..<br>可以使用arduino和microPython开发 当然这两个在c工程面前都是玩具 但是可以快速验证想法<br>本次浅尝主要用c开发<br>环境：VSCode + ESP-IDF(插件)</p>]]></content>
      
      
      <categories>
          
          <category> EC-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FreeRTOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/2022/10/11/LS/"/>
      <url>/2022/10/11/LS/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> EC-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通信协议</title>
      <link href="/2022/10/11/tx/"/>
      <url>/2022/10/11/tx/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> EC-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux driver</title>
      <link href="/2022/09/16/LD/"/>
      <url>/2022/09/16/LD/</url>
      
        <content type="html"><![CDATA[<p>以及一些 本文记录驱动开发学习上的一些问题 </p>]]></content>
      
      
      <categories>
          
          <category> EC-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C</title>
      <link href="/2022/09/16/c/"/>
      <url>/2022/09/16/c/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> CS-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法</title>
      <link href="/2022/06/29/DSA/"/>
      <url>/2022/06/29/DSA/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h2><p>用python实现 原因:快速入门<br>在CPP中 甚至已经封装好了 晚点在C/CPP实现</p><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><h4 id="计算机思维三大关-递归、分治、平衡"><a href="#计算机思维三大关-递归、分治、平衡" class="headerlink" title="计算机思维三大关 递归、分治、平衡"></a>计算机思维三大关 递归、分治、平衡</h4><p>eee 《浪潮之巅》作者吴军博士说<br>一个人过不了递归这关 计算机这碗饭基本吃不了 这是计算机思维的第一个<br>我的高度来看 他还是有点东西的 虽然貌似他的风评不是很好</p><h5 id="汉罗塔问题"><a href="#汉罗塔问题" class="headerlink" title="汉罗塔问题"></a>汉罗塔问题</h5><pre class="line-numbers language-python3"><code class="language-python3">def hanoi(n, a, b, c):    if n > 0:        hanoi(n-1, a, c, b)        print("moving from %s to %s" % (a, c))        hanoi(n-1, b, a, c)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>算法的五大特性<br>输入: 算法具有0个或多个输入<br>输出: 算法至少有1个或多个输出<br>有穷性: 算法在有限的步骤之后会自动结束而不会无限循环，并且每一个步骤可以在可接受的时间内完成<br>确定性：算法中的每一步都有确定的含义，不会出现二义性<br>可行性：算法的每一步都是可行的，也就是说每一步都能够执行有限的次数完成</p><p>时间比空间重要 可以使用空间换时间</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>时间维度：是指执行当前算法所消耗的时间，我们通常用「时间复杂度」来描述。<br>时间复杂度指的是执行一个算法所需要的时间。 这不一定是一个确切的时间，通常，我们需要知道的是一个算法在最坏情况下执行（比如输入规模无限大）所需要的时间，也就是寻找算法执行时间的一个渐进上界来作为算法的时间复杂度，通过比较多个算法的这个上界，可以知道哪个算法执行比较快，哪个比较慢。</p><table><thead><tr><th>阶</th><th>时间复杂度</th></tr></thead><tbody><tr><td>常数阶</td><td>O(1)</td></tr><tr><td>对数阶</td><td>O(logN))</td></tr><tr><td>线性阶</td><td>O(n)</td></tr><tr><td>线性对数阶</td><td>O(nlogN)</td></tr><tr><td>平方阶</td><td>O(n²)</td></tr><tr><td>立方阶</td><td>O(n³)</td></tr><tr><td>立方阶</td><td>O(n^k)</td></tr><tr><td>指数</td><td>(2^n)</td></tr></tbody></table><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>空间维度：是指执行当前算法需要占用多少内存空间，我们通常用「空间复杂度」来描述。</p><p>空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度，记做S(n)=O. (f(n))。 比如直接插入排序的时间复杂度是O(n^2),空间复杂度是O(1) 。 而一般的递归算法就要有O(n)的空间复杂度了，因为每次递归都要存储返回信息。</p><h3 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h3><p>查找 (python 列表为例)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="利用循环-初始化列表"><a href="#利用循环-初始化列表" class="headerlink" title="利用循环 初始化列表"></a>利用循环 初始化列表</h1><h4 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">## 顾名思义  遍历</span><span class="token keyword">def</span> <span class="token function">liner_serch</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">:</span>            <span class="token keyword">return</span> i    <span class="token keyword">return</span> None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">## 二分查找的速度是暴力查找的指数倍</span><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    low <span class="token operator">=</span> <span class="token number">0</span>     hight <span class="token operator">=</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>     <span class="token keyword">while</span> low <span class="token operator">&lt;=</span> hight<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> hight<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> list<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">:</span>            <span class="token keyword">return</span> mid         <span class="token keyword">elif</span> list<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">:</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>         <span class="token keyword">else</span><span class="token punctuation">:</span>            hight <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">return</span> None <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>排序</p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">##  冒泡排序 每一轮遍历 把最大的放到最后得后</span><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span>  list<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 遍历 把最小的放到最前</span><span class="token keyword">def</span> <span class="token function">selection_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        min_index <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">:</span>                min_index <span class="token operator">=</span> j        list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 第一次遍历顺序  第二次遍历最小值弄到前面 二次遍历的索引需要跟前情况而定range(i, 0, -1)</span><span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        min_index <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">:</span>                min_index <span class="token operator">=</span> j        list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">### 递归思想 分治思想</span><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> list    pivot <span class="token operator">=</span> list<span class="token punctuation">[</span>len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 存比基准值小的数字   就是赋值一个列表</span>    left <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> list <span class="token keyword">if</span> x <span class="token operator">&lt;</span> pivot<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 存放基准值的列表</span>    middle <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> list <span class="token keyword">if</span> x <span class="token operator">==</span> pivot<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 存比基准值大的数字</span>    right <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> list <span class="token keyword">if</span> x <span class="token operator">></span> pivot<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 对除了存基准值的列表进行递归（为什么要用一个单独的列表去存基准值? 因为列表之间可以用+去拼接）</span>    <span class="token keyword">return</span> quick_sort<span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> middle <span class="token operator">+</span> quick_sort<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="堆排"><a href="#堆排" class="headerlink" title="堆排"></a>堆排</h4><ol><li>将待排序的数组初始化为大顶堆，该过程为建堆。</li><li>将堆顶元素与最后一个元素交换，除去最后一个元素外可以建立一个新的大顶堆。</li><li>由于第二部堆顶元素跟最后一个元素交换后，新建立的堆不是大顶堆，需要重新建立大顶堆。</li><li>重复上面流程，直到仅剩一个元素。</li></ol><p>比较难的一个排序 目前没能力空手敲 </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># 数组长度</span>    first <span class="token operator">=</span> int<span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 最后一个非叶子节点</span>    <span class="token keyword">for</span> start <span class="token keyword">in</span> range<span class="token punctuation">(</span>first<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 从最后一个非叶子节点开始调整</span>        max_heapify<span class="token punctuation">(</span>list<span class="token punctuation">,</span> start<span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 调整为大顶堆</span>    <span class="token keyword">for</span> end <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 从最后一个元素开始对序列进行调整</span>        list<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 交换</span>        max_heapify<span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> end<span class="token number">-1</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 调整为大顶堆</span>    <span class="token keyword">return</span> list <span class="token keyword">def</span> <span class="token function">max_heapify</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 堆调整</span>    root <span class="token operator">=</span> start   <span class="token comment" spellcheck="true"># 当前（子）树的根</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 循环调整</span>        child <span class="token operator">=</span> root <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 左子节点</span>        <span class="token keyword">if</span> child <span class="token operator">></span> end<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果左子节点超出范围，直接跳出</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> child <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> end <span class="token operator">and</span> list<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&lt;</span> list<span class="token punctuation">[</span>child<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果右子节点存在且大于左子节点</span>            child <span class="token operator">+=</span> <span class="token number">1</span>     <span class="token comment" spellcheck="true"># </span>        <span class="token keyword">if</span> list<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">&lt;</span> list<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果子节点大于根节点</span>            list<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>root<span class="token punctuation">]</span>            root <span class="token operator">=</span> child        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><h3 id="常用数据结构"><a href="#常用数据结构" class="headerlink" title="常用数据结构"></a>常用数据结构</h3><h4 id="栈、队列、双端队列"><a href="#栈、队列、双端队列" class="headerlink" title="栈、队列、双端队列"></a>栈、队列、双端队列</h4><h5 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h5><h5 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h5><h5 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h5><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>链表是一种在存储单元上非连续、非顺序的存储结构。数据元素的逻辑顺序是通过链表中的指针链接次序实现。链表是由一系列的结点组成，结点可以在运行时动态生成。每个结点包含两部分：数据域与指针域。数据域存储数据元素，指针域存储下一结点的指针。</p><h5 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h5><p>单向链表也叫单链表，是链表中最简单的形式，它的每个节点包含两个域，一个信息域（元素域）和一个链接域。这个链接指向链表中的下一个节点，而最后一个节点的链接域则指向一个空值。</p><p>单向链表的操作方法：<br>is_empty() 链表是否为空<br>length() 链表长度<br>items() 获取链表数据迭代器<br>add(item) 链表头部添加元素<br>append(item) 链表尾部添加元素<br>insert(pos, item) 指定位置添加元素<br>remove(item) 删除节点<br>find(item) 查找节点是否存在</p><p>节点定义：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data        <span class="token comment" spellcheck="true">#数据域</span>        self<span class="token punctuation">.</span>next <span class="token operator">=</span> None        <span class="token comment" spellcheck="true">#指针域</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>代码如下:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SingleLinkList</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_head <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_head <span class="token keyword">is</span> None    <span class="token keyword">def</span> <span class="token function">length</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            count <span class="token operator">+=</span> <span class="token number">1</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next        <span class="token keyword">return</span> count    <span class="token keyword">def</span> <span class="token function">items</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取head指针</span>        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head        <span class="token comment" spellcheck="true"># 循环遍历</span>        <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 返回生成器</span>            <span class="token keyword">yield</span> cur<span class="token punctuation">.</span>item            <span class="token comment" spellcheck="true"># 指针下移</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""向链表头部添加元素"""</span>        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 新结点指针指向原头部结点</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>_head        <span class="token comment" spellcheck="true"># 头部结点指针修改为新结点</span>        self<span class="token punctuation">.</span>_head <span class="token operator">=</span> node    <span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""尾部添加元素"""</span>        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 先判断是否为空链表</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 空链表，_head 指向新结点</span>            self<span class="token punctuation">.</span>_head <span class="token operator">=</span> node        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 不是空链表，则找到尾部，将尾部next结点指向新结点</span>            cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head            <span class="token keyword">while</span> cur<span class="token punctuation">.</span>next <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> node    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""指定位置插入元素"""</span>        <span class="token comment" spellcheck="true"># 指定位置在第一个元素之前，在头部插入</span>        <span class="token keyword">if</span> index <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 指定位置超过尾部，在尾部插入</span>        <span class="token keyword">elif</span> index <span class="token operator">></span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>length<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 创建元素结点</span>            node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>            cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head            <span class="token comment" spellcheck="true"># 循环到需要插入的位置</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            node<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> node    <span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""删除节点"""</span>        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head        pre <span class="token operator">=</span> None        <span class="token keyword">while</span> cur <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 找到指定元素</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>item <span class="token operator">==</span> item<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 如果第一个就是删除的节点</span>                <span class="token keyword">if</span> <span class="token operator">not</span> pre<span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 将头指针指向头节点的后一个节点</span>                    self<span class="token punctuation">.</span>_head <span class="token operator">=</span> cur<span class="token punctuation">.</span>next                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 将删除位置前一个节点的next指向删除位置的后一个节点</span>                    pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 继续按链表后移节点</span>                pre <span class="token operator">=</span> cur                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""查找元素是否存在"""</span>        <span class="token keyword">return</span> item <span class="token keyword">in</span> self<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>循环链表、双向链表不表</p><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><h4 id="树"><a href="#树" class="headerlink" title="树"></a>树</h4><h5 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h5><p>节点定义：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BiTreeNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> lchild <span class="token operator">=</span> None<span class="token punctuation">,</span> rchild <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data        self<span class="token punctuation">.</span>lchild <span class="token operator">=</span> None        self<span class="token punctuation">.</span>rchild <span class="token operator">=</span> None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二叉树的遍历：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">## 前序遍历</span><span class="token keyword">def</span> <span class="token function">pre_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> root<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出根节点</span>        pre_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 输出根节点的左子树 先根节点 再左子树 再右子树 递归实现</span>        pre_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 同理</span><span class="token comment" spellcheck="true">## 中序遍历</span><span class="token keyword">def</span> <span class="token function">in_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> root<span class="token punctuation">:</span>        in_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>        in_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span><span class="token comment" spellcheck="true">## 后序遍历</span><span class="token keyword">def</span> <span class="token function">post_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> root<span class="token punctuation">:</span>        post_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>        post_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">## 层次遍历(用到了队列)</span><span class="token keyword">def</span> <span class="token function">level_order</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>    queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>    queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>    <span class="token keyword">while</span> len<span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        node <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> node<span class="token punctuation">.</span>lchild<span class="token punctuation">:</span>            queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>        <span class="token keyword">if</span> node<span class="token punctuation">.</span>rchild<span class="token punctuation">:</span>            queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h5><p>定义：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BSTNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data        self<span class="token punctuation">.</span>lchild <span class="token operator">=</span> None        self<span class="token punctuation">.</span>rchild <span class="token operator">=</span> None        self<span class="token punctuation">.</span>parent <span class="token operator">=</span> None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BST</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> li<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>root <span class="token operator">=</span> None        <span class="token keyword">if</span> li<span class="token punctuation">:</span>            <span class="token keyword">for</span> element <span class="token keyword">in</span> li<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>insert_no_rec<span class="token punctuation">(</span>element<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">## 插入 递归</span>    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> node <span class="token operator">==</span> None<span class="token punctuation">:</span>            node <span class="token operator">=</span> BSTNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">elif</span> val <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>data<span class="token punctuation">:</span>            node<span class="token punctuation">.</span>lchild <span class="token operator">=</span> self<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>node<span class="token punctuation">.</span>lchild<span class="token punctuation">,</span> val<span class="token punctuation">)</span>            node<span class="token punctuation">.</span>lchild<span class="token punctuation">.</span>parent <span class="token operator">=</span> node         <span class="token keyword">elif</span> val <span class="token operator">></span> node<span class="token punctuation">.</span>data<span class="token punctuation">:</span>            node<span class="token punctuation">.</span>rchild <span class="token operator">=</span> self<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>node<span class="token punctuation">.</span>rchild<span class="token punctuation">,</span> val<span class="token punctuation">)</span>            node<span class="token punctuation">.</span>lchild<span class="token punctuation">.</span>parent <span class="token operator">=</span> node         <span class="token keyword">return</span> node    <span class="token comment" spellcheck="true">## 插入</span>    <span class="token keyword">def</span> <span class="token function">insert_no_rec</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> self<span class="token punctuation">.</span>root         <span class="token keyword">if</span> <span class="token operator">not</span> p<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>root <span class="token operator">=</span> BSTNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>            <span class="token keyword">return</span>         <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> val <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>data<span class="token punctuation">:</span>                <span class="token keyword">if</span> p<span class="token punctuation">.</span>lchild<span class="token punctuation">:</span>                    p <span class="token operator">=</span> p<span class="token punctuation">.</span>lchild                <span class="token keyword">else</span><span class="token punctuation">:</span>                    p<span class="token punctuation">.</span>lchild <span class="token operator">=</span> BSTNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>                    p<span class="token punctuation">.</span>lchild<span class="token punctuation">.</span>parent <span class="token operator">=</span> p                    <span class="token keyword">return</span>            <span class="token keyword">elif</span> val <span class="token operator">></span> p<span class="token punctuation">.</span>data<span class="token punctuation">:</span>                <span class="token keyword">if</span> p<span class="token punctuation">.</span>rchild<span class="token punctuation">:</span>                    p <span class="token operator">=</span> p<span class="token punctuation">.</span>rchild                <span class="token keyword">else</span><span class="token punctuation">:</span>                    p<span class="token punctuation">.</span>rchild <span class="token operator">=</span> BSTNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>                    p<span class="token punctuation">.</span>rchild<span class="token punctuation">.</span>parent <span class="token operator">=</span> p                    <span class="token keyword">return</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>     <span class="token comment" spellcheck="true">## 中序遍历在二叉搜索树中 结果是按顺序的</span>    <span class="token keyword">def</span> <span class="token function">in_order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> root<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>in_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>in_order<span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">## 查询 递归写法</span>    <span class="token keyword">def</span> <span class="token function">search_rec</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> node<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> node<span class="token punctuation">.</span>data <span class="token operator">&lt;</span> val<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>search_rec<span class="token punctuation">(</span>node<span class="token punctuation">.</span>rchild<span class="token punctuation">,</span> val<span class="token punctuation">)</span>        <span class="token keyword">elif</span> node<span class="token punctuation">.</span>data <span class="token operator">></span> val<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>search_rec<span class="token punctuation">(</span>node<span class="token punctuation">.</span>lchild<span class="token punctuation">,</span> val<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="图"><a href="#图" class="headerlink" title="图"></a>图</h4>]]></content>
      
      
      <categories>
          
          <category> CS-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data-structure algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/2022/06/29/SQL/"/>
      <url>/2022/06/29/SQL/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> CS-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录</title>
      <link href="/2022/05/06/project/"/>
      <url>/2022/05/06/project/</url>
      
        <content type="html"><![CDATA[<h2 id="用stm32简单玩一下esp8266-能用mqtt-没有写适配代码"><a href="#用stm32简单玩一下esp8266-能用mqtt-没有写适配代码" class="headerlink" title="用stm32简单玩一下esp8266(能用mqtt 没有写适配代码)"></a>用stm32简单玩一下esp8266(能用mqtt 没有写适配代码)</h2><h3 id="一-固件更新"><a href="#一-固件更新" class="headerlink" title="一. 固件更新"></a>一. 固件更新</h3><p>如果esp8266模块需要使用mqtt协议，一般是需要更新固件的。<br>买到能用mqtt最好不过了<br>参考：<a href="http://www.piaoyi.org/iot/espressif-ESP8266-MQTT-AT.html">http://www.piaoyi.org/iot/espressif-ESP8266-MQTT-AT.html</a></p><h3 id="二-使用stm32进行串口配置"><a href="#二-使用stm32进行串口配置" class="headerlink" title="二. 使用stm32进行串口配置"></a>二. 使用stm32进行串口配置</h3><p>简单用了一下freertos和串口dma<br>大致就是利用dma 串口1接收到内存<br>开了一个任务 中断发生就通知任务回显接收的数据<br>就实现了通过stm32控制esp8266<br>有点复杂 纯属就是为了玩一下 如果需要移植 还需要修改<br>2.1 stm32cubemx配置<br>就正常配置 开启uart1 rx的dma以及开启uart1 全局中断<br>freertos新建一个任务<br><img src="/project/uart1dma.png" alt="串口dma配置"><br><img src="/project/esp8266_in.png" alt="开启串口1全局中断"><br><img src="/project/freertos_esp8266.png" alt="FreeRTOS新建任务"></p><p>esp8266引脚初始化</p><pre class="line-numbers language-c"><code class="language-c">ESP8266_StatusTypeDef <span class="token function">InitEsp8266</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">HAL_GPIO_WritePin</span><span class="token punctuation">(</span>GPIOE<span class="token punctuation">,</span> GPIO_PIN_10<span class="token punctuation">,</span> GPIO_PIN_SET<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//ESP8266EN</span>    <span class="token function">HAL_GPIO_WritePin</span><span class="token punctuation">(</span>GPIOE<span class="token punctuation">,</span> GPIO_PIN_11<span class="token punctuation">,</span> GPIO_PIN_RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HAL_GPIO_WritePin</span><span class="token punctuation">(</span>GPIOE<span class="token punctuation">,</span> GPIO_PIN_11<span class="token punctuation">,</span> GPIO_PIN_SET<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ESP8266 reseted</span>    <span class="token function">HAL_Delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ESP8266_OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//一个en 一个reset 随便两个引脚即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>串口1中断处理函数</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">USART1_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* USER CODE BEGIN USART1_IRQn 0 */</span>    temp <span class="token operator">=</span> <span class="token function">__HAL_UART_GET_FLAG</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> UART_FLAG_IDLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> RESET<span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">=</span> huart1<span class="token punctuation">.</span>Instance<span class="token operator">-></span>ISR<span class="token punctuation">;</span>        temp <span class="token operator">=</span> huart1<span class="token punctuation">.</span>Instance<span class="token operator">-></span>RDR<span class="token punctuation">;</span>        <span class="token function">HAL_UART_DMAStop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> <span class="token function">__HAL_DMA_GET_COUNTER</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hdma_usart1_rx<span class="token punctuation">)</span><span class="token punctuation">;</span>        U1RxBufferLen <span class="token operator">=</span> BUFFER_SIZE_MAX <span class="token operator">-</span> temp<span class="token punctuation">;</span>        <span class="token function">osThreadFlagsSet</span><span class="token punctuation">(</span>DriverTaskHandle<span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 通知 DriverTaskHandle task</span>        <span class="token function">__HAL_UART_CLEAR_IDLEFLAG</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HAL_UART_Receive_DMA</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> U1RxBuffer<span class="token punctuation">,</span> BUFFER_SIZE_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* USER CODE END USART1_IRQn 0 */</span>  <span class="token comment" spellcheck="true">//HAL_UART_IRQHandler(&amp;huart1);</span>  <span class="token comment" spellcheck="true">/* USER CODE BEGIN USART1_IRQn 1 */</span>  <span class="token comment" spellcheck="true">/* USER CODE END USART1_IRQn 1 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>FreeRTOS任务</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//copy from freertos.c</span><span class="token keyword">void</span> <span class="token function">DriverTaskFunc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>argument<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">InitEsp8266</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">osDelay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HAL_UART_Receive_DMA</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> U1RxBuffer<span class="token punctuation">,</span> BUFFER_SIZE_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__HAL_UART_ENABLE_IT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> UART_IT_IDLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 使能空闲中断</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">osThreadFlagsWait</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">,</span> osFlagsWaitAny<span class="token punctuation">,</span> osWaitForever<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">HAL_UART_Transmit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>huart1<span class="token punctuation">,</span> U1RxBuffer<span class="token punctuation">,</span> U1RxBufferLen<span class="token punctuation">,</span> <span class="token number">0xFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"U1RxBufferLen = %d\n"</span><span class="token punctuation">,</span> U1RxBufferLen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>U1RxBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> BUFFER_SIZE_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>        U1RxBufferLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">osDelay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//__HAL_UART_ENABLE_IT(&amp;huart1, UART_IT_IDLE);</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* USER CODE END DriverTaskFunc */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三-结果测试"><a href="#三-结果测试" class="headerlink" title="三. 结果测试"></a>三. 结果测试</h3><p>这个时候 接好线 就可以通过stm32控制esp8266了<br>附上AT指令 指令后面记得加上换行符(\r\n)<br><img src="/project/AT.png" alt="AT指令"><br><img src="/project/MQTTRES.png" alt="MQTT测试"></p><h2 id="校园打卡"><a href="#校园打卡" class="headerlink" title="校园打卡"></a>校园打卡</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><h4 id="分组与选题"><a href="#分组与选题" class="headerlink" title="分组与选题"></a>分组与选题</h4><p>自由组合，8-10人一组，每组推选组长1人；可以在下面的参考选题中自由选题或自拟题目。</p><h4 id="选题"><a href="#选题" class="headerlink" title="选题"></a>选题</h4><p>基于校园卡的学生考勤系统<br>（1）任务设计制作<br>    基于校园卡的学生考勤系统。<br>（2）要求<br>    1. 以校园卡（RFID卡）作为身份识别卡，刷卡进行签到。<br>    2. 刷卡信息可以传输至WEB服务器（传输方式自拟，可以是有线的，也可以是无线的）进行验证；验证结果可以返回至客服端进行显示（验证成功或失败）。<br>    3. 编写B/S结构的应用程序，可以通过网页浏览器实时查看考勤信息。<br>    4. 电路制作时，必须注明本组成员学号与姓名。</p><h3 id="选题修改"><a href="#选题修改" class="headerlink" title="选题修改"></a>选题修改</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>基于校园卡的学生考勤系统（不变）</p><h5 id="要求-1"><a href="#要求-1" class="headerlink" title="要求"></a>要求</h5><ol><li>以校园卡（RFID卡）作为身份识别卡，刷卡进行签到。</li><li>刷卡信息可以传输至私有服务器数据库</li><li>在小程序中实时查看考勤信息。</li><li>电路制作时，必须注明本组成员学号与姓名。</li></ol><h3 id="主控"><a href="#主控" class="headerlink" title="主控"></a>主控</h3><p>ESP32 (Xtensa® 双核32 位LX6 微处理器) 240MHZ</p><h3 id="外设"><a href="#外设" class="headerlink" title="外设"></a>外设</h3><p>nfc模块: RC522(SPI)<br>屏幕:    3.2寸 ili9341(SPI) xpt2046(SPI)<br>蜂鸣器：  低电平有效(GPIO)<br>RGB灯：   WS2812B(RMT)</p><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ol><li>esp32(IDE: ESP-IDF &amp; VSCODE)</li><li>FreeRTOS</li><li>LVGL (ui)</li><li>SPI UART RMT</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="esp32程序设计"><a href="#esp32程序设计" class="headerlink" title="esp32程序设计"></a>esp32程序设计</h4><h5 id="蜂鸣器和RGB灯io"><a href="#蜂鸣器和RGB灯io" class="headerlink" title="蜂鸣器和RGB灯io"></a>蜂鸣器和RGB灯io</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//蜂鸣器</span>gpio_config_t user_io_conf <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span>pin_bit_mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1ULL</span> <span class="token operator">&lt;&lt;</span> BEEP<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>mode <span class="token operator">=</span> GPIO_MODE_OUTPUT<span class="token punctuation">,</span>    <span class="token punctuation">.</span>pull_up_en <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>pull_down_en <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>intr_type <span class="token operator">=</span> GPIO_INTR_DISABLE<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>esp_err_t <span class="token function">user_gpio_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    esp_err_t ret <span class="token operator">=</span> ESP_OK<span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">gpio_config</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user_io_conf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> ESP_OK<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"gpio config error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">gpio_set_level</span><span class="token punctuation">(</span>BEEP<span class="token punctuation">,</span> SET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//RGB</span><span class="token keyword">void</span> <span class="token function">init_led</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    rmt_config_t config <span class="token operator">=</span> <span class="token function">RMT_DEFAULT_CONFIG_TX</span><span class="token punctuation">(</span>RMT_TX_NUM<span class="token punctuation">,</span> RMT_TX_CHANNEL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置引脚及通道</span>    <span class="token comment" spellcheck="true">// set counter clock to 40MHz</span>    config<span class="token punctuation">.</span>clk_div <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">ESP_ERROR_CHECK</span><span class="token punctuation">(</span><span class="token function">rmt_config</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ESP_ERROR_CHECK</span><span class="token punctuation">(</span><span class="token function">rmt_driver_install</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>channel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// install ws2812 driver</span>    led_strip_config_t strip_config <span class="token operator">=</span> <span class="token function">LED_STRIP_DEFAULT_CONFIG</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>led_strip_dev_t<span class="token punctuation">)</span>config<span class="token punctuation">.</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>    strip <span class="token operator">=</span> <span class="token function">led_strip_new_rmt_ws2812</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>strip_config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>strip<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">ESP_LOGE</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"install WS2812 driver failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Clear LED strip (turn off all LEDs)</span>    <span class="token function">ESP_ERROR_CHECK</span><span class="token punctuation">(</span>strip<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span>strip<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">set_rgb</span><span class="token punctuation">(</span>uint16_t Red<span class="token punctuation">,</span> uint16_t Green<span class="token punctuation">,</span> uint16_t Blue<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> LED_STRIP_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        strip<span class="token operator">-></span><span class="token function">set_pixel</span><span class="token punctuation">(</span>strip<span class="token punctuation">,</span> i<span class="token punctuation">,</span> Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置颜色</span>    <span class="token punctuation">}</span>    WS2812_RGB<span class="token punctuation">.</span>red <span class="token operator">=</span> Red<span class="token punctuation">;</span>    WS2812_RGB<span class="token punctuation">.</span>green <span class="token operator">=</span> Green<span class="token punctuation">;</span>    WS2812_RGB<span class="token punctuation">.</span>blue <span class="token operator">=</span> Blue<span class="token punctuation">;</span>    strip<span class="token operator">-></span><span class="token function">refresh</span><span class="token punctuation">(</span>strip<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="wifi-mqtt初始化"><a href="#wifi-mqtt初始化" class="headerlink" title="wifi/mqtt初始化"></a>wifi/mqtt初始化</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// sta wifi config</span><span class="token keyword">static</span> wifi_sta_config_t wifi_sta_config <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span>ssid <span class="token operator">=</span> <span class="token string">"FengLE"</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string">"987654321"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mqtt config</span>esp_mqtt_client_config_t mqtt_config <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span>uri <span class="token operator">=</span> <span class="token string">"mqtt://182.61.xx.xx"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//.event_handle = mqtt_event_handler, //</span>        <span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token number">1883</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>esp_mqtt_client_handle_t client_task<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">wifi_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1</span>    esp_err_t err <span class="token operator">=</span> <span class="token function">nvs_flash_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> ESP_ERR_NVS_NO_FREE_PAGES <span class="token operator">||</span> err <span class="token operator">==</span> ESP_ERR_NVS_NEW_VERSION_FOUND<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ESP_ERROR_CHECK</span><span class="token punctuation">(</span><span class="token function">nvs_flash_erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        err <span class="token operator">=</span> <span class="token function">nvs_flash_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ESP_ERROR_CHECK</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2</span>    <span class="token function">esp_netif_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">esp_event_loop_create_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">esp_netif_create_default_wifi_sta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wifi_init_config_t cfg <span class="token operator">=</span> <span class="token function">WIFI_INIT_CONFIG_DEFAULT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">esp_wifi_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">esp_wifi_set_config</span><span class="token punctuation">(</span>WIFI_IF_STA<span class="token punctuation">,</span> <span class="token punctuation">(</span>wifi_config_t <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>wifi_sta_config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">esp_wifi_set_mode</span><span class="token punctuation">(</span>WIFI_MODE_STA<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">esp_event_handler_instance_register</span><span class="token punctuation">(</span>WIFI_EVENT<span class="token punctuation">,</span> ESP_EVENT_ANY_ID<span class="token punctuation">,</span> wifi_event_handler<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">esp_event_handler_instance_register</span><span class="token punctuation">(</span>IP_EVENT<span class="token punctuation">,</span> IP_EVENT_STA_GOT_IP<span class="token punctuation">,</span> wifi_event_handler<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">esp_wifi_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    client_task <span class="token operator">=</span> <span class="token function">esp_mqtt_client_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mqtt_config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">esp_mqtt_client_start</span><span class="token punctuation">(</span>client_task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="适配RC522"><a href="#适配RC522" class="headerlink" title="适配RC522"></a>适配RC522</h5><p>参考：<a href="https://github.com/abobija/esp-idf-rc522">https://github.com/abobija/esp-idf-rc522</a> (写得太好了 无法超越)</p><h5 id="移植LVGL"><a href="#移植LVGL" class="headerlink" title="移植LVGL"></a>移植LVGL</h5><p>参考：<br><a href="https://github.com/lvgl/lvgl">https://github.com/lvgl/lvgl</a><br><a href="https://zhuanlan.zhihu.com/p/531079101">https://zhuanlan.zhihu.com/p/531079101</a>     </p><h5 id="freertos使用"><a href="#freertos使用" class="headerlink" title="freertos使用"></a>freertos使用</h5><p>暂时不表</p><h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><p>安装emqx、mysql、配置端口<br>暂不表</p><h4 id="电路设计和打板"><a href="#电路设计和打板" class="headerlink" title="电路设计和打板"></a>电路设计和打板</h4><h5 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h5><p><img src="/medias/stcard/sch.png" alt="原理图"></p><h5 id="pcb"><a href="#pcb" class="headerlink" title="pcb"></a>pcb</h5><p>…</p><h5 id="bom"><a href="#bom" class="headerlink" title="bom"></a>bom</h5><p>····</p><h5 id="实物"><a href="#实物" class="headerlink" title="实物"></a>实物</h5><p><img src="/medias/stcard/res.jpg" alt="实物"></p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>…</p>]]></content>
      
      
      <categories>
          
          <category> Other-Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT</title>
      <link href="/2022/04/27/QT/"/>
      <url>/2022/04/27/QT/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> EC-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>other</title>
      <link href="/2022/04/26/math/"/>
      <url>/2022/04/26/math/</url>
      
        <content type="html"><![CDATA[<h2 id="Linear-Algebra"><a href="#Linear-Algebra" class="headerlink" title="Linear Algebra"></a>Linear Algebra</h2><h2 id="Probability-and-Statistics"><a href="#Probability-and-Statistics" class="headerlink" title="Probability and Statistics"></a>Probability and Statistics</h2><h2 id="discrete-mathematics"><a href="#discrete-mathematics" class="headerlink" title="discrete mathematics"></a>discrete mathematics</h2><h2 id="Circuit-basis"><a href="#Circuit-basis" class="headerlink" title="Circuit basis"></a>Circuit basis</h2><h2 id="analogical-electronics"><a href="#analogical-electronics" class="headerlink" title="analogical electronics"></a>analogical electronics</h2><h2 id="digital-electronic"><a href="#digital-electronic" class="headerlink" title="digital electronic"></a>digital electronic</h2><h2 id="computer-composition"><a href="#computer-composition" class="headerlink" title="computer composition"></a>computer composition</h2><h2 id="computer-network"><a href="#computer-network" class="headerlink" title="computer network"></a>computer network</h2><h2 id="operating-system"><a href="#operating-system" class="headerlink" title="operating system"></a>operating system</h2>]]></content>
      
      
      <categories>
          
          <category> Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++</title>
      <link href="/2022/03/27/cpp/"/>
      <url>/2022/03/27/cpp/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> CS-Basics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
